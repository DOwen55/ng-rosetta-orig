(function () {
    'use strict';
    function __$styleInject(css, returnValue) {
        if (typeof document === 'undefined') {
            return returnValue;
        }
        css = css || '';
        var head = document.head || document.getElementsByTagName('head')[0];
        var style = document.createElement('style');
        style.type = 'text/css';
        if (style.styleSheet) {
            style.styleSheet.cssText = css;
        }
        else {
            style.appendChild(document.createTextNode(css));
        }
        head.appendChild(style);
        return returnValue;
    }
    var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }
    var root = createCommonjsModule(function (module, exports) {
        "use strict";
        exports.root = (typeof window == 'object' && window.window === window && window
            || typeof self == 'object' && self.self === self && self
            || typeof commonjsGlobal == 'object' && commonjsGlobal.global === commonjsGlobal && commonjsGlobal);
        if (!exports.root) {
            throw new Error('RxJS could not find any global context (window, self, global)');
        }
    });
    function isFunction(x) {
        return typeof x === 'function';
    }
    var isFunction_2 = isFunction;
    var isFunction_1$1 = {
        isFunction: isFunction_2
    };
    var isArray_1$1 = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
    var isArray = {
        isArray: isArray_1$1
    };
    function isObject(x) {
        return x != null && typeof x === 'object';
    }
    var isObject_2 = isObject;
    var isObject_1$1 = {
        isObject: isObject_2
    };
    var errorObject_1$2 = { e: {} };
    var errorObject = {
        errorObject: errorObject_1$2
    };
    var errorObject_1$1 = errorObject;
    var tryCatchTarget;
    function tryCatcher() {
        try {
            return tryCatchTarget.apply(this, arguments);
        }
        catch (e) {
            errorObject_1$1.errorObject.e = e;
            return errorObject_1$1.errorObject;
        }
    }
    function tryCatch(fn) {
        tryCatchTarget = fn;
        return tryCatcher;
    }
    var tryCatch_2 = tryCatch;
    var tryCatch_1$1 = {
        tryCatch: tryCatch_2
    };
    var __extends$4 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var UnsubscriptionError = (function (_super) {
        __extends$4(UnsubscriptionError, _super);
        function UnsubscriptionError(errors) {
            _super.call(this);
            this.errors = errors;
            var err = Error.call(this, errors ?
                errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
            this.name = err.name = 'UnsubscriptionError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return UnsubscriptionError;
    }(Error));
    var UnsubscriptionError_2 = UnsubscriptionError;
    var UnsubscriptionError_1$1 = {
        UnsubscriptionError: UnsubscriptionError_2
    };
    var isArray_1 = isArray;
    var isObject_1 = isObject_1$1;
    var isFunction_1$3 = isFunction_1$1;
    var tryCatch_1 = tryCatch_1$1;
    var errorObject_1 = errorObject;
    var UnsubscriptionError_1 = UnsubscriptionError_1$1;
    var Subscription = (function () {
        function Subscription(unsubscribe) {
            this.closed = false;
            if (unsubscribe) {
                this._unsubscribe = unsubscribe;
            }
        }
        Subscription.prototype.unsubscribe = function () {
            var hasErrors = false;
            var errors;
            if (this.closed) {
                return;
            }
            this.closed = true;
            var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
            this._subscriptions = null;
            if (isFunction_1$3.isFunction(_unsubscribe)) {
                var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
                if (trial === errorObject_1.errorObject) {
                    hasErrors = true;
                    (errors = errors || []).push(errorObject_1.errorObject.e);
                }
            }
            if (isArray_1.isArray(_subscriptions)) {
                var index = -1;
                var len = _subscriptions.length;
                while (++index < len) {
                    var sub = _subscriptions[index];
                    if (isObject_1.isObject(sub)) {
                        var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
                        if (trial === errorObject_1.errorObject) {
                            hasErrors = true;
                            errors = errors || [];
                            var err = errorObject_1.errorObject.e;
                            if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
                                errors = errors.concat(err.errors);
                            }
                            else {
                                errors.push(err);
                            }
                        }
                    }
                }
            }
            if (hasErrors) {
                throw new UnsubscriptionError_1.UnsubscriptionError(errors);
            }
        };
        Subscription.prototype.add = function (teardown) {
            if (!teardown || (teardown === Subscription.EMPTY)) {
                return Subscription.EMPTY;
            }
            if (teardown === this) {
                return this;
            }
            var sub = teardown;
            switch (typeof teardown) {
                case 'function':
                    sub = new Subscription(teardown);
                case 'object':
                    if (sub.closed || typeof sub.unsubscribe !== 'function') {
                        break;
                    }
                    else if (this.closed) {
                        sub.unsubscribe();
                    }
                    else {
                        (this._subscriptions || (this._subscriptions = [])).push(sub);
                    }
                    break;
                default:
                    throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
            return sub;
        };
        Subscription.prototype.remove = function (subscription) {
            if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
                return;
            }
            var subscriptions = this._subscriptions;
            if (subscriptions) {
                var subscriptionIndex = subscriptions.indexOf(subscription);
                if (subscriptionIndex !== -1) {
                    subscriptions.splice(subscriptionIndex, 1);
                }
            }
        };
        Subscription.EMPTY = (function (empty) {
            empty.closed = true;
            return empty;
        }(new Subscription()));
        return Subscription;
    }());
    var Subscription_2 = Subscription;
    var Subscription_1$1 = {
        Subscription: Subscription_2
    };
    var empty = {
        closed: true,
        next: function (value) { },
        error: function (err) { throw err; },
        complete: function () { }
    };
    var Observer = {
        empty: empty
    };
    var root_1$2 = root;
    var Symbol = root_1$2.root.Symbol;
    var $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
        Symbol.for('rxSubscriber') : '@@rxSubscriber';
    var rxSubscriber = {
        $$rxSubscriber: $$rxSubscriber
    };
    var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isFunction_1 = isFunction_1$1;
    var Subscription_1 = Subscription_1$1;
    var Observer_1$1 = Observer;
    var rxSubscriber_1$1 = rxSubscriber;
    var Subscriber = (function (_super) {
        __extends$3(Subscriber, _super);
        function Subscriber(destinationOrNext, error, complete) {
            _super.call(this);
            this.syncErrorValue = null;
            this.syncErrorThrown = false;
            this.syncErrorThrowable = false;
            this.isStopped = false;
            switch (arguments.length) {
                case 0:
                    this.destination = Observer_1$1.empty;
                    break;
                case 1:
                    if (!destinationOrNext) {
                        this.destination = Observer_1$1.empty;
                        break;
                    }
                    if (typeof destinationOrNext === 'object') {
                        if (destinationOrNext instanceof Subscriber) {
                            this.destination = destinationOrNext;
                            this.destination.add(this);
                        }
                        else {
                            this.syncErrorThrowable = true;
                            this.destination = new SafeSubscriber(this, destinationOrNext);
                        }
                        break;
                    }
                default:
                    this.syncErrorThrowable = true;
                    this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                    break;
            }
        }
        Subscriber.prototype[rxSubscriber_1$1.$$rxSubscriber] = function () { return this; };
        Subscriber.create = function (next, error, complete) {
            var subscriber = new Subscriber(next, error, complete);
            subscriber.syncErrorThrowable = false;
            return subscriber;
        };
        Subscriber.prototype.next = function (value) {
            if (!this.isStopped) {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (!this.isStopped) {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.isStopped = true;
            _super.prototype.unsubscribe.call(this);
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            this.destination.error(err);
            this.unsubscribe();
        };
        Subscriber.prototype._complete = function () {
            this.destination.complete();
            this.unsubscribe();
        };
        return Subscriber;
    }(Subscription_1.Subscription));
    var Subscriber_2 = Subscriber;
    var SafeSubscriber = (function (_super) {
        __extends$3(SafeSubscriber, _super);
        function SafeSubscriber(_parent, observerOrNext, error, complete) {
            _super.call(this);
            this._parent = _parent;
            var next;
            var context = this;
            if (isFunction_1.isFunction(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                context = observerOrNext;
                next = observerOrNext.next;
                error = observerOrNext.error;
                complete = observerOrNext.complete;
                if (isFunction_1.isFunction(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
            this._context = context;
            this._next = next;
            this._error = error;
            this._complete = complete;
        }
        SafeSubscriber.prototype.next = function (value) {
            if (!this.isStopped && this._next) {
                var _parent = this._parent;
                if (!_parent.syncErrorThrowable) {
                    this.__tryOrUnsub(this._next, value);
                }
                else if (this.__tryOrSetError(_parent, this._next, value)) {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._error) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._error, err);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parent, this._error, err);
                        this.unsubscribe();
                    }
                }
                else if (!_parent.syncErrorThrowable) {
                    this.unsubscribe();
                    throw err;
                }
                else {
                    _parent.syncErrorValue = err;
                    _parent.syncErrorThrown = true;
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.complete = function () {
            if (!this.isStopped) {
                var _parent = this._parent;
                if (this._complete) {
                    if (!_parent.syncErrorThrowable) {
                        this.__tryOrUnsub(this._complete);
                        this.unsubscribe();
                    }
                    else {
                        this.__tryOrSetError(_parent, this._complete);
                        this.unsubscribe();
                    }
                }
                else {
                    this.unsubscribe();
                }
            }
        };
        SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                this.unsubscribe();
                throw err;
            }
        };
        SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
            try {
                fn.call(this._context, value);
            }
            catch (err) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            return false;
        };
        SafeSubscriber.prototype._unsubscribe = function () {
            var _parent = this._parent;
            this._context = null;
            this._parent = null;
            _parent.unsubscribe();
        };
        return SafeSubscriber;
    }(Subscriber));
    var Subscriber_1$1 = {
        Subscriber: Subscriber_2
    };
    var Subscriber_1 = Subscriber_1$1;
    var rxSubscriber_1 = rxSubscriber;
    var Observer_1 = Observer;
    function toSubscriber(nextOrObserver, error, complete) {
        if (nextOrObserver) {
            if (nextOrObserver instanceof Subscriber_1.Subscriber) {
                return nextOrObserver;
            }
            if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
                return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
            }
        }
        if (!nextOrObserver && !error && !complete) {
            return new Subscriber_1.Subscriber(Observer_1.empty);
        }
        return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
    }
    var toSubscriber_2 = toSubscriber;
    var toSubscriber_1$1 = {
        toSubscriber: toSubscriber_2
    };
    var root_1$3 = root;
    function getSymbolObservable(context) {
        var $$observable;
        var Symbol = context.Symbol;
        if (typeof Symbol === 'function') {
            if (Symbol.observable) {
                $$observable = Symbol.observable;
            }
            else {
                $$observable = Symbol('observable');
                Symbol.observable = $$observable;
            }
        }
        else {
            $$observable = '@@observable';
        }
        return $$observable;
    }
    var getSymbolObservable_1 = getSymbolObservable;
    var $$observable = getSymbolObservable(root_1$3.root);
    var observable = {
        getSymbolObservable: getSymbolObservable_1,
        $$observable: $$observable
    };
    var root_1 = root;
    var toSubscriber_1 = toSubscriber_1$1;
    var observable_1 = observable;
    var Observable = (function () {
        function Observable(subscribe) {
            this._isScalar = false;
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable$$1 = new Observable();
            observable$$1.source = this;
            observable$$1.operator = operator;
            return observable$$1;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var operator = this.operator;
            var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
            if (operator) {
                operator.call(sink, this.source);
            }
            else {
                sink.add(this._subscribe(sink));
            }
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
            return sink;
        };
        Observable.prototype.forEach = function (next, PromiseCtor) {
            var _this = this;
            if (!PromiseCtor) {
                if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
                    PromiseCtor = root_1.root.Rx.config.Promise;
                }
                else if (root_1.root.Promise) {
                    PromiseCtor = root_1.root.Promise;
                }
            }
            if (!PromiseCtor) {
                throw new Error('no Promise impl found');
            }
            return new PromiseCtor(function (resolve, reject) {
                var subscription = _this.subscribe(function (value) {
                    if (subscription) {
                        try {
                            next(value);
                        }
                        catch (err) {
                            reject(err);
                            subscription.unsubscribe();
                        }
                    }
                    else {
                        next(value);
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            return this.source.subscribe(subscriber);
        };
        Observable.prototype[observable_1.$$observable] = function () {
            return this;
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    var Observable_2 = Observable;
    var Observable_1 = {
        Observable: Observable_2
    };
    var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$3 = Observable_1;
    var ScalarObservable = (function (_super) {
        __extends$6(ScalarObservable, _super);
        function ScalarObservable(value, scheduler) {
            _super.call(this);
            this.value = value;
            this.scheduler = scheduler;
            this._isScalar = true;
            if (scheduler) {
                this._isScalar = false;
            }
        }
        ScalarObservable.create = function (value, scheduler) {
            return new ScalarObservable(value, scheduler);
        };
        ScalarObservable.dispatch = function (state) {
            var done = state.done, value = state.value, subscriber = state.subscriber;
            if (done) {
                subscriber.complete();
                return;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                return;
            }
            state.done = true;
            this.schedule(state);
        };
        ScalarObservable.prototype._subscribe = function (subscriber) {
            var value = this.value;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ScalarObservable.dispatch, 0, {
                    done: false, value: value, subscriber: subscriber
                });
            }
            else {
                subscriber.next(value);
                if (!subscriber.closed) {
                    subscriber.complete();
                }
            }
        };
        return ScalarObservable;
    }(Observable_1$3.Observable));
    var ScalarObservable_2 = ScalarObservable;
    var ScalarObservable_1$1 = {
        ScalarObservable: ScalarObservable_2
    };
    var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$4 = Observable_1;
    var EmptyObservable = (function (_super) {
        __extends$7(EmptyObservable, _super);
        function EmptyObservable(scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
        }
        EmptyObservable.create = function (scheduler) {
            return new EmptyObservable(scheduler);
        };
        EmptyObservable.dispatch = function (arg) {
            var subscriber = arg.subscriber;
            subscriber.complete();
        };
        EmptyObservable.prototype._subscribe = function (subscriber) {
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
            }
            else {
                subscriber.complete();
            }
        };
        return EmptyObservable;
    }(Observable_1$4.Observable));
    var EmptyObservable_2 = EmptyObservable;
    var EmptyObservable_1$1 = {
        EmptyObservable: EmptyObservable_2
    };
    function isScheduler(value) {
        return value && typeof value.schedule === 'function';
    }
    var isScheduler_2 = isScheduler;
    var isScheduler_1$2 = {
        isScheduler: isScheduler_2
    };
    var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$2 = Observable_1;
    var ScalarObservable_1 = ScalarObservable_1$1;
    var EmptyObservable_1 = EmptyObservable_1$1;
    var isScheduler_1$1 = isScheduler_1$2;
    var ArrayObservable = (function (_super) {
        __extends$5(ArrayObservable, _super);
        function ArrayObservable(array, scheduler) {
            _super.call(this);
            this.array = array;
            this.scheduler = scheduler;
            if (!scheduler && array.length === 1) {
                this._isScalar = true;
                this.value = array[0];
            }
        }
        ArrayObservable.create = function (array, scheduler) {
            return new ArrayObservable(array, scheduler);
        };
        ArrayObservable.of = function () {
            var array = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                array[_i - 0] = arguments[_i];
            }
            var scheduler = array[array.length - 1];
            if (isScheduler_1$1.isScheduler(scheduler)) {
                array.pop();
            }
            else {
                scheduler = null;
            }
            var len = array.length;
            if (len > 1) {
                return new ArrayObservable(array, scheduler);
            }
            else if (len === 1) {
                return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
            }
            else {
                return new EmptyObservable_1.EmptyObservable(scheduler);
            }
        };
        ArrayObservable.dispatch = function (state) {
            var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
            if (index >= count) {
                subscriber.complete();
                return;
            }
            subscriber.next(array[index]);
            if (subscriber.closed) {
                return;
            }
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var array = this.array;
            var count = array.length;
            var scheduler = this.scheduler;
            if (scheduler) {
                return scheduler.schedule(ArrayObservable.dispatch, 0, {
                    array: array, index: index, count: count, subscriber: subscriber
                });
            }
            else {
                for (var i = 0; i < count && !subscriber.closed; i++) {
                    subscriber.next(array[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayObservable;
    }(Observable_1$2.Observable));
    var ArrayObservable_2 = ArrayObservable;
    var ArrayObservable_1$1 = {
        ArrayObservable: ArrayObservable_2
    };
    var __extends$9 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$3 = Subscriber_1$1;
    var OuterSubscriber = (function (_super) {
        __extends$9(OuterSubscriber, _super);
        function OuterSubscriber() {
            _super.apply(this, arguments);
        }
        OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.destination.next(innerValue);
        };
        OuterSubscriber.prototype.notifyError = function (error, innerSub) {
            this.destination.error(error);
        };
        OuterSubscriber.prototype.notifyComplete = function (innerSub) {
            this.destination.complete();
        };
        return OuterSubscriber;
    }(Subscriber_1$3.Subscriber));
    var OuterSubscriber_2 = OuterSubscriber;
    var OuterSubscriber_1$1 = {
        OuterSubscriber: OuterSubscriber_2
    };
    function isPromise$1(value) {
        return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
    }
    var isPromise_2 = isPromise$1;
    var isPromise_1$1 = {
        isPromise: isPromise_2
    };
    var root_1$5 = root;
    function symbolIteratorPonyfill(root$$1) {
        var Symbol = root$$1.Symbol;
        if (typeof Symbol === 'function') {
            if (!Symbol.iterator) {
                Symbol.iterator = Symbol('iterator polyfill');
            }
            return Symbol.iterator;
        }
        else {
            var Set_1 = root$$1.Set;
            if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {
                return '@@iterator';
            }
            var Map_1 = root$$1.Map;
            if (Map_1) {
                var keys = Object.getOwnPropertyNames(Map_1.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {
                        return key;
                    }
                }
            }
            return '@@iterator';
        }
    }
    var symbolIteratorPonyfill_1 = symbolIteratorPonyfill;
    var $$iterator = symbolIteratorPonyfill(root_1$5.root);
    var iterator = {
        symbolIteratorPonyfill: symbolIteratorPonyfill_1,
        $$iterator: $$iterator
    };
    var __extends$10 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$4 = Subscriber_1$1;
    var InnerSubscriber = (function (_super) {
        __extends$10(InnerSubscriber, _super);
        function InnerSubscriber(parent, outerValue, outerIndex) {
            _super.call(this);
            this.parent = parent;
            this.outerValue = outerValue;
            this.outerIndex = outerIndex;
            this.index = 0;
        }
        InnerSubscriber.prototype._next = function (value) {
            this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
        };
        InnerSubscriber.prototype._error = function (error) {
            this.parent.notifyError(error, this);
            this.unsubscribe();
        };
        InnerSubscriber.prototype._complete = function () {
            this.parent.notifyComplete(this);
            this.unsubscribe();
        };
        return InnerSubscriber;
    }(Subscriber_1$4.Subscriber));
    var InnerSubscriber_2 = InnerSubscriber;
    var InnerSubscriber_1$1 = {
        InnerSubscriber: InnerSubscriber_2
    };
    var root_1$4 = root;
    var isArray_1$2 = isArray;
    var isPromise_1 = isPromise_1$1;
    var isObject_1$3 = isObject_1$1;
    var Observable_1$5 = Observable_1;
    var iterator_1 = iterator;
    var InnerSubscriber_1 = InnerSubscriber_1$1;
    var observable_1$1 = observable;
    function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
        var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
        if (destination.closed) {
            return null;
        }
        if (result instanceof Observable_1$5.Observable) {
            if (result._isScalar) {
                destination.next(result.value);
                destination.complete();
                return null;
            }
            else {
                return result.subscribe(destination);
            }
        }
        else if (isArray_1$2.isArray(result)) {
            for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
                destination.next(result[i]);
            }
            if (!destination.closed) {
                destination.complete();
            }
        }
        else if (isPromise_1.isPromise(result)) {
            result.then(function (value) {
                if (!destination.closed) {
                    destination.next(value);
                    destination.complete();
                }
            }, function (err) { return destination.error(err); })
                .then(null, function (err) {
                root_1$4.root.setTimeout(function () { throw err; });
            });
            return destination;
        }
        else if (result && typeof result[iterator_1.$$iterator] === 'function') {
            var iterator$$1 = result[iterator_1.$$iterator]();
            do {
                var item = iterator$$1.next();
                if (item.done) {
                    destination.complete();
                    break;
                }
                destination.next(item.value);
                if (destination.closed) {
                    break;
                }
            } while (true);
        }
        else if (result && typeof result[observable_1$1.$$observable] === 'function') {
            var obs = result[observable_1$1.$$observable]();
            if (typeof obs.subscribe !== 'function') {
                destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));
            }
            else {
                return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
            }
        }
        else {
            var value = isObject_1$3.isObject(result) ? 'an invalid object' : "'" + result + "'";
            var msg = ("You provided " + value + " where a stream was expected.")
                + ' You can provide an Observable, Promise, Array, or Iterable.';
            destination.error(new TypeError(msg));
        }
        return null;
    }
    var subscribeToResult_2 = subscribeToResult;
    var subscribeToResult_1$1 = {
        subscribeToResult: subscribeToResult_2
    };
    var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1 = OuterSubscriber_1$1;
    var subscribeToResult_1 = subscribeToResult_1$1;
    function mergeAll(concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        return this.lift(new MergeAllOperator(concurrent));
    }
    var mergeAll_2 = mergeAll;
    var MergeAllOperator = (function () {
        function MergeAllOperator(concurrent) {
            this.concurrent = concurrent;
        }
        MergeAllOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));
        };
        return MergeAllOperator;
    }());
    var MergeAllOperator_1 = MergeAllOperator;
    var MergeAllSubscriber = (function (_super) {
        __extends$8(MergeAllSubscriber, _super);
        function MergeAllSubscriber(destination, concurrent) {
            _super.call(this, destination);
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
        }
        MergeAllSubscriber.prototype._next = function (observable) {
            if (this.active < this.concurrent) {
                this.active++;
                this.add(subscribeToResult_1.subscribeToResult(this, observable));
            }
            else {
                this.buffer.push(observable);
            }
        };
        MergeAllSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeAllSubscriber;
    }(OuterSubscriber_1.OuterSubscriber));
    var MergeAllSubscriber_1 = MergeAllSubscriber;
    var mergeAll_1$1 = {
        mergeAll: mergeAll_2,
        MergeAllOperator: MergeAllOperator_1,
        MergeAllSubscriber: MergeAllSubscriber_1
    };
    var ArrayObservable_1 = ArrayObservable_1$1;
    var mergeAll_1 = mergeAll_1$1;
    var isScheduler_1 = isScheduler_1$2;
    function merge$3() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        return this.lift.call(mergeStatic.apply(void 0, [this].concat(observables)));
    }
    var merge_2$1 = merge$3;
    function mergeStatic() {
        var observables = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            observables[_i - 0] = arguments[_i];
        }
        var concurrent = Number.POSITIVE_INFINITY;
        var scheduler = null;
        var last = observables[observables.length - 1];
        if (isScheduler_1.isScheduler(last)) {
            scheduler = observables.pop();
            if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
                concurrent = observables.pop();
            }
        }
        else if (typeof last === 'number') {
            concurrent = observables.pop();
        }
        if (scheduler === null && observables.length === 1) {
            return observables[0];
        }
        return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new mergeAll_1.MergeAllOperator(concurrent));
    }
    var mergeStatic_1 = mergeStatic;
    var merge_1$1 = {
        merge: merge_2$1,
        mergeStatic: mergeStatic_1
    };
    var merge_1 = merge_1$1;
    var merge_2 = merge_1.mergeStatic;
    var __extends$13 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var ObjectUnsubscribedError = (function (_super) {
        __extends$13(ObjectUnsubscribedError, _super);
        function ObjectUnsubscribedError() {
            var err = _super.call(this, 'object unsubscribed');
            this.name = err.name = 'ObjectUnsubscribedError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return ObjectUnsubscribedError;
    }(Error));
    var ObjectUnsubscribedError_2 = ObjectUnsubscribedError;
    var ObjectUnsubscribedError_1$1 = {
        ObjectUnsubscribedError: ObjectUnsubscribedError_2
    };
    var __extends$14 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscription_1$5 = Subscription_1$1;
    var SubjectSubscription = (function (_super) {
        __extends$14(SubjectSubscription, _super);
        function SubjectSubscription(subject, subscriber) {
            _super.call(this);
            this.subject = subject;
            this.subscriber = subscriber;
            this.closed = false;
        }
        SubjectSubscription.prototype.unsubscribe = function () {
            if (this.closed) {
                return;
            }
            this.closed = true;
            var subject = this.subject;
            var observers = subject.observers;
            this.subject = null;
            if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
                return;
            }
            var subscriberIndex = observers.indexOf(this.subscriber);
            if (subscriberIndex !== -1) {
                observers.splice(subscriberIndex, 1);
            }
        };
        return SubjectSubscription;
    }(Subscription_1$5.Subscription));
    var SubjectSubscription_2 = SubjectSubscription;
    var SubjectSubscription_1$1 = {
        SubjectSubscription: SubjectSubscription_2
    };
    var __extends$12 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$7 = Observable_1;
    var Subscriber_1$6 = Subscriber_1$1;
    var Subscription_1$4 = Subscription_1$1;
    var ObjectUnsubscribedError_1 = ObjectUnsubscribedError_1$1;
    var SubjectSubscription_1 = SubjectSubscription_1$1;
    var rxSubscriber_1$2 = rxSubscriber;
    var SubjectSubscriber = (function (_super) {
        __extends$12(SubjectSubscriber, _super);
        function SubjectSubscriber(destination) {
            _super.call(this, destination);
            this.destination = destination;
        }
        return SubjectSubscriber;
    }(Subscriber_1$6.Subscriber));
    var SubjectSubscriber_1 = SubjectSubscriber;
    var Subject = (function (_super) {
        __extends$12(Subject, _super);
        function Subject() {
            _super.call(this);
            this.observers = [];
            this.closed = false;
            this.isStopped = false;
            this.hasError = false;
            this.thrownError = null;
        }
        Subject.prototype[rxSubscriber_1$2.$$rxSubscriber] = function () {
            return new SubjectSubscriber(this);
        };
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype.next = function (value) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            if (!this.isStopped) {
                var observers = this.observers;
                var len = observers.length;
                var copy = observers.slice();
                for (var i = 0; i < len; i++) {
                    copy[i].next(value);
                }
            }
        };
        Subject.prototype.error = function (err) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.hasError = true;
            this.thrownError = err;
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].error(err);
            }
            this.observers.length = 0;
        };
        Subject.prototype.complete = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            this.isStopped = true;
            var observers = this.observers;
            var len = observers.length;
            var copy = observers.slice();
            for (var i = 0; i < len; i++) {
                copy[i].complete();
            }
            this.observers.length = 0;
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = true;
            this.closed = true;
            this.observers = null;
        };
        Subject.prototype._subscribe = function (subscriber) {
            if (this.closed) {
                throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
            }
            else if (this.hasError) {
                subscriber.error(this.thrownError);
                return Subscription_1$4.Subscription.EMPTY;
            }
            else if (this.isStopped) {
                subscriber.complete();
                return Subscription_1$4.Subscription.EMPTY;
            }
            else {
                this.observers.push(subscriber);
                return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable_1$7.Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable_1$7.Observable));
    var Subject_2 = Subject;
    var AnonymousSubject = (function (_super) {
        __extends$12(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            _super.call(this);
            this.destination = destination;
            this.source = source;
        }
        AnonymousSubject.prototype.next = function (value) {
            var destination = this.destination;
            if (destination && destination.next) {
                destination.next(value);
            }
        };
        AnonymousSubject.prototype.error = function (err) {
            var destination = this.destination;
            if (destination && destination.error) {
                this.destination.error(err);
            }
        };
        AnonymousSubject.prototype.complete = function () {
            var destination = this.destination;
            if (destination && destination.complete) {
                this.destination.complete();
            }
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var source = this.source;
            if (source) {
                return this.source.subscribe(subscriber);
            }
            else {
                return Subscription_1$4.Subscription.EMPTY;
            }
        };
        return AnonymousSubject;
    }(Subject));
    var AnonymousSubject_1 = AnonymousSubject;
    var Subject_1$2 = {
        SubjectSubscriber: SubjectSubscriber_1,
        Subject: Subject_2,
        AnonymousSubject: AnonymousSubject_1
    };
    var __extends$11 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1$1 = Subject_1$2;
    var Observable_1$6 = Observable_1;
    var Subscriber_1$5 = Subscriber_1$1;
    var Subscription_1$3 = Subscription_1$1;
    var ConnectableObservable = (function (_super) {
        __extends$11(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            _super.call(this);
            this.source = source;
            this.subjectFactory = subjectFactory;
            this._refCount = 0;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype.connect = function () {
            var connection = this._connection;
            if (!connection) {
                connection = this._connection = new Subscription_1$3.Subscription();
                connection.add(this.source
                    .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription_1$3.Subscription.EMPTY;
                }
                else {
                    this._connection = connection;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return this.lift(new RefCountOperator(this));
        };
        return ConnectableObservable;
    }(Observable_1$6.Observable));
    var ConnectableObservable_2 = ConnectableObservable;
    var connectableObservableDescriptor = {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subscribe: { value: ConnectableObservable.prototype._subscribe },
        getSubject: { value: ConnectableObservable.prototype.getSubject },
        connect: { value: ConnectableObservable.prototype.connect },
        refCount: { value: ConnectableObservable.prototype.refCount }
    };
    var ConnectableSubscriber = (function (_super) {
        __extends$11(ConnectableSubscriber, _super);
        function ConnectableSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        ConnectableSubscriber.prototype._error = function (err) {
            this._unsubscribe();
            _super.prototype._error.call(this, err);
        };
        ConnectableSubscriber.prototype._complete = function () {
            this._unsubscribe();
            _super.prototype._complete.call(this);
        };
        ConnectableSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (connectable) {
                this.connectable = null;
                var connection = connectable._connection;
                connectable._refCount = 0;
                connectable._subject = null;
                connectable._connection = null;
                if (connection) {
                    connection.unsubscribe();
                }
            }
        };
        return ConnectableSubscriber;
    }(Subject_1$1.SubjectSubscriber));
    var RefCountOperator = (function () {
        function RefCountOperator(connectable) {
            this.connectable = connectable;
        }
        RefCountOperator.prototype.call = function (subscriber, source) {
            var connectable = this.connectable;
            connectable._refCount++;
            var refCounter = new RefCountSubscriber(subscriber, connectable);
            var subscription = source.subscribe(refCounter);
            if (!refCounter.closed) {
                refCounter.connection = connectable.connect();
            }
            return subscription;
        };
        return RefCountOperator;
    }());
    var RefCountSubscriber = (function (_super) {
        __extends$11(RefCountSubscriber, _super);
        function RefCountSubscriber(destination, connectable) {
            _super.call(this, destination);
            this.connectable = connectable;
        }
        RefCountSubscriber.prototype._unsubscribe = function () {
            var connectable = this.connectable;
            if (!connectable) {
                this.connection = null;
                return;
            }
            this.connectable = null;
            var refCount = connectable._refCount;
            if (refCount <= 0) {
                this.connection = null;
                return;
            }
            connectable._refCount = refCount - 1;
            if (refCount > 1) {
                this.connection = null;
                return;
            }
            var connection = this.connection;
            var sharedConnection = connectable._connection;
            this.connection = null;
            if (sharedConnection && (!connection || sharedConnection === connection)) {
                sharedConnection.unsubscribe();
            }
        };
        return RefCountSubscriber;
    }(Subscriber_1$5.Subscriber));
    var ConnectableObservable_1$1 = {
        ConnectableObservable: ConnectableObservable_2,
        connectableObservableDescriptor: connectableObservableDescriptor
    };
    var ConnectableObservable_1 = ConnectableObservable_1$1;
    function multicast(subjectOrSubjectFactory, selector) {
        var subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return this.lift(new MulticastOperator(subjectFactory, selector));
        }
        var connectable = Object.create(this, ConnectableObservable_1.connectableObservableDescriptor);
        connectable.source = this;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    }
    var multicast_2 = multicast;
    var MulticastOperator = (function () {
        function MulticastOperator(subjectFactory, selector) {
            this.subjectFactory = subjectFactory;
            this.selector = selector;
        }
        MulticastOperator.prototype.call = function (subscriber, source) {
            var selector = this.selector;
            var subject = this.subjectFactory();
            var subscription = selector(subject).subscribe(subscriber);
            subscription.add(source.subscribe(subject));
            return subscription;
        };
        return MulticastOperator;
    }());
    var MulticastOperator_1 = MulticastOperator;
    var multicast_1$1 = {
        multicast: multicast_2,
        MulticastOperator: MulticastOperator_1
    };
    var multicast_1 = multicast_1$1;
    var Subject_1 = Subject_1$2;
    function shareSubjectFactory() {
        return new Subject_1.Subject();
    }
    function share() {
        return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
    }
    var share_2 = share;
    var __extends$2 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OpaqueToken = (function () {
        function OpaqueToken(_desc) {
            this._desc = _desc;
        }
        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
        return OpaqueToken;
    }());
    var InjectionToken = (function (_super) {
        __extends$2(InjectionToken, _super);
        function InjectionToken(desc) {
            return _super.call(this, desc) || this;
        }
        InjectionToken.prototype.toString = function () { return "InjectionToken " + this._desc; };
        return InjectionToken;
    }(OpaqueToken));
    var __window = typeof window !== 'undefined' && window;
    var __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
        self instanceof WorkerGlobalScope && self;
    var __global = typeof global !== 'undefined' && global;
    var _global = __window || __global || __self;
    var _symbolIterator = null;
    function getSymbolIterator() {
        if (!_symbolIterator) {
            var Symbol = _global['Symbol'];
            if (Symbol && Symbol.iterator) {
                _symbolIterator = Symbol.iterator;
            }
            else {
                var keys = Object.getOwnPropertyNames(Map.prototype);
                for (var i = 0; i < keys.length; ++i) {
                    var key = keys[i];
                    if (key !== 'entries' && key !== 'size' &&
                        ((Map)).prototype[key] === Map.prototype['entries']) {
                        _symbolIterator = key;
                    }
                }
            }
        }
        return _symbolIterator;
    }
    function scheduleMicroTask(fn) {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
    function looseIdentical(a, b) {
        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
    }
    function stringify(token) {
        if (typeof token === 'string') {
            return token;
        }
        if (token == null) {
            return '' + token;
        }
        if (token.overriddenName) {
            return "" + token.overriddenName;
        }
        if (token.name) {
            return "" + token.name;
        }
        var res = token.toString();
        if (res == null) {
            return '' + res;
        }
        var newLineIndex = res.indexOf('\n');
        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
    }
    var _nextClassId = 0;
    var Reflect$1 = _global['Reflect'];
    function extractAnnotation(annotation) {
        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
            annotation = annotation.annotation;
        }
        return annotation;
    }
    function applyParams(fnOrArray, key) {
        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
            fnOrArray === Number || fnOrArray === Array) {
            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
        }
        if (typeof fnOrArray === 'function') {
            return fnOrArray;
        }
        if (Array.isArray(fnOrArray)) {
            var annotations = (fnOrArray);
            var annoLength = annotations.length - 1;
            var fn = fnOrArray[annoLength];
            if (typeof fn !== 'function') {
                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
            }
            if (annoLength != fn.length) {
                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
            }
            var paramsAnnotations = [];
            for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
                var paramAnnotations = [];
                paramsAnnotations.push(paramAnnotations);
                var annotation = annotations[i];
                if (Array.isArray(annotation)) {
                    for (var j = 0; j < annotation.length; j++) {
                        paramAnnotations.push(extractAnnotation(annotation[j]));
                    }
                }
                else if (typeof annotation === 'function') {
                    paramAnnotations.push(extractAnnotation(annotation));
                }
                else {
                    paramAnnotations.push(annotation);
                }
            }
            Reflect$1.defineMetadata('parameters', paramsAnnotations, fn);
            return fn;
        }
        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
    }
    function Class(clsDef) {
        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
        var proto = constructor.prototype;
        if (clsDef.hasOwnProperty('extends')) {
            if (typeof clsDef.extends === 'function') {
                ((constructor)).prototype = proto =
                    Object.create(((clsDef.extends)).prototype);
            }
            else {
                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
            }
        }
        for (var key in clsDef) {
            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
                proto[key] = applyParams(clsDef[key], key);
            }
        }
        if (this && this.annotations instanceof Array) {
            Reflect$1.defineMetadata('annotations', this.annotations, constructor);
        }
        var constructorName = constructor['name'];
        if (!constructorName || constructorName === 'constructor') {
            ((constructor))['overriddenName'] = "class" + _nextClassId++;
        }
        return (constructor);
    }
    function makeDecorator(name, props, parentClass, chainFn) {
        var metaCtor = makeMetadataCtor([props]);
        function DecoratorFactory(objOrType) {
            if (!(Reflect$1 && Reflect$1.getOwnMetadata)) {
                throw 'reflect-metadata shim is required when using class decorators';
            }
            if (this instanceof DecoratorFactory) {
                metaCtor.call(this, objOrType);
                return this;
            }
            var annotationInstance = new ((DecoratorFactory))(objOrType);
            var chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
            chainAnnotation.push(annotationInstance);
            var TypeDecorator = (function TypeDecorator(cls) {
                var annotations = Reflect$1.getOwnMetadata('annotations', cls) || [];
                annotations.push(annotationInstance);
                Reflect$1.defineMetadata('annotations', annotations, cls);
                return cls;
            });
            TypeDecorator.annotations = chainAnnotation;
            TypeDecorator.Class = Class;
            if (chainFn)
                chainFn(TypeDecorator);
            return TypeDecorator;
        }
        if (parentClass) {
            DecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        DecoratorFactory.prototype.toString = function () { return "@" + name; };
        ((DecoratorFactory)).annotationCls = DecoratorFactory;
        return DecoratorFactory;
    }
    function makeMetadataCtor(props) {
        return function ctor() {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            props.forEach(function (prop, i) {
                var argVal = args[i];
                if (Array.isArray(prop)) {
                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
                }
                else {
                    for (var propName in prop) {
                        _this[propName] =
                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
                    }
                }
            });
        };
    }
    function makeParamDecorator(name, props, parentClass) {
        var metaCtor = makeMetadataCtor(props);
        function ParamDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this instanceof ParamDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            var annotationInstance = new (((ParamDecoratorFactory)).bind.apply(((ParamDecoratorFactory)), [void 0].concat(args)))();
            ((ParamDecorator)).annotation = annotationInstance;
            return ParamDecorator;
            function ParamDecorator(cls, unusedKey, index) {
                var parameters = Reflect$1.getOwnMetadata('parameters', cls) || [];
                while (parameters.length <= index) {
                    parameters.push(null);
                }
                parameters[index] = parameters[index] || [];
                ((parameters[index])).push(annotationInstance);
                Reflect$1.defineMetadata('parameters', parameters, cls);
                return cls;
            }
        }
        if (parentClass) {
            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        ParamDecoratorFactory.prototype.toString = function () { return "@" + name; };
        ((ParamDecoratorFactory)).annotationCls = ParamDecoratorFactory;
        return ParamDecoratorFactory;
    }
    function makePropDecorator(name, props, parentClass) {
        var metaCtor = makeMetadataCtor(props);
        function PropDecoratorFactory() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            if (this instanceof PropDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            var decoratorInstance = new (((PropDecoratorFactory)).bind.apply(((PropDecoratorFactory)), [void 0].concat(args)))();
            return function PropDecorator(target, name) {
                var meta = Reflect$1.getOwnMetadata('propMetadata', target.constructor) || {};
                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
                meta[name].unshift(decoratorInstance);
                Reflect$1.defineMetadata('propMetadata', meta, target.constructor);
            };
        }
        if (parentClass) {
            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        PropDecoratorFactory.prototype.toString = function () { return "@" + name; };
        ((PropDecoratorFactory)).annotationCls = PropDecoratorFactory;
        return PropDecoratorFactory;
    }
    var ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
    var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
    var Query = (function () {
        function Query() {
        }
        return Query;
    }());
    var ContentChildren = makePropDecorator('ContentChildren', [
        ['selector', undefined], {
            first: false,
            isViewQuery: false,
            descendants: false,
            read: undefined,
        }
    ], Query);
    var ContentChild = makePropDecorator('ContentChild', [
        ['selector', undefined], {
            first: true,
            isViewQuery: false,
            descendants: true,
            read: undefined,
        }
    ], Query);
    var ViewChildren = makePropDecorator('ViewChildren', [
        ['selector', undefined], {
            first: false,
            isViewQuery: true,
            descendants: true,
            read: undefined,
        }
    ], Query);
    var ViewChild = makePropDecorator('ViewChild', [
        ['selector', undefined], {
            first: true,
            isViewQuery: true,
            descendants: true,
            read: undefined,
        }
    ], Query);
    var ChangeDetectionStrategy = {};
    ChangeDetectionStrategy.OnPush = 0;
    ChangeDetectionStrategy.Default = 1;
    ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = "OnPush";
    ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = "Default";
    var Directive = makeDecorator('Directive', {
        selector: undefined,
        inputs: undefined,
        outputs: undefined,
        host: undefined,
        providers: undefined,
        exportAs: undefined,
        queries: undefined
    });
    var Component = makeDecorator('Component', {
        selector: undefined,
        inputs: undefined,
        outputs: undefined,
        host: undefined,
        exportAs: undefined,
        moduleId: undefined,
        providers: undefined,
        viewProviders: undefined,
        changeDetection: ChangeDetectionStrategy.Default,
        queries: undefined,
        templateUrl: undefined,
        template: undefined,
        styleUrls: undefined,
        styles: undefined,
        animations: undefined,
        encapsulation: undefined,
        interpolation: undefined,
        entryComponents: undefined
    }, Directive);
    var Pipe = makeDecorator('Pipe', {
        name: undefined,
        pure: true,
    });
    var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
    var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
    var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
    var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);
    var NgModule = makeDecorator('NgModule', {
        providers: undefined,
        declarations: undefined,
        imports: undefined,
        exports: undefined,
        entryComponents: undefined,
        bootstrap: undefined,
        schemas: undefined,
        id: undefined,
    });
    var ViewEncapsulation = {};
    ViewEncapsulation.Emulated = 0;
    ViewEncapsulation.Native = 1;
    ViewEncapsulation.None = 2;
    ViewEncapsulation[ViewEncapsulation.Emulated] = "Emulated";
    ViewEncapsulation[ViewEncapsulation.Native] = "Native";
    ViewEncapsulation[ViewEncapsulation.None] = "None";
    var Version = (function () {
        function Version(full) {
            this.full = full;
        }
        Object.defineProperty(Version.prototype, "major", {
            get: function () { return this.full.split('.')[0]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Version.prototype, "minor", {
            get: function () { return this.full.split('.')[1]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Version.prototype, "patch", {
            get: function () { return this.full.split('.').slice(2).join('.'); },
            enumerable: true,
            configurable: true
        });
        return Version;
    }());
    var VERSION$2 = new Version('4.0.1');
    var Inject = makeParamDecorator('Inject', [['token', undefined]]);
    var Optional = makeParamDecorator('Optional', []);
    var Injectable = makeDecorator('Injectable', []);
    var Self = makeParamDecorator('Self', []);
    var SkipSelf = makeParamDecorator('SkipSelf', []);
    var Host = makeParamDecorator('Host', []);
    function forwardRef(forwardRefFn) {
        ((forwardRefFn)).__forward_ref__ = forwardRef;
        ((forwardRefFn)).toString = function () { return stringify(this()); };
        return (((forwardRefFn)));
    }
    function resolveForwardRef(type) {
        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
            type.__forward_ref__ === forwardRef) {
            return ((type))();
        }
        else {
            return type;
        }
    }
    var _THROW_IF_NOT_FOUND = new Object();
    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    var _NullInjector = (function () {
        function _NullInjector() {
        }
        _NullInjector.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = _THROW_IF_NOT_FOUND;
            }
            if (notFoundValue === _THROW_IF_NOT_FOUND) {
                throw new Error("No provider for " + stringify(token) + "!");
            }
            return notFoundValue;
        };
        return _NullInjector;
    }());
    var Injector = (function () {
        function Injector() {
        }
        Injector.prototype.get = function (token, notFoundValue) { };
        Injector.prototype.get = function (token, notFoundValue) { };
        return Injector;
    }());
    Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
    Injector.NULL = new _NullInjector();
    var ERROR_DEBUG_CONTEXT = 'ngDebugContext';
    var ERROR_ORIGINAL_ERROR = 'ngOriginalError';
    var ERROR_LOGGER = 'ngErrorLogger';
    function getDebugContext(error) {
        return ((error))[ERROR_DEBUG_CONTEXT];
    }
    function getOriginalError(error) {
        return ((error))[ERROR_ORIGINAL_ERROR];
    }
    function getErrorLogger(error) {
        return ((error))[ERROR_LOGGER] || defaultErrorLogger;
    }
    function defaultErrorLogger(console) {
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        console.error.apply(console, values);
    }
    var ErrorHandler = (function () {
        function ErrorHandler(deprecatedParameter) {
            this._console = console;
        }
        ErrorHandler.prototype.handleError = function (error) {
            var originalError = this._findOriginalError(error);
            var context = this._findContext(error);
            var errorLogger = getErrorLogger(error);
            errorLogger(this._console, "ERROR", error);
            if (originalError) {
                errorLogger(this._console, "ORIGINAL ERROR", originalError);
            }
            if (context) {
                errorLogger(this._console, 'ERROR CONTEXT', context);
            }
        };
        ErrorHandler.prototype._findContext = function (error) {
            if (error) {
                return getDebugContext(error) ? getDebugContext(error) :
                    this._findContext(getOriginalError(error));
            }
            return null;
        };
        ErrorHandler.prototype._findOriginalError = function (error) {
            var e = getOriginalError(error);
            while (e && getOriginalError(e)) {
                e = getOriginalError(e);
            }
            return e;
        };
        return ErrorHandler;
    }());
    function wrappedError(message, originalError) {
        var msg = message + " caused by: " + (originalError instanceof Error ? originalError.message : originalError);
        var error = Error(msg);
        ((error))[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
    }
    function findFirstClosedCycle(keys) {
        var res = [];
        for (var i = 0; i < keys.length; ++i) {
            if (res.indexOf(keys[i]) > -1) {
                res.push(keys[i]);
                return res;
            }
            res.push(keys[i]);
        }
        return res;
    }
    function constructResolvingPath(keys) {
        if (keys.length > 1) {
            var reversed = findFirstClosedCycle(keys.slice().reverse());
            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });
            return ' (' + tokenStrs.join(' -> ') + ')';
        }
        return '';
    }
    function injectionError(injector, key, constructResolvingMessage, originalError) {
        var error = ((originalError ? wrappedError('', originalError) : Error()));
        error.addKey = addKey;
        error.keys = [key];
        error.injectors = [injector];
        error.constructResolvingMessage = constructResolvingMessage;
        error.message = error.constructResolvingMessage();
        ((error))[ERROR_ORIGINAL_ERROR] = originalError;
        return error;
    }
    function addKey(injector, key) {
        this.injectors.push(injector);
        this.keys.push(key);
        this.message = this.constructResolvingMessage();
    }
    function noProviderError(injector, key) {
        return injectionError(injector, key, function () {
            var first = stringify(this.keys[0].token);
            return "No provider for " + first + "!" + constructResolvingPath(this.keys);
        });
    }
    function cyclicDependencyError(injector, key) {
        return injectionError(injector, key, function () {
            return "Cannot instantiate cyclic dependency!" + constructResolvingPath(this.keys);
        });
    }
    function instantiationError(injector, originalException, originalStack, key) {
        return injectionError(injector, key, function () {
            var first = stringify(this.keys[0].token);
            return getOriginalError(this).message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
        }, originalException);
    }
    function invalidProviderError(provider) {
        return Error("Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
    }
    function noAnnotationError(typeOrFunc, params) {
        var signature = [];
        for (var i = 0, ii = params.length; i < ii; i++) {
            var parameter = params[i];
            if (!parameter || parameter.length == 0) {
                signature.push('?');
            }
            else {
                signature.push(parameter.map(stringify).join(' '));
            }
        }
        return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
            signature.join(', ') + '). ' +
            'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
            stringify(typeOrFunc) + '\' is decorated with Injectable.');
    }
    function outOfBoundsError(index) {
        return Error("Index " + index + " is out-of-bounds.");
    }
    function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
        return Error("Cannot mix multi providers and regular providers, got: " + provider1 + " " + provider2);
    }
    var ReflectiveKey = (function () {
        function ReflectiveKey(token, id) {
            this.token = token;
            this.id = id;
            if (!token) {
                throw new Error('Token must be defined!');
            }
        }
        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
            get: function () { return stringify(this.token); },
            enumerable: true,
            configurable: true
        });
        ReflectiveKey.get = function (token) {
            return _globalKeyRegistry.get(resolveForwardRef(token));
        };
        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
            get: function () { return _globalKeyRegistry.numberOfKeys; },
            enumerable: true,
            configurable: true
        });
        return ReflectiveKey;
    }());
    var KeyRegistry = (function () {
        function KeyRegistry() {
            this._allKeys = new Map();
        }
        KeyRegistry.prototype.get = function (token) {
            if (token instanceof ReflectiveKey)
                return token;
            if (this._allKeys.has(token)) {
                return ((this._allKeys.get(token)));
            }
            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
            this._allKeys.set(token, newKey);
            return newKey;
        };
        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
            get: function () { return this._allKeys.size; },
            enumerable: true,
            configurable: true
        });
        return KeyRegistry;
    }());
    var _globalKeyRegistry = new KeyRegistry();
    var Type = Function;
    function isType(v) {
        return typeof v === 'function';
    }
    var DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
    var ReflectionCapabilities = (function () {
        function ReflectionCapabilities(reflect) {
            this._reflect = reflect || _global['Reflect'];
        }
        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
        ReflectionCapabilities.prototype.factory = function (t) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return new (t.bind.apply(t, [void 0].concat(args)))();
            };
        };
        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
            var result;
            if (typeof paramTypes === 'undefined') {
                result = new Array(paramAnnotations.length);
            }
            else {
                result = new Array(paramTypes.length);
            }
            for (var i = 0; i < result.length; i++) {
                if (typeof paramTypes === 'undefined') {
                    result[i] = [];
                }
                else if (paramTypes[i] != Object) {
                    result[i] = [paramTypes[i]];
                }
                else {
                    result[i] = [];
                }
                if (paramAnnotations && paramAnnotations[i] != null) {
                    result[i] = result[i].concat(paramAnnotations[i]);
                }
            }
            return result;
        };
        ReflectionCapabilities.prototype._ownParameters = function (type, parentCtor) {
            if (DELEGATE_CTOR.exec(type.toString())) {
                return null;
            }
            if (((type)).parameters && ((type)).parameters !== parentCtor.parameters) {
                return ((type)).parameters;
            }
            var tsickleCtorParams = ((type)).ctorParameters;
            if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
                var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
                var paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
                var paramAnnotations = ctorParameters.map(function (ctorParam) { return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators); });
                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
            }
            if (this._reflect != null && this._reflect.getOwnMetadata != null) {
                var paramAnnotations = this._reflect.getOwnMetadata('parameters', type);
                var paramTypes = this._reflect.getOwnMetadata('design:paramtypes', type);
                if (paramTypes || paramAnnotations) {
                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
                }
            }
            return new Array(((type.length))).fill(undefined);
        };
        ReflectionCapabilities.prototype.parameters = function (type) {
            if (!isType(type)) {
                return [];
            }
            var parentCtor = getParentCtor(type);
            var parameters = this._ownParameters(type, parentCtor);
            if (!parameters && parentCtor !== Object) {
                parameters = this.parameters(parentCtor);
            }
            return parameters || [];
        };
        ReflectionCapabilities.prototype._ownAnnotations = function (typeOrFunc, parentCtor) {
            if (((typeOrFunc)).annotations && ((typeOrFunc)).annotations !== parentCtor.annotations) {
                var annotations = ((typeOrFunc)).annotations;
                if (typeof annotations === 'function' && annotations.annotations) {
                    annotations = annotations.annotations;
                }
                return annotations;
            }
            if (((typeOrFunc)).decorators && ((typeOrFunc)).decorators !== parentCtor.decorators) {
                return convertTsickleDecoratorIntoMetadata(((typeOrFunc)).decorators);
            }
            if (this._reflect && this._reflect.getOwnMetadata) {
                return this._reflect.getOwnMetadata('annotations', typeOrFunc);
            }
            return null;
        };
        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
            if (!isType(typeOrFunc)) {
                return [];
            }
            var parentCtor = getParentCtor(typeOrFunc);
            var ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
            var parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
            return parentAnnotations.concat(ownAnnotations);
        };
        ReflectionCapabilities.prototype._ownPropMetadata = function (typeOrFunc, parentCtor) {
            if (((typeOrFunc)).propMetadata &&
                ((typeOrFunc)).propMetadata !== parentCtor.propMetadata) {
                var propMetadata = ((typeOrFunc)).propMetadata;
                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                    propMetadata = propMetadata.propMetadata;
                }
                return propMetadata;
            }
            if (((typeOrFunc)).propDecorators &&
                ((typeOrFunc)).propDecorators !== parentCtor.propDecorators) {
                var propDecorators_1 = ((typeOrFunc)).propDecorators;
                var propMetadata_1 = ({});
                Object.keys(propDecorators_1).forEach(function (prop) {
                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
                });
                return propMetadata_1;
            }
            if (this._reflect && this._reflect.getOwnMetadata) {
                return this._reflect.getOwnMetadata('propMetadata', typeOrFunc);
            }
            return null;
        };
        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
            if (!isType(typeOrFunc)) {
                return {};
            }
            var parentCtor = getParentCtor(typeOrFunc);
            var propMetadata = {};
            if (parentCtor !== Object) {
                var parentPropMetadata_1 = this.propMetadata(parentCtor);
                Object.keys(parentPropMetadata_1).forEach(function (propName) {
                    propMetadata[propName] = parentPropMetadata_1[propName];
                });
            }
            var ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
            if (ownPropMetadata) {
                Object.keys(ownPropMetadata).forEach(function (propName) {
                    var decorators = [];
                    if (propMetadata.hasOwnProperty(propName)) {
                        decorators.push.apply(decorators, propMetadata[propName]);
                    }
                    decorators.push.apply(decorators, ownPropMetadata[propName]);
                    propMetadata[propName] = decorators;
                });
            }
            return propMetadata;
        };
        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
            return type instanceof Type && lcProperty in type.prototype;
        };
        ReflectionCapabilities.prototype.getter = function (name) { return (new Function('o', 'return o.' + name + ';')); };
        ReflectionCapabilities.prototype.setter = function (name) {
            return (new Function('o', 'v', 'return o.' + name + ' = v;'));
        };
        ReflectionCapabilities.prototype.method = function (name) {
            var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
            return (new Function('o', 'args', functionBody));
        };
        ReflectionCapabilities.prototype.importUri = function (type) {
            if (typeof type === 'object' && type['filePath']) {
                return type['filePath'];
            }
            return "./" + stringify(type);
        };
        ReflectionCapabilities.prototype.resourceUri = function (type) { return "./" + stringify(type); };
        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
            return runtime;
        };
        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
        return ReflectionCapabilities;
    }());
    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
        if (!decoratorInvocations) {
            return [];
        }
        return decoratorInvocations.map(function (decoratorInvocation) {
            var decoratorType = decoratorInvocation.type;
            var annotationCls = decoratorType.annotationCls;
            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
        });
    }
    function getParentCtor(ctor) {
        var parentProto = Object.getPrototypeOf(ctor.prototype);
        var parentCtor = parentProto ? parentProto.constructor : null;
        return parentCtor || Object;
    }
    var ReflectorReader = (function () {
        function ReflectorReader() {
        }
        ReflectorReader.prototype.parameters = function (typeOrFunc) { };
        ReflectorReader.prototype.annotations = function (typeOrFunc) { };
        ReflectorReader.prototype.propMetadata = function (typeOrFunc) { };
        ReflectorReader.prototype.importUri = function (typeOrFunc) { };
        ReflectorReader.prototype.resourceUri = function (typeOrFunc) { };
        ReflectorReader.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) { };
        ReflectorReader.prototype.resolveEnum = function (identifier, name) { };
        return ReflectorReader;
    }());
    var Reflector = (function (_super) {
        __extends$2(Reflector, _super);
        function Reflector(reflectionCapabilities) {
            var _this = _super.call(this) || this;
            _this.reflectionCapabilities = reflectionCapabilities;
            return _this;
        }
        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
        Reflector.prototype.parameters = function (typeOrFunc) {
            return this.reflectionCapabilities.parameters(typeOrFunc);
        };
        Reflector.prototype.annotations = function (typeOrFunc) {
            return this.reflectionCapabilities.annotations(typeOrFunc);
        };
        Reflector.prototype.propMetadata = function (typeOrFunc) {
            return this.reflectionCapabilities.propMetadata(typeOrFunc);
        };
        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
        };
        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
        Reflector.prototype.resourceUri = function (type) { return this.reflectionCapabilities.resourceUri(type); };
        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, members, runtime) {
            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
        };
        Reflector.prototype.resolveEnum = function (identifier, name) {
            return this.reflectionCapabilities.resolveEnum(identifier, name);
        };
        return Reflector;
    }(ReflectorReader));
    var reflector = new Reflector(new ReflectionCapabilities());
    var ReflectiveDependency = (function () {
        function ReflectiveDependency(key, optional, visibility) {
            this.key = key;
            this.optional = optional;
            this.visibility = visibility;
        }
        ReflectiveDependency.fromKey = function (key) {
            return new ReflectiveDependency(key, false, null);
        };
        return ReflectiveDependency;
    }());
    var _EMPTY_LIST = [];
    var ResolvedReflectiveProvider_ = (function () {
        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
            this.key = key;
            this.resolvedFactories = resolvedFactories;
            this.multiProvider = multiProvider;
        }
        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
            get: function () { return this.resolvedFactories[0]; },
            enumerable: true,
            configurable: true
        });
        return ResolvedReflectiveProvider_;
    }());
    var ResolvedReflectiveFactory = (function () {
        function ResolvedReflectiveFactory(factory, dependencies) {
            this.factory = factory;
            this.dependencies = dependencies;
        }
        return ResolvedReflectiveFactory;
    }());
    function resolveReflectiveFactory(provider) {
        var factoryFn;
        var resolvedDeps;
        if (provider.useClass) {
            var useClass = resolveForwardRef(provider.useClass);
            factoryFn = reflector.factory(useClass);
            resolvedDeps = _dependenciesFor(useClass);
        }
        else if (provider.useExisting) {
            factoryFn = function (aliasInstance) { return aliasInstance; };
            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
        }
        else if (provider.useFactory) {
            factoryFn = provider.useFactory;
            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
        }
        else {
            factoryFn = function () { return provider.useValue; };
            resolvedDeps = _EMPTY_LIST;
        }
        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
    }
    function resolveReflectiveProvider(provider) {
        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
    }
    function resolveReflectiveProviders(providers) {
        var normalized = _normalizeProviders(providers, []);
        var resolved = normalized.map(resolveReflectiveProvider);
        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
        return Array.from(resolvedProviderMap.values());
    }
    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
        for (var i = 0; i < providers.length; i++) {
            var provider = providers[i];
            var existing = normalizedProvidersMap.get(provider.key.id);
            if (existing) {
                if (provider.multiProvider !== existing.multiProvider) {
                    throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
                }
                if (provider.multiProvider) {
                    for (var j = 0; j < provider.resolvedFactories.length; j++) {
                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
                    }
                }
                else {
                    normalizedProvidersMap.set(provider.key.id, provider);
                }
            }
            else {
                var resolvedProvider = void 0;
                if (provider.multiProvider) {
                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
                }
                else {
                    resolvedProvider = provider;
                }
                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
            }
        }
        return normalizedProvidersMap;
    }
    function _normalizeProviders(providers, res) {
        providers.forEach(function (b) {
            if (b instanceof Type) {
                res.push({ provide: b, useClass: b });
            }
            else if (b && typeof b == 'object' && ((b)).provide !== undefined) {
                res.push((b));
            }
            else if (b instanceof Array) {
                _normalizeProviders(b, res);
            }
            else {
                throw invalidProviderError(b);
            }
        });
        return res;
    }
    function constructDependencies(typeOrFunc, dependencies) {
        if (!dependencies) {
            return _dependenciesFor(typeOrFunc);
        }
        else {
            var params_1 = dependencies.map(function (t) { return [t]; });
            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
        }
    }
    function _dependenciesFor(typeOrFunc) {
        var params = reflector.parameters(typeOrFunc);
        if (!params)
            return [];
        if (params.some(function (p) { return p == null; })) {
            throw noAnnotationError(typeOrFunc, params);
        }
        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
    }
    function _extractToken(typeOrFunc, metadata, params) {
        var token = null;
        var optional = false;
        if (!Array.isArray(metadata)) {
            if (metadata instanceof Inject) {
                return _createDependency(metadata['token'], optional, null);
            }
            else {
                return _createDependency(metadata, optional, null);
            }
        }
        var visibility = null;
        for (var i = 0; i < metadata.length; ++i) {
            var paramMetadata = metadata[i];
            if (paramMetadata instanceof Type) {
                token = paramMetadata;
            }
            else if (paramMetadata instanceof Inject) {
                token = paramMetadata['token'];
            }
            else if (paramMetadata instanceof Optional) {
                optional = true;
            }
            else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
                visibility = paramMetadata;
            }
            else if (paramMetadata instanceof InjectionToken) {
                token = paramMetadata;
            }
        }
        token = resolveForwardRef(token);
        if (token != null) {
            return _createDependency(token, optional, visibility);
        }
        else {
            throw noAnnotationError(typeOrFunc, params);
        }
    }
    function _createDependency(token, optional, visibility) {
        return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
    }
    var UNDEFINED = new Object();
    var ReflectiveInjector = (function () {
        function ReflectiveInjector() {
        }
        ReflectiveInjector.resolve = function (providers) {
            return resolveReflectiveProviders(providers);
        };
        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
        };
        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
            return new ReflectiveInjector_(providers, parent);
        };
        ReflectiveInjector.prototype.parent = function () { };
        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { };
        ReflectiveInjector.prototype.createChildFromResolved = function (providers) { };
        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { };
        ReflectiveInjector.prototype.instantiateResolved = function (provider) { };
        ReflectiveInjector.prototype.get = function (token, notFoundValue) { };
        return ReflectiveInjector;
    }());
    var ReflectiveInjector_ = (function () {
        function ReflectiveInjector_(_providers, _parent) {
            this._constructionCounter = 0;
            this._providers = _providers;
            this._parent = _parent || null;
            var len = _providers.length;
            this.keyIds = new Array(len);
            this.objs = new Array(len);
            for (var i = 0; i < len; i++) {
                this.keyIds[i] = _providers[i].key.id;
                this.objs[i] = UNDEFINED;
            }
        }
        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = THROW_IF_NOT_FOUND;
            }
            return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
            get: function () { return this._parent; },
            enumerable: true,
            configurable: true
        });
        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
            return this.createChildFromResolved(ResolvedReflectiveProviders);
        };
        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
            var inj = new ReflectiveInjector_(providers);
            inj._parent = this;
            return inj;
        };
        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
        };
        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
            return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype.getProviderAtIndex = function (index) {
            if (index < 0 || index >= this._providers.length) {
                throw outOfBoundsError(index);
            }
            return this._providers[index];
        };
        ReflectiveInjector_.prototype._new = function (provider) {
            if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
                throw cyclicDependencyError(this, provider.key);
            }
            return this._instantiateProvider(provider);
        };
        ReflectiveInjector_.prototype._getMaxNumberOfObjects = function () { return this.objs.length; };
        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
            if (provider.multiProvider) {
                var res = new Array(provider.resolvedFactories.length);
                for (var i = 0; i < provider.resolvedFactories.length; ++i) {
                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
                }
                return res;
            }
            else {
                return this._instantiate(provider, provider.resolvedFactories[0]);
            }
        };
        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory$$1) {
            var _this = this;
            var factory = ResolvedReflectiveFactory$$1.factory;
            var deps;
            try {
                deps =
                    ResolvedReflectiveFactory$$1.dependencies.map(function (dep) { return _this._getByReflectiveDependency(dep); });
            }
            catch (e) {
                if (e.addKey) {
                    e.addKey(this, provider.key);
                }
                throw e;
            }
            var obj;
            try {
                obj = factory.apply(void 0, deps);
            }
            catch (e) {
                throw instantiationError(this, e, e.stack, provider.key);
            }
            return obj;
        };
        ReflectiveInjector_.prototype._getByReflectiveDependency = function (dep) {
            return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
        };
        ReflectiveInjector_.prototype._getByKey = function (key, visibility, notFoundValue) {
            if (key === INJECTOR_KEY) {
                return this;
            }
            if (visibility instanceof Self) {
                return this._getByKeySelf(key, notFoundValue);
            }
            else {
                return this._getByKeyDefault(key, notFoundValue, visibility);
            }
        };
        ReflectiveInjector_.prototype._getObjByKeyId = function (keyId) {
            for (var i = 0; i < this.keyIds.length; i++) {
                if (this.keyIds[i] === keyId) {
                    if (this.objs[i] === UNDEFINED) {
                        this.objs[i] = this._new(this._providers[i]);
                    }
                    return this.objs[i];
                }
            }
            return UNDEFINED;
        };
        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
            if (notFoundValue !== THROW_IF_NOT_FOUND) {
                return notFoundValue;
            }
            else {
                throw noProviderError(this, key);
            }
        };
        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
            var obj = this._getObjByKeyId(key.id);
            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
        };
        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, visibility) {
            var inj;
            if (visibility instanceof SkipSelf) {
                inj = this._parent;
            }
            else {
                inj = this;
            }
            while (inj instanceof ReflectiveInjector_) {
                var inj_ = (inj);
                var obj = inj_._getObjByKeyId(key.id);
                if (obj !== UNDEFINED)
                    return obj;
                inj = inj_._parent;
            }
            if (inj !== null) {
                return inj.get(key.token, notFoundValue);
            }
            else {
                return this._throwOrNull(key, notFoundValue);
            }
        };
        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
            get: function () {
                var providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
                    .join(', ');
                return "ReflectiveInjector(providers: [" + providers + "])";
            },
            enumerable: true,
            configurable: true
        });
        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
        return ReflectiveInjector_;
    }());
    var INJECTOR_KEY = ReflectiveKey.get(Injector);
    function _mapProviders(injector, fn) {
        var res = new Array(injector._providers.length);
        for (var i = 0; i < injector._providers.length; ++i) {
            res[i] = fn(injector.getProviderAtIndex(i));
        }
        return res;
    }
    function isPromise(obj) {
        return !!obj && typeof obj.then === 'function';
    }
    function isObservable(obj) {
        return !!obj && typeof obj.subscribe === 'function';
    }
    var APP_INITIALIZER = new InjectionToken('Application Initializer');
    var ApplicationInitStatus = (function () {
        function ApplicationInitStatus(appInits) {
            var _this = this;
            this._done = false;
            var asyncInitPromises = [];
            if (appInits) {
                for (var i = 0; i < appInits.length; i++) {
                    var initResult = appInits[i]();
                    if (isPromise(initResult)) {
                        asyncInitPromises.push(initResult);
                    }
                }
            }
            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
            if (asyncInitPromises.length === 0) {
                this._done = true;
            }
        }
        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
            get: function () { return this._done; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
            get: function () { return this._donePromise; },
            enumerable: true,
            configurable: true
        });
        return ApplicationInitStatus;
    }());
    ApplicationInitStatus.decorators = [
        { type: Injectable },
    ];
    ApplicationInitStatus.ctorParameters = function () {
        return [
            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
        ];
    };
    var APP_ID = new InjectionToken('AppId');
    function _appIdRandomProviderFactory() {
        return "" + _randomChar() + _randomChar() + _randomChar();
    }
    var APP_ID_RANDOM_PROVIDER = {
        provide: APP_ID,
        useFactory: _appIdRandomProviderFactory,
        deps: [],
    };
    function _randomChar() {
        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
    }
    var PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
    var PLATFORM_ID = new InjectionToken('Platform ID');
    var APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
    var PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');
    var Console = (function () {
        function Console() {
        }
        Console.prototype.log = function (message) {
            console.log(message);
        };
        Console.prototype.warn = function (message) {
            console.warn(message);
        };
        return Console;
    }());
    Console.decorators = [
        { type: Injectable },
    ];
    Console.ctorParameters = function () { return []; };
    function _throwError() {
        throw new Error("Runtime compiler is not loaded");
    }
    var Compiler = (function () {
        function Compiler() {
        }
        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
            throw _throwError();
        };
        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
            throw _throwError();
        };
        Compiler.prototype.getNgContentSelectors = function (component) { throw _throwError(); };
        Compiler.prototype.clearCache = function () { };
        Compiler.prototype.clearCacheFor = function (type) { };
        return Compiler;
    }());
    Compiler.decorators = [
        { type: Injectable },
    ];
    Compiler.ctorParameters = function () { return []; };
    var COMPILER_OPTIONS = new InjectionToken('compilerOptions');
    var CompilerFactory = (function () {
        function CompilerFactory() {
        }
        CompilerFactory.prototype.createCompiler = function (options) { };
        return CompilerFactory;
    }());
    var ComponentRef = (function () {
        function ComponentRef() {
        }
        ComponentRef.prototype.location = function () { };
        ComponentRef.prototype.injector = function () { };
        ComponentRef.prototype.instance = function () { };
        ComponentRef.prototype.hostView = function () { };
        ComponentRef.prototype.changeDetectorRef = function () { };
        ComponentRef.prototype.componentType = function () { };
        ComponentRef.prototype.destroy = function () { };
        ComponentRef.prototype.onDestroy = function (callback) { };
        return ComponentRef;
    }());
    var ComponentFactory = (function () {
        function ComponentFactory() {
        }
        ComponentFactory.prototype.selector = function () { };
        ComponentFactory.prototype.componentType = function () { };
        ComponentFactory.prototype.ngContentSelectors = function () { };
        ComponentFactory.prototype.inputs = function () { };
        ComponentFactory.prototype.outputs = function () { };
        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) { };
        return ComponentFactory;
    }());
    function noComponentFactoryError(component) {
        var error = Error("No component factory found for " + stringify(component) + ". Did you add it to @NgModule.entryComponents?");
        ((error))[ERROR_COMPONENT] = component;
        return error;
    }
    var ERROR_COMPONENT = 'ngComponent';
    var _NullComponentFactoryResolver = (function () {
        function _NullComponentFactoryResolver() {
        }
        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
            throw noComponentFactoryError(component);
        };
        return _NullComponentFactoryResolver;
    }());
    var ComponentFactoryResolver = (function () {
        function ComponentFactoryResolver() {
        }
        ComponentFactoryResolver.prototype.resolveComponentFactory = function (component) { };
        return ComponentFactoryResolver;
    }());
    ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
    var CodegenComponentFactoryResolver = (function () {
        function CodegenComponentFactoryResolver(factories, _parent, _ngModule) {
            this._parent = _parent;
            this._ngModule = _ngModule;
            this._factories = new Map();
            for (var i = 0; i < factories.length; i++) {
                var factory = factories[i];
                this._factories.set(factory.componentType, factory);
            }
        }
        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
            var factory = this._factories.get(component) || this._parent.resolveComponentFactory(component);
            return new ComponentFactoryBoundToModule(factory, this._ngModule);
        };
        return CodegenComponentFactoryResolver;
    }());
    var ComponentFactoryBoundToModule = (function (_super) {
        __extends$2(ComponentFactoryBoundToModule, _super);
        function ComponentFactoryBoundToModule(factory, ngModule) {
            var _this = _super.call(this) || this;
            _this.factory = factory;
            _this.ngModule = ngModule;
            return _this;
        }
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "selector", {
            get: function () { return this.factory.selector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "componentType", {
            get: function () { return this.factory.componentType; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "ngContentSelectors", {
            get: function () { return this.factory.ngContentSelectors; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "inputs", {
            get: function () { return this.factory.inputs; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactoryBoundToModule.prototype, "outputs", {
            get: function () { return this.factory.outputs; },
            enumerable: true,
            configurable: true
        });
        ComponentFactoryBoundToModule.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
            return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
        };
        return ComponentFactoryBoundToModule;
    }(ComponentFactory));
    var NgModuleRef = (function () {
        function NgModuleRef() {
        }
        NgModuleRef.prototype.injector = function () { };
        NgModuleRef.prototype.componentFactoryResolver = function () { };
        NgModuleRef.prototype.instance = function () { };
        NgModuleRef.prototype.destroy = function () { };
        NgModuleRef.prototype.onDestroy = function (callback) { };
        return NgModuleRef;
    }());
    var NgModuleFactory = (function () {
        function NgModuleFactory(_injectorClass, _moduleType) {
            this._injectorClass = _injectorClass;
            this._moduleType = _moduleType;
        }
        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
            get: function () { return this._moduleType; },
            enumerable: true,
            configurable: true
        });
        NgModuleFactory.prototype.create = function (parentInjector) {
            var instance = new this._injectorClass(parentInjector || Injector.NULL);
            instance.create();
            return instance;
        };
        return NgModuleFactory;
    }());
    var _UNDEFINED = new Object();
    var NgModuleInjector = (function () {
        function NgModuleInjector(parent, factories, bootstrapFactories) {
            var _this = this;
            this.parent = parent;
            this._destroyListeners = [];
            this._destroyed = false;
            this.bootstrapFactories =
                bootstrapFactories.map(function (f) { return new ComponentFactoryBoundToModule(f, _this); });
            this._cmpFactoryResolver = new CodegenComponentFactoryResolver(factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL), this);
        }
        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
        NgModuleInjector.prototype.createInternal = function () { };
        NgModuleInjector.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = THROW_IF_NOT_FOUND;
            }
            if (token === Injector || token === NgModuleRef) {
                return this;
            }
            if (token === ComponentFactoryResolver) {
                return this._cmpFactoryResolver;
            }
            var result = this.getInternal(token, _UNDEFINED);
            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
        };
        NgModuleInjector.prototype.getInternal = function (token, notFoundValue) { };
        Object.defineProperty(NgModuleInjector.prototype, "injector", {
            get: function () { return this; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
            get: function () { return this._cmpFactoryResolver; },
            enumerable: true,
            configurable: true
        });
        NgModuleInjector.prototype.destroy = function () {
            if (this._destroyed) {
                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
            }
            this._destroyed = true;
            this.destroyInternal();
            this._destroyListeners.forEach(function (listener) { return listener(); });
        };
        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
        NgModuleInjector.prototype.destroyInternal = function () { };
        return NgModuleInjector;
    }());
    var trace;
    var events;
    function detectWTF() {
        var wtf = ((_global))['wtf'];
        if (wtf) {
            trace = wtf['trace'];
            if (trace) {
                events = trace['events'];
                return true;
            }
        }
        return false;
    }
    function createScope$1(signature, flags) {
        if (flags === void 0) {
            flags = null;
        }
        return events.createScope(signature, flags);
    }
    function leave(scope, returnValue) {
        trace.leaveScope(scope, returnValue);
        return returnValue;
    }
    var wtfEnabled = detectWTF();
    function noopScope(arg0, arg1) {
        return null;
    }
    var wtfCreateScope = wtfEnabled ? createScope$1 : function (signature, flags) { return noopScope; };
    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
    var EventEmitter = (function (_super) {
        __extends$2(EventEmitter, _super);
        function EventEmitter(isAsync) {
            if (isAsync === void 0) {
                isAsync = false;
            }
            var _this = _super.call(this) || this;
            _this.__isAsync = isAsync;
            return _this;
        }
        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
            var schedulerFn;
            var errorFn = function (err) { return null; };
            var completeFn = function () { return null; };
            if (generatorOrNext && typeof generatorOrNext === 'object') {
                schedulerFn = this.__isAsync ? function (value) {
                    setTimeout(function () { return generatorOrNext.next(value); });
                } : function (value) { generatorOrNext.next(value); };
                if (generatorOrNext.error) {
                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
                        function (err) { generatorOrNext.error(err); };
                }
                if (generatorOrNext.complete) {
                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
                        function () { generatorOrNext.complete(); };
                }
            }
            else {
                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
                    function (value) { generatorOrNext(value); };
                if (error) {
                    errorFn =
                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
                }
                if (complete) {
                    completeFn =
                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
                }
            }
            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
        };
        return EventEmitter;
    }(Subject_2));
    var NgZone = (function () {
        function NgZone(_a) {
            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
            this._hasPendingMicrotasks = false;
            this._hasPendingMacrotasks = false;
            this._isStable = true;
            this._nesting = 0;
            this._onUnstable = new EventEmitter(false);
            this._onMicrotaskEmpty = new EventEmitter(false);
            this._onStable = new EventEmitter(false);
            this._onErrorEvents = new EventEmitter(false);
            if (typeof Zone == 'undefined') {
                throw new Error('Angular requires Zone.js prolyfill.');
            }
            Zone.assertZonePatched();
            this.outer = this.inner = Zone.current;
            if (Zone['wtfZoneSpec']) {
                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
            }
            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
            }
            this.forkInnerZoneWithAngularBehavior();
        }
        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
        NgZone.assertInAngularZone = function () {
            if (!NgZone.isInAngularZone()) {
                throw new Error('Expected to be in Angular Zone, but it is not!');
            }
        };
        NgZone.assertNotInAngularZone = function () {
            if (NgZone.isInAngularZone()) {
                throw new Error('Expected to not be in Angular Zone, but it is!');
            }
        };
        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
        Object.defineProperty(NgZone.prototype, "onUnstable", {
            get: function () { return this._onUnstable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
            get: function () { return this._onMicrotaskEmpty; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onStable", {
            get: function () { return this._onStable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "onError", {
            get: function () { return this._onErrorEvents; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "isStable", {
            get: function () { return this._isStable; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
            get: function () { return this._hasPendingMicrotasks; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
            get: function () { return this._hasPendingMacrotasks; },
            enumerable: true,
            configurable: true
        });
        NgZone.prototype.checkStable = function () {
            var _this = this;
            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
                try {
                    this._nesting++;
                    this._onMicrotaskEmpty.emit(null);
                }
                finally {
                    this._nesting--;
                    if (!this._hasPendingMicrotasks) {
                        try {
                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });
                        }
                        finally {
                            this._isStable = true;
                        }
                    }
                }
            }
        };
        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
            var _this = this;
            this.inner = this.inner.fork({
                name: 'angular',
                properties: ({ 'isAngularZone': true }),
                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
                    try {
                        _this.onEnter();
                        return delegate.invokeTask(target, task, applyThis, applyArgs);
                    }
                    finally {
                        _this.onLeave();
                    }
                },
                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
                    try {
                        _this.onEnter();
                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
                    }
                    finally {
                        _this.onLeave();
                    }
                },
                onHasTask: function (delegate, current, target, hasTaskState) {
                    delegate.hasTask(target, hasTaskState);
                    if (current === target) {
                        if (hasTaskState.change == 'microTask') {
                            _this.setHasMicrotask(hasTaskState.microTask);
                        }
                        else if (hasTaskState.change == 'macroTask') {
                            _this.setHasMacrotask(hasTaskState.macroTask);
                        }
                    }
                },
                onHandleError: function (delegate, current, target, error) {
                    delegate.handleError(target, error);
                    _this.triggerError(error);
                    return false;
                }
            });
        };
        NgZone.prototype.onEnter = function () {
            this._nesting++;
            if (this._isStable) {
                this._isStable = false;
                this._onUnstable.emit(null);
            }
        };
        NgZone.prototype.onLeave = function () {
            this._nesting--;
            this.checkStable();
        };
        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
            this._hasPendingMicrotasks = hasMicrotasks;
            this.checkStable();
        };
        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
        return NgZone;
    }());
    var Testability = (function () {
        function Testability(_ngZone) {
            this._ngZone = _ngZone;
            this._pendingCount = 0;
            this._isZoneStable = true;
            this._didWork = false;
            this._callbacks = [];
            this._watchAngularEvents();
        }
        Testability.prototype._watchAngularEvents = function () {
            var _this = this;
            this._ngZone.onUnstable.subscribe({
                next: function () {
                    _this._didWork = true;
                    _this._isZoneStable = false;
                }
            });
            this._ngZone.runOutsideAngular(function () {
                _this._ngZone.onStable.subscribe({
                    next: function () {
                        NgZone.assertNotInAngularZone();
                        scheduleMicroTask(function () {
                            _this._isZoneStable = true;
                            _this._runCallbacksIfReady();
                        });
                    }
                });
            });
        };
        Testability.prototype.increasePendingRequestCount = function () {
            this._pendingCount += 1;
            this._didWork = true;
            return this._pendingCount;
        };
        Testability.prototype.decreasePendingRequestCount = function () {
            this._pendingCount -= 1;
            if (this._pendingCount < 0) {
                throw new Error('pending async requests below zero');
            }
            this._runCallbacksIfReady();
            return this._pendingCount;
        };
        Testability.prototype.isStable = function () {
            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
        };
        Testability.prototype._runCallbacksIfReady = function () {
            var _this = this;
            if (this.isStable()) {
                scheduleMicroTask(function () {
                    while (_this._callbacks.length !== 0) {
                        (((_this._callbacks.pop())))(_this._didWork);
                    }
                    _this._didWork = false;
                });
            }
            else {
                this._didWork = true;
            }
        };
        Testability.prototype.whenStable = function (callback) {
            this._callbacks.push(callback);
            this._runCallbacksIfReady();
        };
        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
        Testability.prototype.findBindings = function (using, provider, exactMatch) {
            return [];
        };
        Testability.prototype.findProviders = function (using, provider, exactMatch) {
            return [];
        };
        return Testability;
    }());
    Testability.decorators = [
        { type: Injectable },
    ];
    Testability.ctorParameters = function () {
        return [
            { type: NgZone, },
        ];
    };
    var TestabilityRegistry = (function () {
        function TestabilityRegistry() {
            this._applications = new Map();
            _testabilityGetter.addToWindow(this);
        }
        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
            this._applications.set(token, testability);
        };
        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem) || null; };
        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
            if (findInAncestors === void 0) {
                findInAncestors = true;
            }
            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
        };
        return TestabilityRegistry;
    }());
    TestabilityRegistry.decorators = [
        { type: Injectable },
    ];
    TestabilityRegistry.ctorParameters = function () { return []; };
    var _NoopGetTestability = (function () {
        function _NoopGetTestability() {
        }
        _NoopGetTestability.prototype.addToWindow = function (registry) { };
        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            return null;
        };
        return _NoopGetTestability;
    }());
    function setTestabilityGetter(getter) {
        _testabilityGetter = getter;
    }
    var _testabilityGetter = new _NoopGetTestability();
    var _devMode = true;
    var _runModeLocked = false;
    var _platform;
    var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
    function isDevMode() {
        _runModeLocked = true;
        return _devMode;
    }
    var NgProbeToken = (function () {
        function NgProbeToken(name, token) {
            this.name = name;
            this.token = token;
        }
        return NgProbeToken;
    }());
    function createPlatform(injector) {
        if (_platform && !_platform.destroyed &&
            !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
        }
        _platform = injector.get(PlatformRef);
        var inits = injector.get(PLATFORM_INITIALIZER, null);
        if (inits)
            inits.forEach(function (init) { return init(); });
        return _platform;
    }
    function createPlatformFactory(parentPlatformFactory, name, providers) {
        if (providers === void 0) {
            providers = [];
        }
        var marker = new InjectionToken("Platform: " + name);
        return function (extraProviders) {
            if (extraProviders === void 0) {
                extraProviders = [];
            }
            var platform = getPlatform();
            if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
                if (parentPlatformFactory) {
                    parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
                }
                else {
                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
                }
            }
            return assertPlatform(marker);
        };
    }
    function assertPlatform(requiredToken) {
        var platform = getPlatform();
        if (!platform) {
            throw new Error('No platform exists!');
        }
        if (!platform.injector.get(requiredToken, null)) {
            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
        }
        return platform;
    }
    function getPlatform() {
        return _platform && !_platform.destroyed ? _platform : null;
    }
    var PlatformRef = (function () {
        function PlatformRef() {
        }
        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) { };
        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) { };
        PlatformRef.prototype.onDestroy = function (callback) { };
        PlatformRef.prototype.injector = function () { };
        PlatformRef.prototype.destroy = function () { };
        PlatformRef.prototype.destroyed = function () { };
        return PlatformRef;
    }());
    function _callAndReportToErrorHandler(errorHandler, callback) {
        try {
            var result = callback();
            if (isPromise(result)) {
                return result.catch(function (e) {
                    errorHandler.handleError(e);
                    throw e;
                });
            }
            return result;
        }
        catch (e) {
            errorHandler.handleError(e);
            throw e;
        }
    }
    var PlatformRef_ = (function (_super) {
        __extends$2(PlatformRef_, _super);
        function PlatformRef_(_injector) {
            var _this = _super.call(this) || this;
            _this._injector = _injector;
            _this._modules = [];
            _this._destroyListeners = [];
            _this._destroyed = false;
            return _this;
        }
        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
        Object.defineProperty(PlatformRef_.prototype, "injector", {
            get: function () { return this._injector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
            get: function () { return this._destroyed; },
            enumerable: true,
            configurable: true
        });
        PlatformRef_.prototype.destroy = function () {
            if (this._destroyed) {
                throw new Error('The platform has already been destroyed!');
            }
            this._modules.slice().forEach(function (module) { return module.destroy(); });
            this._destroyListeners.forEach(function (listener) { return listener(); });
            this._destroyed = true;
        };
        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
            return this._bootstrapModuleFactoryWithZone(moduleFactory);
        };
        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
            var _this = this;
            if (!ngZone)
                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
            return ngZone.run(function () {
                var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
                var moduleRef = (moduleFactory.create(ngZoneInjector));
                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
                if (!exceptionHandler) {
                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
                }
                moduleRef.onDestroy(function () { return remove(_this._modules, moduleRef); });
                ((ngZone)).onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
                return _callAndReportToErrorHandler(exceptionHandler, function () {
                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);
                    return initStatus.donePromise.then(function () {
                        _this._moduleDoBootstrap(moduleRef);
                        return moduleRef;
                    });
                });
            });
        };
        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
            if (compilerOptions === void 0) {
                compilerOptions = [];
            }
            return this._bootstrapModuleWithZone(moduleType, compilerOptions);
        };
        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone) {
            var _this = this;
            if (compilerOptions === void 0) {
                compilerOptions = [];
            }
            var compilerFactory = this.injector.get(CompilerFactory);
            var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
            return compiler.compileModuleAsync(moduleType)
                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
        };
        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
            var appRef = moduleRef.injector.get(ApplicationRef);
            if (moduleRef.bootstrapFactories.length > 0) {
                moduleRef.bootstrapFactories.forEach(function (f) { return appRef.bootstrap(f); });
            }
            else if (moduleRef.instance.ngDoBootstrap) {
                moduleRef.instance.ngDoBootstrap(appRef);
            }
            else {
                throw new Error("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. " +
                    "Please define one of these.");
            }
            this._modules.push(moduleRef);
        };
        return PlatformRef_;
    }(PlatformRef));
    PlatformRef_.decorators = [
        { type: Injectable },
    ];
    PlatformRef_.ctorParameters = function () {
        return [
            { type: Injector, },
        ];
    };
    var ApplicationRef = (function () {
        function ApplicationRef() {
        }
        ApplicationRef.prototype.bootstrap = function (componentFactory) { };
        ApplicationRef.prototype.tick = function () { };
        ApplicationRef.prototype.componentTypes = function () { };
        ApplicationRef.prototype.components = function () { };
        ApplicationRef.prototype.attachView = function (view) { };
        ApplicationRef.prototype.detachView = function (view) { };
        ApplicationRef.prototype.viewCount = function () { };
        ApplicationRef.prototype.isStable = function () { };
        return ApplicationRef;
    }());
    var ApplicationRef_ = (function (_super) {
        __extends$2(ApplicationRef_, _super);
        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
            var _this = _super.call(this) || this;
            _this._zone = _zone;
            _this._console = _console;
            _this._injector = _injector;
            _this._exceptionHandler = _exceptionHandler;
            _this._componentFactoryResolver = _componentFactoryResolver;
            _this._initStatus = _initStatus;
            _this._bootstrapListeners = [];
            _this._rootComponents = [];
            _this._rootComponentTypes = [];
            _this._views = [];
            _this._runningTick = false;
            _this._enforceNoNewChanges = false;
            _this._stable = true;
            _this._enforceNoNewChanges = isDevMode();
            _this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
            var isCurrentlyStable = new Observable_2(function (observer) {
                _this._stable = _this._zone.isStable && !_this._zone.hasPendingMacrotasks &&
                    !_this._zone.hasPendingMicrotasks;
                _this._zone.runOutsideAngular(function () {
                    observer.next(_this._stable);
                    observer.complete();
                });
            });
            var isStable = new Observable_2(function (observer) {
                var stableSub = _this._zone.onStable.subscribe(function () {
                    NgZone.assertNotInAngularZone();
                    scheduleMicroTask(function () {
                        if (!_this._stable && !_this._zone.hasPendingMacrotasks &&
                            !_this._zone.hasPendingMicrotasks) {
                            _this._stable = true;
                            observer.next(true);
                        }
                    });
                });
                var unstableSub = _this._zone.onUnstable.subscribe(function () {
                    NgZone.assertInAngularZone();
                    if (_this._stable) {
                        _this._stable = false;
                        _this._zone.runOutsideAngular(function () { observer.next(false); });
                    }
                });
                return function () {
                    stableSub.unsubscribe();
                    unstableSub.unsubscribe();
                };
            });
            _this._isStable = merge_2(isCurrentlyStable, share_2.call(isStable));
            return _this;
        }
        ApplicationRef_.prototype.attachView = function (viewRef) {
            var view = ((viewRef));
            this._views.push(view);
            view.attachToAppRef(this);
        };
        ApplicationRef_.prototype.detachView = function (viewRef) {
            var view = ((viewRef));
            remove(this._views, view);
            view.detachFromAppRef();
        };
        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
            var _this = this;
            if (!this._initStatus.done) {
                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
            }
            var componentFactory;
            if (componentOrFactory instanceof ComponentFactory) {
                componentFactory = componentOrFactory;
            }
            else {
                componentFactory = ((this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));
            }
            this._rootComponentTypes.push(componentFactory.componentType);
            var ngModule = componentFactory instanceof ComponentFactoryBoundToModule ?
                null :
                this._injector.get(NgModuleRef);
            var compRef = componentFactory.create(Injector.NULL, [], componentFactory.selector, ngModule);
            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
            var testability = compRef.injector.get(Testability, null);
            if (testability) {
                compRef.injector.get(TestabilityRegistry)
                    .registerApplication(compRef.location.nativeElement, testability);
            }
            this._loadComponent(compRef);
            if (isDevMode()) {
                this._console.log("Angular is running in the development mode. Call enableProdMode() to enable the production mode.");
            }
            return compRef;
        };
        ApplicationRef_.prototype._loadComponent = function (componentRef) {
            this.attachView(componentRef.hostView);
            this.tick();
            this._rootComponents.push(componentRef);
            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
            listeners.forEach(function (listener) { return listener(componentRef); });
        };
        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
            this.detachView(componentRef.hostView);
            remove(this._rootComponents, componentRef);
        };
        ApplicationRef_.prototype.tick = function () {
            if (this._runningTick) {
                throw new Error('ApplicationRef.tick is called recursively');
            }
            var scope = ApplicationRef_._tickScope();
            try {
                this._runningTick = true;
                this._views.forEach(function (view) { return view.detectChanges(); });
                if (this._enforceNoNewChanges) {
                    this._views.forEach(function (view) { return view.checkNoChanges(); });
                }
            }
            finally {
                this._runningTick = false;
                wtfLeave(scope);
            }
        };
        ApplicationRef_.prototype.ngOnDestroy = function () {
            this._views.slice().forEach(function (view) { return view.destroy(); });
        };
        Object.defineProperty(ApplicationRef_.prototype, "viewCount", {
            get: function () { return this._views.length; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
            get: function () { return this._rootComponentTypes; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "components", {
            get: function () { return this._rootComponents; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ApplicationRef_.prototype, "isStable", {
            get: function () { return this._isStable; },
            enumerable: true,
            configurable: true
        });
        return ApplicationRef_;
    }(ApplicationRef));
    ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
    ApplicationRef_.decorators = [
        { type: Injectable },
    ];
    ApplicationRef_.ctorParameters = function () {
        return [
            { type: NgZone, },
            { type: Console, },
            { type: Injector, },
            { type: ErrorHandler, },
            { type: ComponentFactoryResolver, },
            { type: ApplicationInitStatus, },
        ];
    };
    function remove(list, el) {
        var index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
        }
    }
    var Renderer = (function () {
        function Renderer() {
        }
        Renderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) { };
        Renderer.prototype.createElement = function (parentElement, name, debugInfo) { };
        Renderer.prototype.createViewRoot = function (hostElement) { };
        Renderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) { };
        Renderer.prototype.createText = function (parentElement, value, debugInfo) { };
        Renderer.prototype.projectNodes = function (parentElement, nodes) { };
        Renderer.prototype.attachViewAfter = function (node, viewRootNodes) { };
        Renderer.prototype.detachView = function (viewRootNodes) { };
        Renderer.prototype.destroyView = function (hostElement, viewAllNodes) { };
        Renderer.prototype.listen = function (renderElement, name, callback) { };
        Renderer.prototype.listenGlobal = function (target, name, callback) { };
        Renderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) { };
        Renderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) { };
        Renderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
        Renderer.prototype.setElementClass = function (renderElement, className, isAdd) { };
        Renderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) { };
        Renderer.prototype.invokeElementMethod = function (renderElement, methodName, args) { };
        Renderer.prototype.setText = function (renderNode, text) { };
        Renderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) { };
        return Renderer;
    }());
    var Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
    var RendererFactory2 = (function () {
        function RendererFactory2() {
        }
        RendererFactory2.prototype.createRenderer = function (hostElement, type) { };
        return RendererFactory2;
    }());
    var RendererStyleFlags2 = {};
    RendererStyleFlags2.Important = 1;
    RendererStyleFlags2.DashCase = 2;
    RendererStyleFlags2[RendererStyleFlags2.Important] = "Important";
    RendererStyleFlags2[RendererStyleFlags2.DashCase] = "DashCase";
    var Renderer2 = (function () {
        function Renderer2() {
        }
        Renderer2.prototype.data = function () { };
        Renderer2.prototype.destroy = function () { };
        Renderer2.prototype.createElement = function (name, namespace) { };
        Renderer2.prototype.createComment = function (value) { };
        Renderer2.prototype.createText = function (value) { };
        Renderer2.prototype.appendChild = function (parent, newChild) { };
        Renderer2.prototype.insertBefore = function (parent, newChild, refChild) { };
        Renderer2.prototype.removeChild = function (parent, oldChild) { };
        Renderer2.prototype.selectRootElement = function (selectorOrNode) { };
        Renderer2.prototype.parentNode = function (node) { };
        Renderer2.prototype.nextSibling = function (node) { };
        Renderer2.prototype.setAttribute = function (el, name, value, namespace) { };
        Renderer2.prototype.removeAttribute = function (el, name, namespace) { };
        Renderer2.prototype.addClass = function (el, name) { };
        Renderer2.prototype.removeClass = function (el, name) { };
        Renderer2.prototype.setStyle = function (el, style, value, flags) { };
        Renderer2.prototype.removeStyle = function (el, style, flags) { };
        Renderer2.prototype.setProperty = function (el, name, value) { };
        Renderer2.prototype.setValue = function (node, value) { };
        Renderer2.prototype.listen = function (target, eventName, callback) { };
        return Renderer2;
    }());
    var ElementRef = (function () {
        function ElementRef(nativeElement) {
            this.nativeElement = nativeElement;
        }
        return ElementRef;
    }());
    var NgModuleFactoryLoader = (function () {
        function NgModuleFactoryLoader() {
        }
        NgModuleFactoryLoader.prototype.load = function (path) { };
        return NgModuleFactoryLoader;
    }());
    var QueryList = (function () {
        function QueryList() {
            this._dirty = true;
            this._results = [];
            this._emitter = new EventEmitter();
        }
        Object.defineProperty(QueryList.prototype, "changes", {
            get: function () { return this._emitter; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "length", {
            get: function () { return this._results.length; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "first", {
            get: function () { return this._results[0]; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(QueryList.prototype, "last", {
            get: function () { return this._results[this.length - 1]; },
            enumerable: true,
            configurable: true
        });
        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
        QueryList.prototype.filter = function (fn) {
            return this._results.filter(fn);
        };
        QueryList.prototype.find = function (fn) {
            return this._results.find(fn);
        };
        QueryList.prototype.reduce = function (fn, init) {
            return this._results.reduce(fn, init);
        };
        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
        QueryList.prototype.some = function (fn) {
            return this._results.some(fn);
        };
        QueryList.prototype.toArray = function () { return this._results.slice(); };
        QueryList.prototype[getSymbolIterator()] = function () { return ((this._results))[getSymbolIterator()](); };
        QueryList.prototype.toString = function () { return this._results.toString(); };
        QueryList.prototype.reset = function (res) {
            this._results = flatten(res);
            this._dirty = false;
        };
        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
        QueryList.prototype.setDirty = function () { this._dirty = true; };
        Object.defineProperty(QueryList.prototype, "dirty", {
            get: function () { return this._dirty; },
            enumerable: true,
            configurable: true
        });
        return QueryList;
    }());
    function flatten(list) {
        return list.reduce(function (flat, item) {
            var flatItem = Array.isArray(item) ? flatten(item) : item;
            return ((flat)).concat(flatItem);
        }, []);
    }
    var _SEPARATOR = '#';
    var FACTORY_CLASS_SUFFIX = 'NgFactory';
    var SystemJsNgModuleLoaderConfig = (function () {
        function SystemJsNgModuleLoaderConfig() {
        }
        return SystemJsNgModuleLoaderConfig;
    }());
    var DEFAULT_CONFIG = {
        factoryPathPrefix: '',
        factoryPathSuffix: '.ngfactory',
    };
    var SystemJsNgModuleLoader = (function () {
        function SystemJsNgModuleLoader(_compiler, config) {
            this._compiler = _compiler;
            this._config = config || DEFAULT_CONFIG;
        }
        SystemJsNgModuleLoader.prototype.load = function (path) {
            var offlineMode = this._compiler instanceof Compiler;
            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
        };
        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
            var _this = this;
            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
            if (exportName === undefined) {
                exportName = 'default';
            }
            return System.import(module)
                .then(function (module) { return module[exportName]; })
                .then(function (type) { return checkNotEmpty(type, module, exportName); })
                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
        };
        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
            if (exportName === undefined) {
                exportName = 'default';
                factoryClassSuffix = '';
            }
            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
                .then(function (module) { return module[exportName + factoryClassSuffix]; })
                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
        };
        return SystemJsNgModuleLoader;
    }());
    SystemJsNgModuleLoader.decorators = [
        { type: Injectable },
    ];
    SystemJsNgModuleLoader.ctorParameters = function () {
        return [
            { type: Compiler, },
            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
        ];
    };
    function checkNotEmpty(value, modulePath, exportName) {
        if (!value) {
            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
        }
        return value;
    }
    var TemplateRef = (function () {
        function TemplateRef() {
        }
        TemplateRef.prototype.elementRef = function () { };
        TemplateRef.prototype.createEmbeddedView = function (context) { };
        return TemplateRef;
    }());
    var ViewContainerRef = (function () {
        function ViewContainerRef() {
        }
        ViewContainerRef.prototype.element = function () { };
        ViewContainerRef.prototype.injector = function () { };
        ViewContainerRef.prototype.parentInjector = function () { };
        ViewContainerRef.prototype.clear = function () { };
        ViewContainerRef.prototype.get = function (index) { };
        ViewContainerRef.prototype.length = function () { };
        ViewContainerRef.prototype.createEmbeddedView = function (templateRef, context, index) { };
        ViewContainerRef.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModule) { };
        ViewContainerRef.prototype.insert = function (viewRef, index) { };
        ViewContainerRef.prototype.move = function (viewRef, currentIndex) { };
        ViewContainerRef.prototype.indexOf = function (viewRef) { };
        ViewContainerRef.prototype.remove = function (index) { };
        ViewContainerRef.prototype.detach = function (index) { };
        return ViewContainerRef;
    }());
    var ChangeDetectorRef = (function () {
        function ChangeDetectorRef() {
        }
        ChangeDetectorRef.prototype.markForCheck = function () { };
        ChangeDetectorRef.prototype.detach = function () { };
        ChangeDetectorRef.prototype.detectChanges = function () { };
        ChangeDetectorRef.prototype.checkNoChanges = function () { };
        ChangeDetectorRef.prototype.reattach = function () { };
        return ChangeDetectorRef;
    }());
    var ViewRef = (function (_super) {
        __extends$2(ViewRef, _super);
        function ViewRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ViewRef.prototype.destroy = function () { };
        ViewRef.prototype.destroyed = function () { };
        ViewRef.prototype.onDestroy = function (callback) { };
        return ViewRef;
    }(ChangeDetectorRef));
    var EmbeddedViewRef = (function (_super) {
        __extends$2(EmbeddedViewRef, _super);
        function EmbeddedViewRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        EmbeddedViewRef.prototype.context = function () { };
        EmbeddedViewRef.prototype.rootNodes = function () { };
        return EmbeddedViewRef;
    }(ViewRef));
    var EventListener = (function () {
        function EventListener(name, callback) {
            this.name = name;
            this.callback = callback;
        }
        return EventListener;
    }());
    var DebugNode = (function () {
        function DebugNode(nativeNode, parent, _debugContext) {
            this._debugContext = _debugContext;
            this.nativeNode = nativeNode;
            if (parent && parent instanceof DebugElement) {
                parent.addChild(this);
            }
            else {
                this.parent = null;
            }
            this.listeners = [];
        }
        Object.defineProperty(DebugNode.prototype, "injector", {
            get: function () { return this._debugContext.injector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "componentInstance", {
            get: function () { return this._debugContext.component; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "context", {
            get: function () { return this._debugContext.context; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "references", {
            get: function () { return this._debugContext.references; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "providerTokens", {
            get: function () { return this._debugContext.providerTokens; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugNode.prototype, "source", {
            get: function () { return 'Deprecated since v4'; },
            enumerable: true,
            configurable: true
        });
        return DebugNode;
    }());
    var DebugElement = (function (_super) {
        __extends$2(DebugElement, _super);
        function DebugElement(nativeNode, parent, _debugContext) {
            var _this = _super.call(this, nativeNode, parent, _debugContext) || this;
            _this.properties = {};
            _this.attributes = {};
            _this.classes = {};
            _this.styles = {};
            _this.childNodes = [];
            _this.nativeElement = nativeNode;
            return _this;
        }
        DebugElement.prototype.addChild = function (child) {
            if (child) {
                this.childNodes.push(child);
                child.parent = this;
            }
        };
        DebugElement.prototype.removeChild = function (child) {
            var childIndex = this.childNodes.indexOf(child);
            if (childIndex !== -1) {
                child.parent = null;
                this.childNodes.splice(childIndex, 1);
            }
        };
        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
            var _this = this;
            var siblingIndex = this.childNodes.indexOf(child);
            if (siblingIndex !== -1) {
                (_a = this.childNodes).splice.apply(_a, [siblingIndex + 1, 0].concat(newChildren));
                newChildren.forEach(function (c) {
                    if (c.parent) {
                        c.parent.removeChild(c);
                    }
                    c.parent = _this;
                });
            }
            var _a;
        };
        DebugElement.prototype.insertBefore = function (refChild, newChild) {
            var refIndex = this.childNodes.indexOf(refChild);
            if (refIndex === -1) {
                this.addChild(newChild);
            }
            else {
                if (newChild.parent) {
                    newChild.parent.removeChild(newChild);
                }
                newChild.parent = this;
                this.childNodes.splice(refIndex, 0, newChild);
            }
        };
        DebugElement.prototype.query = function (predicate) {
            var results = this.queryAll(predicate);
            return results[0] || null;
        };
        DebugElement.prototype.queryAll = function (predicate) {
            var matches = [];
            _queryElementChildren(this, predicate, matches);
            return matches;
        };
        DebugElement.prototype.queryAllNodes = function (predicate) {
            var matches = [];
            _queryNodeChildren(this, predicate, matches);
            return matches;
        };
        Object.defineProperty(DebugElement.prototype, "children", {
            get: function () {
                return (this.childNodes.filter(function (node) { return node instanceof DebugElement; }));
            },
            enumerable: true,
            configurable: true
        });
        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
            this.listeners.forEach(function (listener) {
                if (listener.name == eventName) {
                    listener.callback(eventObj);
                }
            });
        };
        return DebugElement;
    }(DebugNode));
    function _queryElementChildren(element, predicate, matches) {
        element.childNodes.forEach(function (node) {
            if (node instanceof DebugElement) {
                if (predicate(node)) {
                    matches.push(node);
                }
                _queryElementChildren(node, predicate, matches);
            }
        });
    }
    function _queryNodeChildren(parentNode, predicate, matches) {
        if (parentNode instanceof DebugElement) {
            parentNode.childNodes.forEach(function (node) {
                if (predicate(node)) {
                    matches.push(node);
                }
                if (node instanceof DebugElement) {
                    _queryNodeChildren(node, predicate, matches);
                }
            });
        }
    }
    var _nativeNodeToDebugNode = new Map();
    function getDebugNode(nativeNode) {
        return _nativeNodeToDebugNode.get(nativeNode) || null;
    }
    function indexDebugNode(node) {
        _nativeNodeToDebugNode.set(node.nativeNode, node);
    }
    function removeDebugNodeFromIndex(node) {
        _nativeNodeToDebugNode.delete(node.nativeNode);
    }
    function devModeEqual(a, b) {
        var isListLikeIterableA = isListLikeIterable(a);
        var isListLikeIterableB = isListLikeIterable(b);
        if (isListLikeIterableA && isListLikeIterableB) {
            return areIterablesEqual(a, b, devModeEqual);
        }
        else {
            var isAObject = a && (typeof a === 'object' || typeof a === 'function');
            var isBObject = b && (typeof b === 'object' || typeof b === 'function');
            if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
                return true;
            }
            else {
                return looseIdentical(a, b);
            }
        }
    }
    var WrappedValue = (function () {
        function WrappedValue(wrapped) {
            this.wrapped = wrapped;
        }
        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
        return WrappedValue;
    }());
    var SimpleChange = (function () {
        function SimpleChange(previousValue, currentValue, firstChange) {
            this.previousValue = previousValue;
            this.currentValue = currentValue;
            this.firstChange = firstChange;
        }
        SimpleChange.prototype.isFirstChange = function () { return this.firstChange; };
        return SimpleChange;
    }());
    function isListLikeIterable(obj) {
        if (!isJsObject(obj))
            return false;
        return Array.isArray(obj) ||
            (!(obj instanceof Map) &&
                getSymbolIterator() in obj);
    }
    function areIterablesEqual(a, b, comparator) {
        var iterator1 = a[getSymbolIterator()]();
        var iterator2 = b[getSymbolIterator()]();
        while (true) {
            var item1 = iterator1.next();
            var item2 = iterator2.next();
            if (item1.done && item2.done)
                return true;
            if (item1.done || item2.done)
                return false;
            if (!comparator(item1.value, item2.value))
                return false;
        }
    }
    function iterateListLike(obj, fn) {
        if (Array.isArray(obj)) {
            for (var i = 0; i < obj.length; i++) {
                fn(obj[i]);
            }
        }
        else {
            var iterator = obj[getSymbolIterator()]();
            var item = void 0;
            while (!((item = iterator.next()).done)) {
                fn(item.value);
            }
        }
    }
    function isJsObject(o) {
        return o !== null && (typeof o === 'function' || typeof o === 'object');
    }
    var DefaultIterableDifferFactory = (function () {
        function DefaultIterableDifferFactory() {
        }
        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
        DefaultIterableDifferFactory.prototype.create = function (cdRefOrTrackBy, trackByFn) {
            return new DefaultIterableDiffer(trackByFn || (cdRefOrTrackBy));
        };
        return DefaultIterableDifferFactory;
    }());
    var trackByIdentity = function (index, item) { return item; };
    var DefaultIterableDiffer = (function () {
        function DefaultIterableDiffer(trackByFn) {
            this._length = 0;
            this._collection = null;
            this._linkedRecords = null;
            this._unlinkedRecords = null;
            this._previousItHead = null;
            this._itHead = null;
            this._itTail = null;
            this._additionsHead = null;
            this._additionsTail = null;
            this._movesHead = null;
            this._movesTail = null;
            this._removalsHead = null;
            this._removalsTail = null;
            this._identityChangesHead = null;
            this._identityChangesTail = null;
            this._trackByFn = trackByFn || trackByIdentity;
        }
        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
            get: function () { return this._collection; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
            get: function () { return this._length; },
            enumerable: true,
            configurable: true
        });
        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
            var record;
            for (record = this._itHead; record !== null; record = record._next) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
            var nextIt = this._itHead;
            var nextRemove = this._removalsHead;
            var addRemoveOffset = 0;
            var moveOffsets = null;
            while (nextIt || nextRemove) {
                var record = !nextRemove ||
                    nextIt && ((nextIt.currentIndex)) <
                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? ((nextIt)) :
                    nextRemove;
                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
                var currentIndex = record.currentIndex;
                if (record === nextRemove) {
                    addRemoveOffset--;
                    nextRemove = nextRemove._nextRemoved;
                }
                else {
                    nextIt = ((nextIt))._next;
                    if (record.previousIndex == null) {
                        addRemoveOffset++;
                    }
                    else {
                        if (!moveOffsets)
                            moveOffsets = [];
                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                        var localCurrentIndex = ((currentIndex)) - addRemoveOffset;
                        if (localMovePreviousIndex != localCurrentIndex) {
                            for (var i = 0; i < localMovePreviousIndex; i++) {
                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                                var index = offset + i;
                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                    moveOffsets[i] = offset + 1;
                                }
                            }
                            var previousIndex = record.previousIndex;
                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                        }
                    }
                }
                if (adjPreviousIndex !== currentIndex) {
                    fn(record, adjPreviousIndex, currentIndex);
                }
            }
        };
        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
            var record;
            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
            var record;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
            var record;
            for (record = this._movesHead; record !== null; record = record._nextMoved) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
            var record;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
            var record;
            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
                fn(record);
            }
        };
        DefaultIterableDiffer.prototype.diff = function (collection) {
            if (collection == null)
                collection = [];
            if (!isListLikeIterable(collection)) {
                throw new Error("Error trying to diff '" + stringify(collection) + "'. Only arrays and iterables are allowed");
            }
            if (this.check(collection)) {
                return this;
            }
            else {
                return null;
            }
        };
        DefaultIterableDiffer.prototype.onDestroy = function () { };
        DefaultIterableDiffer.prototype.check = function (collection) {
            var _this = this;
            this._reset();
            var record = this._itHead;
            var mayBeDirty = false;
            var index;
            var item;
            var itemTrackBy;
            if (Array.isArray(collection)) {
                this._length = collection.length;
                for (var index_1 = 0; index_1 < this._length; index_1++) {
                    item = collection[index_1];
                    itemTrackBy = this._trackByFn(index_1, item);
                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                        record = this._mismatch(record, item, itemTrackBy, index_1);
                        mayBeDirty = true;
                    }
                    else {
                        if (mayBeDirty) {
                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
                        }
                        if (!looseIdentical(record.item, item))
                            this._addIdentityChange(record, item);
                    }
                    record = record._next;
                }
            }
            else {
                index = 0;
                iterateListLike(collection, function (item) {
                    itemTrackBy = _this._trackByFn(index, item);
                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                        record = _this._mismatch(record, item, itemTrackBy, index);
                        mayBeDirty = true;
                    }
                    else {
                        if (mayBeDirty) {
                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
                        }
                        if (!looseIdentical(record.item, item))
                            _this._addIdentityChange(record, item);
                    }
                    record = record._next;
                    index++;
                });
                this._length = index;
            }
            this._truncate(record);
            this._collection = collection;
            return this.isDirty;
        };
        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
            get: function () {
                return this._additionsHead !== null || this._movesHead !== null ||
                    this._removalsHead !== null || this._identityChangesHead !== null;
            },
            enumerable: true,
            configurable: true
        });
        DefaultIterableDiffer.prototype._reset = function () {
            if (this.isDirty) {
                var record = void 0;
                var nextRecord = void 0;
                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                    record.previousIndex = record.currentIndex;
                }
                this._additionsHead = this._additionsTail = null;
                for (record = this._movesHead; record !== null; record = nextRecord) {
                    record.previousIndex = record.currentIndex;
                    nextRecord = record._nextMoved;
                }
                this._movesHead = this._movesTail = null;
                this._removalsHead = this._removalsTail = null;
                this._identityChangesHead = this._identityChangesTail = null;
            }
        };
        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
            var previousRecord;
            if (record === null) {
                previousRecord = ((this._itTail));
            }
            else {
                previousRecord = ((record._prev));
                this._remove(record);
            }
            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
            if (record !== null) {
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._moveAfter(record, previousRecord, index);
            }
            else {
                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
                if (record !== null) {
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                    this._reinsertAfter(record, previousRecord, index);
                }
                else {
                    record =
                        this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
                }
            }
            return record;
        };
        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
            if (reinsertRecord !== null) {
                record = this._reinsertAfter(reinsertRecord, ((record._prev)), index);
            }
            else if (record.currentIndex != index) {
                record.currentIndex = index;
                this._addToMoves(record, index);
            }
            return record;
        };
        DefaultIterableDiffer.prototype._truncate = function (record) {
            while (record !== null) {
                var nextRecord = record._next;
                this._addToRemovals(this._unlink(record));
                record = nextRecord;
            }
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.clear();
            }
            if (this._additionsTail !== null) {
                this._additionsTail._nextAdded = null;
            }
            if (this._movesTail !== null) {
                this._movesTail._nextMoved = null;
            }
            if (this._itTail !== null) {
                this._itTail._next = null;
            }
            if (this._removalsTail !== null) {
                this._removalsTail._nextRemoved = null;
            }
            if (this._identityChangesTail !== null) {
                this._identityChangesTail._nextIdentityChange = null;
            }
        };
        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
            if (this._unlinkedRecords !== null) {
                this._unlinkedRecords.remove(record);
            }
            var prev = record._prevRemoved;
            var next = record._nextRemoved;
            if (prev === null) {
                this._removalsHead = next;
            }
            else {
                prev._nextRemoved = next;
            }
            if (next === null) {
                this._removalsTail = prev;
            }
            else {
                next._prevRemoved = prev;
            }
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        };
        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
            this._unlink(record);
            this._insertAfter(record, prevRecord, index);
            this._addToMoves(record, index);
            return record;
        };
        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
            this._insertAfter(record, prevRecord, index);
            if (this._additionsTail === null) {
                this._additionsTail = this._additionsHead = record;
            }
            else {
                this._additionsTail = this._additionsTail._nextAdded = record;
            }
            return record;
        };
        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
            var next = prevRecord === null ? this._itHead : prevRecord._next;
            record._next = next;
            record._prev = prevRecord;
            if (next === null) {
                this._itTail = record;
            }
            else {
                next._prev = record;
            }
            if (prevRecord === null) {
                this._itHead = record;
            }
            else {
                prevRecord._next = record;
            }
            if (this._linkedRecords === null) {
                this._linkedRecords = new _DuplicateMap();
            }
            this._linkedRecords.put(record);
            record.currentIndex = index;
            return record;
        };
        DefaultIterableDiffer.prototype._remove = function (record) {
            return this._addToRemovals(this._unlink(record));
        };
        DefaultIterableDiffer.prototype._unlink = function (record) {
            if (this._linkedRecords !== null) {
                this._linkedRecords.remove(record);
            }
            var prev = record._prev;
            var next = record._next;
            if (prev === null) {
                this._itHead = next;
            }
            else {
                prev._next = next;
            }
            if (next === null) {
                this._itTail = prev;
            }
            else {
                next._prev = prev;
            }
            return record;
        };
        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
            if (record.previousIndex === toIndex) {
                return record;
            }
            if (this._movesTail === null) {
                this._movesTail = this._movesHead = record;
            }
            else {
                this._movesTail = this._movesTail._nextMoved = record;
            }
            return record;
        };
        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
            if (this._unlinkedRecords === null) {
                this._unlinkedRecords = new _DuplicateMap();
            }
            this._unlinkedRecords.put(record);
            record.currentIndex = null;
            record._nextRemoved = null;
            if (this._removalsTail === null) {
                this._removalsTail = this._removalsHead = record;
                record._prevRemoved = null;
            }
            else {
                record._prevRemoved = this._removalsTail;
                this._removalsTail = this._removalsTail._nextRemoved = record;
            }
            return record;
        };
        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
            record.item = item;
            if (this._identityChangesTail === null) {
                this._identityChangesTail = this._identityChangesHead = record;
            }
            else {
                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
            }
            return record;
        };
        DefaultIterableDiffer.prototype.toString = function () {
            var list = [];
            this.forEachItem(function (record) { return list.push(record); });
            var previous = [];
            this.forEachPreviousItem(function (record) { return previous.push(record); });
            var additions = [];
            this.forEachAddedItem(function (record) { return additions.push(record); });
            var moves = [];
            this.forEachMovedItem(function (record) { return moves.push(record); });
            var removals = [];
            this.forEachRemovedItem(function (record) { return removals.push(record); });
            var identityChanges = [];
            this.forEachIdentityChange(function (record) { return identityChanges.push(record); });
            return 'collection: ' + list.join(', ') + '\n' +
                'previous: ' + previous.join(', ') + '\n' +
                'additions: ' + additions.join(', ') + '\n' +
                'moves: ' + moves.join(', ') + '\n' +
                'removals: ' + removals.join(', ') + '\n' +
                'identityChanges: ' + identityChanges.join(', ') + '\n';
        };
        return DefaultIterableDiffer;
    }());
    var IterableChangeRecord_ = (function () {
        function IterableChangeRecord_(item, trackById) {
            this.item = item;
            this.trackById = trackById;
            this.currentIndex = null;
            this.previousIndex = null;
            this._nextPrevious = null;
            this._prev = null;
            this._next = null;
            this._prevDup = null;
            this._nextDup = null;
            this._prevRemoved = null;
            this._nextRemoved = null;
            this._nextAdded = null;
            this._nextMoved = null;
            this._nextIdentityChange = null;
        }
        IterableChangeRecord_.prototype.toString = function () {
            return this.previousIndex === this.currentIndex ? stringify(this.item) :
                stringify(this.item) + '[' +
                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
        };
        return IterableChangeRecord_;
    }());
    var _DuplicateItemRecordList = (function () {
        function _DuplicateItemRecordList() {
            this._head = null;
            this._tail = null;
        }
        _DuplicateItemRecordList.prototype.add = function (record) {
            if (this._head === null) {
                this._head = this._tail = record;
                record._nextDup = null;
                record._prevDup = null;
            }
            else {
                ((this._tail))._nextDup = record;
                record._prevDup = this._tail;
                record._nextDup = null;
                this._tail = record;
            }
        };
        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
            var record;
            for (record = this._head; record !== null; record = record._nextDup) {
                if ((afterIndex === null || afterIndex < record.currentIndex) &&
                    looseIdentical(record.trackById, trackById)) {
                    return record;
                }
            }
            return null;
        };
        _DuplicateItemRecordList.prototype.remove = function (record) {
            var prev = record._prevDup;
            var next = record._nextDup;
            if (prev === null) {
                this._head = next;
            }
            else {
                prev._nextDup = next;
            }
            if (next === null) {
                this._tail = prev;
            }
            else {
                next._prevDup = prev;
            }
            return this._head === null;
        };
        return _DuplicateItemRecordList;
    }());
    var _DuplicateMap = (function () {
        function _DuplicateMap() {
            this.map = new Map();
        }
        _DuplicateMap.prototype.put = function (record) {
            var key = record.trackById;
            var duplicates = this.map.get(key);
            if (!duplicates) {
                duplicates = new _DuplicateItemRecordList();
                this.map.set(key, duplicates);
            }
            duplicates.add(record);
        };
        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
            var key = trackById;
            var recordList = this.map.get(key);
            return recordList ? recordList.get(trackById, afterIndex) : null;
        };
        _DuplicateMap.prototype.remove = function (record) {
            var key = record.trackById;
            var recordList = ((this.map.get(key)));
            if (recordList.remove(record)) {
                this.map.delete(key);
            }
            return record;
        };
        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
            get: function () { return this.map.size === 0; },
            enumerable: true,
            configurable: true
        });
        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
        return _DuplicateMap;
    }());
    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
        var previousIndex = item.previousIndex;
        if (previousIndex === null)
            return previousIndex;
        var moveOffset = 0;
        if (moveOffsets && previousIndex < moveOffsets.length) {
            moveOffset = moveOffsets[previousIndex];
        }
        return previousIndex + addRemoveOffset + moveOffset;
    }
    var DefaultKeyValueDifferFactory = (function () {
        function DefaultKeyValueDifferFactory() {
        }
        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
        DefaultKeyValueDifferFactory.prototype.create = function (cd) {
            return new DefaultKeyValueDiffer();
        };
        return DefaultKeyValueDifferFactory;
    }());
    var DefaultKeyValueDiffer = (function () {
        function DefaultKeyValueDiffer() {
            this._records = new Map();
            this._mapHead = null;
            this._appendAfter = null;
            this._previousMapHead = null;
            this._changesHead = null;
            this._changesTail = null;
            this._additionsHead = null;
            this._additionsTail = null;
            this._removalsHead = null;
            this._removalsTail = null;
        }
        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
            get: function () {
                return this._additionsHead !== null || this._changesHead !== null ||
                    this._removalsHead !== null;
            },
            enumerable: true,
            configurable: true
        });
        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
            var record;
            for (record = this._mapHead; record !== null; record = record._next) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
            var record;
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
            var record;
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
            var record;
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
            var record;
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                fn(record);
            }
        };
        DefaultKeyValueDiffer.prototype.diff = function (map) {
            if (!map) {
                map = new Map();
            }
            else if (!(map instanceof Map || isJsObject(map))) {
                throw new Error("Error trying to diff '" + stringify(map) + "'. Only maps and objects are allowed");
            }
            return this.check(map) ? this : null;
        };
        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
        DefaultKeyValueDiffer.prototype.check = function (map) {
            var _this = this;
            this._reset();
            var insertBefore = this._mapHead;
            this._appendAfter = null;
            this._forEach(map, function (value, key) {
                if (insertBefore && insertBefore.key === key) {
                    _this._maybeAddToChanges(insertBefore, value);
                    _this._appendAfter = insertBefore;
                    insertBefore = insertBefore._next;
                }
                else {
                    var record = _this._getOrCreateRecordForKey(key, value);
                    insertBefore = _this._insertBeforeOrAppend(insertBefore, record);
                }
            });
            if (insertBefore) {
                if (insertBefore._prev) {
                    insertBefore._prev._next = null;
                }
                this._removalsHead = insertBefore;
                this._removalsTail = insertBefore;
                for (var record = insertBefore; record !== null; record = record._nextRemoved) {
                    if (record === this._mapHead) {
                        this._mapHead = null;
                    }
                    this._records.delete(record.key);
                    record._nextRemoved = record._next;
                    record.previousValue = record.currentValue;
                    record.currentValue = null;
                    record._prev = null;
                    record._next = null;
                }
            }
            return this.isDirty;
        };
        DefaultKeyValueDiffer.prototype._insertBeforeOrAppend = function (before, record) {
            if (before) {
                var prev = before._prev;
                record._next = before;
                record._prev = prev;
                before._prev = record;
                if (prev) {
                    prev._next = record;
                }
                if (before === this._mapHead) {
                    this._mapHead = record;
                }
                this._appendAfter = before;
                return before;
            }
            if (this._appendAfter) {
                this._appendAfter._next = record;
                record._prev = this._appendAfter;
            }
            else {
                this._mapHead = record;
            }
            this._appendAfter = record;
            return null;
        };
        DefaultKeyValueDiffer.prototype._getOrCreateRecordForKey = function (key, value) {
            if (this._records.has(key)) {
                var record_1 = this._records.get(key);
                this._maybeAddToChanges(record_1, value);
                var prev = record_1._prev;
                var next = record_1._next;
                if (prev) {
                    prev._next = next;
                }
                if (next) {
                    next._prev = prev;
                }
                record_1._next = null;
                record_1._prev = null;
                return record_1;
            }
            var record = new KeyValueChangeRecord_(key);
            this._records.set(key, record);
            record.currentValue = value;
            this._addToAdditions(record);
            return record;
        };
        DefaultKeyValueDiffer.prototype._reset = function () {
            if (this.isDirty) {
                var record = void 0;
                this._previousMapHead = this._mapHead;
                for (record = this._previousMapHead; record !== null; record = record._next) {
                    record._nextPrevious = record._next;
                }
                for (record = this._changesHead; record !== null; record = record._nextChanged) {
                    record.previousValue = record.currentValue;
                }
                for (record = this._additionsHead; record != null; record = record._nextAdded) {
                    record.previousValue = record.currentValue;
                }
                this._changesHead = this._changesTail = null;
                this._additionsHead = this._additionsTail = null;
                this._removalsHead = this._removalsTail = null;
            }
        };
        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
            if (!looseIdentical(newValue, record.currentValue)) {
                record.previousValue = record.currentValue;
                record.currentValue = newValue;
                this._addToChanges(record);
            }
        };
        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
            if (this._additionsHead === null) {
                this._additionsHead = this._additionsTail = record;
            }
            else {
                ((this._additionsTail))._nextAdded = record;
                this._additionsTail = record;
            }
        };
        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
            if (this._changesHead === null) {
                this._changesHead = this._changesTail = record;
            }
            else {
                ((this._changesTail))._nextChanged = record;
                this._changesTail = record;
            }
        };
        DefaultKeyValueDiffer.prototype.toString = function () {
            var items = [];
            var previous = [];
            var changes = [];
            var additions = [];
            var removals = [];
            var record;
            for (record = this._mapHead; record !== null; record = record._next) {
                items.push(stringify(record));
            }
            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
                previous.push(stringify(record));
            }
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                changes.push(stringify(record));
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                additions.push(stringify(record));
            }
            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
                removals.push(stringify(record));
            }
            return 'map: ' + items.join(', ') + '\n' +
                'previous: ' + previous.join(', ') + '\n' +
                'additions: ' + additions.join(', ') + '\n' +
                'changes: ' + changes.join(', ') + '\n' +
                'removals: ' + removals.join(', ') + '\n';
        };
        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
            if (obj instanceof Map) {
                obj.forEach(fn);
            }
            else {
                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
            }
        };
        return DefaultKeyValueDiffer;
    }());
    var KeyValueChangeRecord_ = (function () {
        function KeyValueChangeRecord_(key) {
            this.key = key;
            this.previousValue = null;
            this.currentValue = null;
            this._nextPrevious = null;
            this._next = null;
            this._prev = null;
            this._nextAdded = null;
            this._nextRemoved = null;
            this._nextChanged = null;
        }
        KeyValueChangeRecord_.prototype.toString = function () {
            return looseIdentical(this.previousValue, this.currentValue) ?
                stringify(this.key) :
                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
                    stringify(this.currentValue) + ']');
        };
        return KeyValueChangeRecord_;
    }());
    var IterableDiffers = (function () {
        function IterableDiffers(factories) {
            this.factories = factories;
        }
        IterableDiffers.create = function (factories, parent) {
            if (parent != null) {
                var copied = parent.factories.slice();
                factories = factories.concat(copied);
                return new IterableDiffers(factories);
            }
            else {
                return new IterableDiffers(factories);
            }
        };
        IterableDiffers.extend = function (factories) {
            return {
                provide: IterableDiffers,
                useFactory: function (parent) {
                    if (!parent) {
                        throw new Error('Cannot extend IterableDiffers without a parent injector');
                    }
                    return IterableDiffers.create(factories, parent);
                },
                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
            };
        };
        IterableDiffers.prototype.find = function (iterable) {
            var factory = this.factories.find(function (f) { return f.supports(iterable); });
            if (factory != null) {
                return factory;
            }
            else {
                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging$1(iterable) + "'");
            }
        };
        return IterableDiffers;
    }());
    function getTypeNameForDebugging$1(type) {
        return type['name'] || typeof type;
    }
    var KeyValueDiffers = (function () {
        function KeyValueDiffers(factories) {
            this.factories = factories;
        }
        KeyValueDiffers.create = function (factories, parent) {
            if (parent) {
                var copied = parent.factories.slice();
                factories = factories.concat(copied);
            }
            return new KeyValueDiffers(factories);
        };
        KeyValueDiffers.extend = function (factories) {
            return {
                provide: KeyValueDiffers,
                useFactory: function (parent) {
                    if (!parent) {
                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                    }
                    return KeyValueDiffers.create(factories, parent);
                },
                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
            };
        };
        KeyValueDiffers.prototype.find = function (kv) {
            var factory = this.factories.find(function (f) { return f.supports(kv); });
            if (factory) {
                return factory;
            }
            throw new Error("Cannot find a differ supporting object '" + kv + "'");
        };
        return KeyValueDiffers;
    }());
    var keyValDiff = [new DefaultKeyValueDifferFactory()];
    var iterableDiff = [new DefaultIterableDifferFactory()];
    var defaultIterableDiffers = new IterableDiffers(iterableDiff);
    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
    function _reflector() {
        return reflector;
    }
    var _CORE_PLATFORM_PROVIDERS = [
        { provide: PLATFORM_ID, useValue: 'unknown' },
        PlatformRef_,
        { provide: PlatformRef, useExisting: PlatformRef_ },
        { provide: Reflector, useFactory: _reflector, deps: [] },
        { provide: ReflectorReader, useExisting: Reflector },
        TestabilityRegistry,
        Console,
    ];
    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);
    var LOCALE_ID = new InjectionToken('LocaleId');
    var TRANSLATIONS = new InjectionToken('Translations');
    var TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
    var SecurityContext = {};
    SecurityContext.NONE = 0;
    SecurityContext.HTML = 1;
    SecurityContext.STYLE = 2;
    SecurityContext.SCRIPT = 3;
    SecurityContext.URL = 4;
    SecurityContext.RESOURCE_URL = 5;
    SecurityContext[SecurityContext.NONE] = "NONE";
    SecurityContext[SecurityContext.HTML] = "HTML";
    SecurityContext[SecurityContext.STYLE] = "STYLE";
    SecurityContext[SecurityContext.SCRIPT] = "SCRIPT";
    SecurityContext[SecurityContext.URL] = "URL";
    SecurityContext[SecurityContext.RESOURCE_URL] = "RESOURCE_URL";
    var Sanitizer = (function () {
        function Sanitizer() {
        }
        Sanitizer.prototype.sanitize = function (context, value) { };
        return Sanitizer;
    }());
    function asTextData(view, index) {
        return (view.nodes[index]);
    }
    function asElementData(view, index) {
        return (view.nodes[index]);
    }
    function asProviderData(view, index) {
        return (view.nodes[index]);
    }
    function asPureExpressionData(view, index) {
        return (view.nodes[index]);
    }
    function asQueryList(view, index) {
        return (view.nodes[index]);
    }
    var Services = {
        setCurrentNode: ((undefined)),
        createRootView: ((undefined)),
        createEmbeddedView: ((undefined)),
        checkAndUpdateView: ((undefined)),
        checkNoChangesView: ((undefined)),
        destroyView: ((undefined)),
        resolveDep: ((undefined)),
        createDebugContext: ((undefined)),
        handleEvent: ((undefined)),
        updateDirectives: ((undefined)),
        updateRenderer: ((undefined)),
        dirtyParentQueries: ((undefined)),
    };
    function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
        var msg = "ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
        if (isFirstCheck) {
            msg +=
                " It seems like the view has been created after its parent and its children have been dirty checked." +
                    " Has it been created in a change detection hook ?";
        }
        return viewDebugError(msg, context);
    }
    function viewWrappedDebugError(err, context) {
        if (!(err instanceof Error)) {
            err = new Error(err.toString());
        }
        _addDebugContext(err, context);
        return err;
    }
    function viewDebugError(msg, context) {
        var err = new Error(msg);
        _addDebugContext(err, context);
        return err;
    }
    function _addDebugContext(err, context) {
        ((err))[ERROR_DEBUG_CONTEXT] = context;
        ((err))[ERROR_LOGGER] = context.logError.bind(context);
    }
    function isViewDebugError(err) {
        return !!getDebugContext(err);
    }
    function viewDestroyedError(action) {
        return new Error("ViewDestroyedError: Attempt to use a destroyed view: " + action);
    }
    var NOOP = function () { };
    var _tokenKeyCache = new Map();
    function tokenKey(token) {
        var key = _tokenKeyCache.get(token);
        if (!key) {
            key = stringify(token) + '_' + _tokenKeyCache.size;
            _tokenKeyCache.set(token, key);
        }
        return key;
    }
    var UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
    var EMPTY_RENDERER_TYPE_ID = '$$empty';
    function createRendererType2(values) {
        return {
            id: UNDEFINED_RENDERER_TYPE_ID,
            styles: values.styles,
            encapsulation: values.encapsulation,
            data: values.data
        };
    }
    var _renderCompCount = 0;
    function resolveRendererType2(type) {
        if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
            var isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation.None) ||
                type.styles.length || Object.keys(type.data).length);
            if (isFilled) {
                type.id = "c" + _renderCompCount++;
            }
            else {
                type.id = EMPTY_RENDERER_TYPE_ID;
            }
        }
        if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
            type = null;
        }
        return type || null;
    }
    function checkBinding(view, def, bindingIdx, value) {
        var oldValues = view.oldValues;
        if ((view.state & 1) ||
            !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
            return true;
        }
        return false;
    }
    function checkAndUpdateBinding(view, def, bindingIdx, value) {
        if (checkBinding(view, def, bindingIdx, value)) {
            view.oldValues[def.bindingIndex + bindingIdx] = value;
            return true;
        }
        return false;
    }
    function checkBindingNoChanges(view, def, bindingIdx, value) {
        var oldValue = view.oldValues[def.bindingIndex + bindingIdx];
        if ((view.state & 1) || !devModeEqual(oldValue, value)) {
            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.index), oldValue, value, (view.state & 1) !== 0);
        }
    }
    function markParentViewsForCheck(view) {
        var currView = view;
        while (currView) {
            if (currView.def.flags & 2) {
                currView.state |= 2;
            }
            currView = currView.viewContainerParent || currView.parent;
        }
    }
    function dispatchEvent(view, nodeIndex, eventName, event) {
        var nodeDef = view.def.nodes[nodeIndex];
        var startView = nodeDef.flags & 16777216 ? asElementData(view, nodeIndex).componentView : view;
        markParentViewsForCheck(startView);
        return Services.handleEvent(view, nodeIndex, eventName, event);
    }
    function declaredViewContainer(view) {
        if (view.parent) {
            var parentView = view.parent;
            return asElementData(parentView, ((view.parentNodeDef)).index);
        }
        return null;
    }
    function viewParentEl(view) {
        var parentView = view.parent;
        if (parentView) {
            return ((view.parentNodeDef)).parent;
        }
        else {
            return null;
        }
    }
    function renderNode(view, def) {
        switch (def.flags & 100673535) {
            case 1:
                return asElementData(view, def.index).renderElement;
            case 2:
                return asTextData(view, def.index).renderText;
        }
    }
    function elementEventFullName(target, name) {
        return target ? target + ":" + name : name;
    }
    function isComponentView(view) {
        return !!view.parent && !!(((view.parentNodeDef)).flags & 16384);
    }
    function isEmbeddedView(view) {
        return !!view.parent && !(((view.parentNodeDef)).flags & 16384);
    }
    function filterQueryId(queryId) {
        return 1 << (queryId % 32);
    }
    function splitMatchedQueriesDsl(matchedQueriesDsl) {
        var matchedQueries = {};
        var matchedQueryIds = 0;
        var references = {};
        if (matchedQueriesDsl) {
            matchedQueriesDsl.forEach(function (_a) {
                var queryId = _a[0], valueType = _a[1];
                if (typeof queryId === 'number') {
                    matchedQueries[queryId] = valueType;
                    matchedQueryIds |= filterQueryId(queryId);
                }
                else {
                    references[queryId] = valueType;
                }
            });
        }
        return { matchedQueries: matchedQueries, references: references, matchedQueryIds: matchedQueryIds };
    }
    function getParentRenderElement(view, renderHost, def) {
        var renderParent = def.renderParent;
        if (renderParent) {
            if ((renderParent.flags & 1) === 0 ||
                (renderParent.flags & 16777216) === 0 ||
                (((renderParent.element)).componentRendererType && ((((renderParent.element)).componentRendererType)).encapsulation ===
                    ViewEncapsulation.Native)) {
                return asElementData(view, ((def.renderParent)).index).renderElement;
            }
        }
        else {
            return renderHost;
        }
    }
    var VIEW_DEFINITION_CACHE = new WeakMap();
    function resolveViewDefinition(factory) {
        var value = ((VIEW_DEFINITION_CACHE.get(factory)));
        if (!value) {
            value = factory(function () { return NOOP; });
            value.factory = factory;
            VIEW_DEFINITION_CACHE.set(factory, value);
        }
        return value;
    }
    function rootRenderNodes(view) {
        var renderNodes = [];
        visitRootRenderNodes(view, 0, undefined, undefined, renderNodes);
        return renderNodes;
    }
    function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
        if (action === 3) {
            parentNode = view.renderer.parentNode(renderNode(view, ((view.def.lastRenderRootNode))));
        }
        visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
    }
    function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
        for (var i = startIndex; i <= endIndex; i++) {
            var nodeDef = view.def.nodes[i];
            if (nodeDef.flags & (1 | 2 | 4)) {
                visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
            }
            i += nodeDef.childCount;
        }
    }
    function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
        var compView = view;
        while (compView && !isComponentView(compView)) {
            compView = compView.parent;
        }
        var hostView = ((compView)).parent;
        var hostElDef = viewParentEl(((compView)));
        var startIndex = ((hostElDef)).index + 1;
        var endIndex = ((hostElDef)).index + ((hostElDef)).childCount;
        for (var i = startIndex; i <= endIndex; i++) {
            var nodeDef = ((hostView)).def.nodes[i];
            if (nodeDef.ngContentIndex === ngContentIndex) {
                visitRenderNode(((hostView)), nodeDef, action, parentNode, nextSibling, target);
            }
            i += nodeDef.childCount;
        }
        if (!((hostView)).parent) {
            var projectedNodes = view.root.projectableNodes[ngContentIndex];
            if (projectedNodes) {
                for (var i = 0; i < projectedNodes.length; i++) {
                    execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
                }
            }
        }
    }
    function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
        if (nodeDef.flags & 4) {
            visitProjectedRenderNodes(view, ((nodeDef.ngContent)).index, action, parentNode, nextSibling, target);
        }
        else {
            var rn = renderNode(view, nodeDef);
            if (action === 3 && (nodeDef.flags & 16777216) &&
                (nodeDef.bindingFlags & 48)) {
                if (nodeDef.bindingFlags & (16)) {
                    execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
                }
                if (nodeDef.bindingFlags & (32)) {
                    var compView = asElementData(view, nodeDef.index).componentView;
                    execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
                }
            }
            else {
                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }
            if (nodeDef.flags & 8388608) {
                var embeddedViews = ((asElementData(view, nodeDef.index).viewContainer))._embeddedViews;
                for (var k = 0; k < embeddedViews.length; k++) {
                    visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
                }
            }
            if (nodeDef.flags & 1 && !((nodeDef.element)).name) {
                visitSiblingRenderNodes(view, action, nodeDef.index + 1, nodeDef.index + nodeDef.childCount, parentNode, nextSibling, target);
            }
        }
    }
    function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
        var renderer = view.renderer;
        switch (action) {
            case 1:
                renderer.appendChild(parentNode, renderNode);
                break;
            case 2:
                renderer.insertBefore(parentNode, renderNode, nextSibling);
                break;
            case 3:
                renderer.removeChild(parentNode, renderNode);
                break;
            case 0:
                ((target)).push(renderNode);
                break;
        }
    }
    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
    function splitNamespace(name) {
        if (name[0] === ':') {
            var match = ((name.match(NS_PREFIX_RE)));
            return [match[1], match[2]];
        }
        return ['', name];
    }
    function calcBindingFlags(bindings) {
        var flags = 0;
        for (var i = 0; i < bindings.length; i++) {
            flags |= bindings[i].flags;
        }
        return flags;
    }
    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
        switch (valueCount) {
            case 1:
                return c0 + _toStringWithNull(a1) + c1;
            case 2:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
            case 3:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3;
            case 4:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3 + _toStringWithNull(a4) + c4;
            case 5:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
            case 6:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
            case 7:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                    c6 + _toStringWithNull(a7) + c7;
            case 8:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
            case 9:
                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
            default:
                throw new Error("Does not support more than 9 expressions");
        }
    }
    function _toStringWithNull(v) {
        return v != null ? v.toString() : '';
    }
    function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
        flags |= 1;
        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
        var template = templateFactory ? resolveViewDefinition(templateFactory) : null;
        return {
            index: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
            bindings: [],
            bindingFlags: 0,
            outputs: [],
            element: {
                ns: null,
                name: null,
                attrs: null, template: template,
                componentProvider: null,
                componentView: null,
                componentRendererType: null,
                publicProviders: null,
                allProviders: null,
                handleEvent: handleEvent || NOOP
            },
            provider: null,
            text: null,
            query: null,
            ngContent: null
        };
    }
    function elementDef(flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs, bindings, outputs, handleEvent, componentView, componentRendererType) {
        if (fixedAttrs === void 0) {
            fixedAttrs = [];
        }
        if (!handleEvent) {
            handleEvent = NOOP;
        }
        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
        var ns = ((null));
        var name = ((null));
        if (namespaceAndName) {
            _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
        }
        bindings = bindings || [];
        var bindingDefs = new Array(bindings.length);
        for (var i = 0; i < bindings.length; i++) {
            var _c = bindings[i], bindingFlags = _c[0], namespaceAndName_1 = _c[1], suffixOrSecurityContext = _c[2];
            var _d = splitNamespace(namespaceAndName_1), ns_1 = _d[0], name_1 = _d[1];
            var securityContext = ((undefined));
            var suffix = ((undefined));
            switch (bindingFlags & 15) {
                case 4:
                    suffix = (suffixOrSecurityContext);
                    break;
                case 1:
                case 8:
                    securityContext = (suffixOrSecurityContext);
                    break;
            }
            bindingDefs[i] =
                { flags: bindingFlags, ns: ns_1, name: name_1, nonMinifiedName: name_1, securityContext: securityContext, suffix: suffix };
        }
        outputs = outputs || [];
        var outputDefs = new Array(outputs.length);
        for (var i = 0; i < outputs.length; i++) {
            var _e = outputs[i], target = _e[0], eventName = _e[1];
            outputDefs[i] = {
                type: 0,
                target: (target), eventName: eventName,
                propName: null
            };
        }
        fixedAttrs = fixedAttrs || [];
        var attrs = (fixedAttrs.map(function (_a) {
            var namespaceAndName = _a[0], value = _a[1];
            var _b = splitNamespace(namespaceAndName), ns = _b[0], name = _b[1];
            return [ns, name, value];
        }));
        componentRendererType = resolveRendererType2(componentRendererType);
        if (componentView) {
            flags |= 16777216;
        }
        flags |= 1;
        return {
            index: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references, ngContentIndex: ngContentIndex, childCount: childCount,
            bindings: bindingDefs,
            bindingFlags: calcBindingFlags(bindingDefs),
            outputs: outputDefs,
            element: {
                ns: ns,
                name: name,
                attrs: attrs,
                template: null,
                componentProvider: null,
                componentView: componentView || null,
                componentRendererType: componentRendererType,
                publicProviders: null,
                allProviders: null,
                handleEvent: handleEvent || NOOP,
            },
            provider: null,
            text: null,
            query: null,
            ngContent: null
        };
        var _b;
    }
    function createElement(view, renderHost, def) {
        var elDef = ((def.element));
        var rootSelectorOrNode = view.root.selectorOrNode;
        var renderer = view.renderer;
        var el;
        if (view.parent || !rootSelectorOrNode) {
            if (elDef.name) {
                el = renderer.createElement(elDef.name, elDef.ns);
            }
            else {
                el = renderer.createComment('');
            }
            var parentEl = getParentRenderElement(view, renderHost, def);
            if (parentEl) {
                renderer.appendChild(parentEl, el);
            }
        }
        else {
            el = renderer.selectRootElement(rootSelectorOrNode);
        }
        if (elDef.attrs) {
            for (var i = 0; i < elDef.attrs.length; i++) {
                var _a = elDef.attrs[i], ns = _a[0], name = _a[1], value = _a[2];
                renderer.setAttribute(el, name, value, ns);
            }
        }
        return el;
    }
    function listenToElementOutputs(view, compView, def, el) {
        for (var i = 0; i < def.outputs.length; i++) {
            var output = def.outputs[i];
            var handleEventClosure = renderEventHandlerClosure(view, def.index, elementEventFullName(output.target, output.eventName));
            var listenTarget = output.target;
            var listenerView = view;
            if (output.target === 'component') {
                listenTarget = null;
                listenerView = compView;
            }
            var disposable = (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure));
            ((view.disposables))[def.outputIndex + i] = disposable;
        }
    }
    function renderEventHandlerClosure(view, index, eventName) {
        return function (event) { return dispatchEvent(view, index, eventName, event); };
    }
    function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindLen = def.bindings.length;
        var changed = false;
        if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
            changed = true;
        if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
            changed = true;
        if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
            changed = true;
        if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
            changed = true;
        if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
            changed = true;
        if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
            changed = true;
        if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
            changed = true;
        if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
            changed = true;
        if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
            changed = true;
        if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
            changed = true;
        return changed;
    }
    function checkAndUpdateElementDynamic(view, def, values) {
        var changed = false;
        for (var i = 0; i < values.length; i++) {
            if (checkAndUpdateElementValue(view, def, i, values[i]))
                changed = true;
        }
        return changed;
    }
    function checkAndUpdateElementValue(view, def, bindingIdx, value) {
        if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
            return false;
        }
        var binding = def.bindings[bindingIdx];
        var elData = asElementData(view, def.index);
        var renderNode$$1 = elData.renderElement;
        var name = ((binding.name));
        switch (binding.flags & 15) {
            case 1:
                setElementAttribute(view, binding, renderNode$$1, binding.ns, name, value);
                break;
            case 2:
                setElementClass(view, renderNode$$1, name, value);
                break;
            case 4:
                setElementStyle(view, binding, renderNode$$1, name, value);
                break;
            case 8:
                var bindView = (def.flags & 16777216 &&
                    binding.flags & 32) ?
                    elData.componentView :
                    view;
                setElementProperty(bindView, binding, renderNode$$1, name, value);
                break;
        }
        return true;
    }
    function setElementAttribute(view, binding, renderNode$$1, ns, name, value) {
        var securityContext = binding.securityContext;
        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        renderValue = renderValue != null ? renderValue.toString() : null;
        var renderer = view.renderer;
        if (value != null) {
            renderer.setAttribute(renderNode$$1, name, renderValue, ns);
        }
        else {
            renderer.removeAttribute(renderNode$$1, name, ns);
        }
    }
    function setElementClass(view, renderNode$$1, name, value) {
        var renderer = view.renderer;
        if (value) {
            renderer.addClass(renderNode$$1, name);
        }
        else {
            renderer.removeClass(renderNode$$1, name);
        }
    }
    function setElementStyle(view, binding, renderNode$$1, name, value) {
        var renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, value);
        if (renderValue != null) {
            renderValue = renderValue.toString();
            var unit = binding.suffix;
            if (unit != null) {
                renderValue = renderValue + unit;
            }
        }
        else {
            renderValue = null;
        }
        var renderer = view.renderer;
        if (renderValue != null) {
            renderer.setStyle(renderNode$$1, name, renderValue);
        }
        else {
            renderer.removeStyle(renderNode$$1, name);
        }
    }
    function setElementProperty(view, binding, renderNode$$1, name, value) {
        var securityContext = binding.securityContext;
        var renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
        view.renderer.setProperty(renderNode$$1, name, renderValue);
    }
    function ngContentDef(ngContentIndex, index) {
        return {
            index: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            flags: 4,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0,
            matchedQueries: {},
            matchedQueryIds: 0,
            references: {}, ngContentIndex: ngContentIndex,
            childCount: 0,
            bindings: [],
            bindingFlags: 0,
            outputs: [],
            element: null,
            provider: null,
            text: null,
            query: null,
            ngContent: { index: index }
        };
    }
    function appendNgContent(view, renderHost, def) {
        var parentEl = getParentRenderElement(view, renderHost, def);
        if (!parentEl) {
            return;
        }
        var ngContentIndex = ((def.ngContent)).index;
        visitProjectedRenderNodes(view, ngContentIndex, 1, parentEl, null, undefined);
    }
    function attachEmbeddedView(parentView, elementData, viewIndex, view) {
        var embeddedViews = ((elementData.viewContainer))._embeddedViews;
        if (viewIndex === null || viewIndex === undefined) {
            viewIndex = embeddedViews.length;
        }
        view.viewContainerParent = parentView;
        addToArray(embeddedViews, ((viewIndex)), view);
        var dvcElementData = declaredViewContainer(view);
        if (dvcElementData && dvcElementData !== elementData) {
            var projectedViews = dvcElementData.template._projectedViews;
            if (!projectedViews) {
                projectedViews = dvcElementData.template._projectedViews = [];
            }
            projectedViews.push(view);
        }
        Services.dirtyParentQueries(view);
        var prevView = ((viewIndex)) > 0 ? embeddedViews[((viewIndex)) - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
    }
    function detachEmbeddedView(elementData, viewIndex) {
        var embeddedViews = ((elementData.viewContainer))._embeddedViews;
        if (viewIndex == null || viewIndex >= embeddedViews.length) {
            viewIndex = embeddedViews.length - 1;
        }
        if (viewIndex < 0) {
            return null;
        }
        var view = embeddedViews[viewIndex];
        view.viewContainerParent = null;
        removeFromArray(embeddedViews, viewIndex);
        var dvcElementData = declaredViewContainer(view);
        if (dvcElementData && dvcElementData !== elementData) {
            var projectedViews = dvcElementData.template._projectedViews;
            removeFromArray(projectedViews, projectedViews.indexOf(view));
        }
        Services.dirtyParentQueries(view);
        renderDetachView(view);
        return view;
    }
    function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
        var embeddedViews = ((elementData.viewContainer))._embeddedViews;
        var view = embeddedViews[oldViewIndex];
        removeFromArray(embeddedViews, oldViewIndex);
        if (newViewIndex == null) {
            newViewIndex = embeddedViews.length;
        }
        addToArray(embeddedViews, newViewIndex, view);
        Services.dirtyParentQueries(view);
        renderDetachView(view);
        var prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
        renderAttachEmbeddedView(elementData, prevView, view);
        return view;
    }
    function renderAttachEmbeddedView(elementData, prevView, view) {
        var prevRenderNode = prevView ? renderNode(prevView, ((prevView.def.lastRenderRootNode))) :
            elementData.renderElement;
        var parentNode = view.renderer.parentNode(prevRenderNode);
        var nextSibling = view.renderer.nextSibling(prevRenderNode);
        visitRootRenderNodes(view, 2, parentNode, nextSibling, undefined);
    }
    function renderDetachView(view) {
        visitRootRenderNodes(view, 3, null, null, undefined);
    }
    function addToArray(arr, index, value) {
        if (index >= arr.length) {
            arr.push(value);
        }
        else {
            arr.splice(index, 0, value);
        }
    }
    function removeFromArray(arr, index) {
        if (index >= arr.length - 1) {
            arr.pop();
        }
        else {
            arr.splice(index, 1);
        }
    }
    var EMPTY_CONTEXT = new Object();
    function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
        return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
    }
    var ComponentFactory_ = (function (_super) {
        __extends$2(ComponentFactory_, _super);
        function ComponentFactory_(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
            var _this = _super.call(this) || this;
            _this.selector = selector;
            _this.componentType = componentType;
            _this._inputs = _inputs;
            _this._outputs = _outputs;
            _this.ngContentSelectors = ngContentSelectors;
            _this.viewDefFactory = viewDefFactory;
            return _this;
        }
        Object.defineProperty(ComponentFactory_.prototype, "inputs", {
            get: function () {
                var inputsArr = [];
                for (var propName in this._inputs) {
                    var templateName = this._inputs[propName];
                    inputsArr.push({ propName: propName, templateName: templateName });
                }
                return inputsArr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentFactory_.prototype, "outputs", {
            get: function () {
                var outputsArr = [];
                for (var propName in this._outputs) {
                    var templateName = this._outputs[propName];
                    outputsArr.push({ propName: propName, templateName: templateName });
                }
                return outputsArr;
            },
            enumerable: true,
            configurable: true
        });
        ComponentFactory_.prototype.create = function (injector, projectableNodes, rootSelectorOrNode, ngModule) {
            if (!ngModule) {
                throw new Error('ngModule should be provided');
            }
            var viewDef = resolveViewDefinition(this.viewDefFactory);
            var componentNodeIndex = ((((viewDef.nodes[0].element)).componentProvider)).index;
            var view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
            var component = asProviderData(view, componentNodeIndex).instance;
            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION$2.full);
            return new ComponentRef_(view, new ViewRef_(view), component);
        };
        return ComponentFactory_;
    }(ComponentFactory));
    var ComponentRef_ = (function (_super) {
        __extends$2(ComponentRef_, _super);
        function ComponentRef_(_view, _viewRef, _component) {
            var _this = _super.call(this) || this;
            _this._view = _view;
            _this._viewRef = _viewRef;
            _this._component = _component;
            _this._elDef = _this._view.def.nodes[0];
            return _this;
        }
        Object.defineProperty(ComponentRef_.prototype, "location", {
            get: function () {
                return new ElementRef(asElementData(this._view, this._elDef.index).renderElement);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "injector", {
            get: function () { return new Injector_(this._view, this._elDef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "instance", {
            get: function () { return this._component; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "hostView", {
            get: function () { return this._viewRef; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
            get: function () { return this._viewRef; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ComponentRef_.prototype, "componentType", {
            get: function () { return (this._component.constructor); },
            enumerable: true,
            configurable: true
        });
        ComponentRef_.prototype.destroy = function () { this._viewRef.destroy(); };
        ComponentRef_.prototype.onDestroy = function (callback) { this._viewRef.onDestroy(callback); };
        return ComponentRef_;
    }(ComponentRef));
    function createViewContainerData(view, elDef, elData) {
        return new ViewContainerRef_(view, elDef, elData);
    }
    var ViewContainerRef_ = (function () {
        function ViewContainerRef_(_view, _elDef, _data) {
            this._view = _view;
            this._elDef = _elDef;
            this._data = _data;
            this._embeddedViews = [];
        }
        Object.defineProperty(ViewContainerRef_.prototype, "element", {
            get: function () { return new ElementRef(this._data.renderElement); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
            get: function () { return new Injector_(this._view, this._elDef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
            get: function () {
                var view = this._view;
                var elDef = this._elDef.parent;
                while (!elDef && view) {
                    elDef = viewParentEl(view);
                    view = ((view.parent));
                }
                return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
            },
            enumerable: true,
            configurable: true
        });
        ViewContainerRef_.prototype.clear = function () {
            var len = this._embeddedViews.length;
            for (var i = len - 1; i >= 0; i--) {
                var view = ((detachEmbeddedView(this._data, i)));
                Services.destroyView(view);
            }
        };
        ViewContainerRef_.prototype.get = function (index) {
            var view = this._embeddedViews[index];
            if (view) {
                var ref = new ViewRef_(view);
                ref.attachToViewContainerRef(this);
                return ref;
            }
            return null;
        };
        Object.defineProperty(ViewContainerRef_.prototype, "length", {
            get: function () { return this._embeddedViews.length; },
            enumerable: true,
            configurable: true
        });
        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
            var viewRef = templateRef.createEmbeddedView(context || ({}));
            this.insert(viewRef, index);
            return viewRef;
        };
        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes, ngModuleRef) {
            var contextInjector = injector || this.parentInjector;
            if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
                ngModuleRef = contextInjector.get(NgModuleRef);
            }
            var componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
            this.insert(componentRef.hostView, index);
            return componentRef;
        };
        ViewContainerRef_.prototype.insert = function (viewRef, index) {
            var viewRef_ = (viewRef);
            var viewData = viewRef_._view;
            attachEmbeddedView(this._view, this._data, index, viewData);
            viewRef_.attachToViewContainerRef(this);
            return viewRef;
        };
        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
            var previousIndex = this._embeddedViews.indexOf(viewRef._view);
            moveEmbeddedView(this._data, previousIndex, currentIndex);
            return viewRef;
        };
        ViewContainerRef_.prototype.indexOf = function (viewRef) {
            return this._embeddedViews.indexOf(((viewRef))._view);
        };
        ViewContainerRef_.prototype.remove = function (index) {
            var viewData = detachEmbeddedView(this._data, index);
            if (viewData) {
                Services.destroyView(viewData);
            }
        };
        ViewContainerRef_.prototype.detach = function (index) {
            var view = detachEmbeddedView(this._data, index);
            return view ? new ViewRef_(view) : null;
        };
        return ViewContainerRef_;
    }());
    function createChangeDetectorRef(view) {
        return new ViewRef_(view);
    }
    var ViewRef_ = (function () {
        function ViewRef_(_view) {
            this._view = _view;
            this._viewContainerRef = null;
            this._appRef = null;
        }
        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
            get: function () { return rootRenderNodes(this._view); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "context", {
            get: function () { return this._view.context; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ViewRef_.prototype, "destroyed", {
            get: function () { return (this._view.state & 8) !== 0; },
            enumerable: true,
            configurable: true
        });
        ViewRef_.prototype.markForCheck = function () { markParentViewsForCheck(this._view); };
        ViewRef_.prototype.detach = function () { this._view.state &= ~2; };
        ViewRef_.prototype.detectChanges = function () { Services.checkAndUpdateView(this._view); };
        ViewRef_.prototype.checkNoChanges = function () { Services.checkNoChangesView(this._view); };
        ViewRef_.prototype.reattach = function () { this._view.state |= 2; };
        ViewRef_.prototype.onDestroy = function (callback) {
            if (!this._view.disposables) {
                this._view.disposables = [];
            }
            this._view.disposables.push((callback));
        };
        ViewRef_.prototype.destroy = function () {
            if (this._appRef) {
                this._appRef.detachView(this);
            }
            else if (this._viewContainerRef) {
                this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
            }
            Services.destroyView(this._view);
        };
        ViewRef_.prototype.detachFromAppRef = function () {
            this._appRef = null;
            renderDetachView(this._view);
            Services.dirtyParentQueries(this._view);
        };
        ViewRef_.prototype.attachToAppRef = function (appRef) {
            if (this._viewContainerRef) {
                throw new Error('This view is already attached to a ViewContainer!');
            }
            this._appRef = appRef;
        };
        ViewRef_.prototype.attachToViewContainerRef = function (vcRef) {
            if (this._appRef) {
                throw new Error('This view is already attached directly to the ApplicationRef!');
            }
            this._viewContainerRef = vcRef;
        };
        return ViewRef_;
    }());
    function createTemplateData(view, def) {
        return new TemplateRef_(view, def);
    }
    var TemplateRef_ = (function (_super) {
        __extends$2(TemplateRef_, _super);
        function TemplateRef_(_parentView, _def) {
            var _this = _super.call(this) || this;
            _this._parentView = _parentView;
            _this._def = _def;
            return _this;
        }
        TemplateRef_.prototype.createEmbeddedView = function (context) {
            return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, context));
        };
        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
            get: function () {
                return new ElementRef(asElementData(this._parentView, this._def.index).renderElement);
            },
            enumerable: true,
            configurable: true
        });
        return TemplateRef_;
    }(TemplateRef));
    function createInjector(view, elDef) {
        return new Injector_(view, elDef);
    }
    var Injector_ = (function () {
        function Injector_(view, elDef) {
            this.view = view;
            this.elDef = elDef;
        }
        Injector_.prototype.get = function (token, notFoundValue) {
            if (notFoundValue === void 0) {
                notFoundValue = Injector.THROW_IF_NOT_FOUND;
            }
            var allowPrivateServices = this.elDef ? (this.elDef.flags & 16777216) !== 0 : false;
            return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0, token: token, tokenKey: tokenKey(token) }, notFoundValue);
        };
        return Injector_;
    }());
    function nodeValue(view, index) {
        var def = view.def.nodes[index];
        if (def.flags & 1) {
            var elData = asElementData(view, def.index);
            return ((def.element)).template ? elData.template : elData.renderElement;
        }
        else if (def.flags & 2) {
            return asTextData(view, def.index).renderText;
        }
        else if (def.flags & (10112 | 8)) {
            return asProviderData(view, def.index).instance;
        }
        throw new Error("Illegal state: read nodeValue for node index " + index);
    }
    function createRendererV1(view) {
        return new RendererAdapter(view.renderer);
    }
    var RendererAdapter = (function () {
        function RendererAdapter(delegate) {
            this.delegate = delegate;
        }
        RendererAdapter.prototype.selectRootElement = function (selectorOrNode) {
            return this.delegate.selectRootElement(selectorOrNode);
        };
        RendererAdapter.prototype.createElement = function (parent, namespaceAndName) {
            var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
            var el = this.delegate.createElement(name, ns);
            if (parent) {
                this.delegate.appendChild(parent, el);
            }
            return el;
        };
        RendererAdapter.prototype.createViewRoot = function (hostElement) { return hostElement; };
        RendererAdapter.prototype.createTemplateAnchor = function (parentElement) {
            var comment = this.delegate.createComment('');
            if (parentElement) {
                this.delegate.appendChild(parentElement, comment);
            }
            return comment;
        };
        RendererAdapter.prototype.createText = function (parentElement, value) {
            var node = this.delegate.createText(value);
            if (parentElement) {
                this.delegate.appendChild(parentElement, node);
            }
            return node;
        };
        RendererAdapter.prototype.projectNodes = function (parentElement, nodes) {
            for (var i = 0; i < nodes.length; i++) {
                this.delegate.appendChild(parentElement, nodes[i]);
            }
        };
        RendererAdapter.prototype.attachViewAfter = function (node, viewRootNodes) {
            var parentElement = this.delegate.parentNode(node);
            var nextSibling = this.delegate.nextSibling(node);
            for (var i = 0; i < viewRootNodes.length; i++) {
                this.delegate.insertBefore(parentElement, viewRootNodes[i], nextSibling);
            }
        };
        RendererAdapter.prototype.detachView = function (viewRootNodes) {
            for (var i = 0; i < viewRootNodes.length; i++) {
                var node = viewRootNodes[i];
                var parentElement = this.delegate.parentNode(node);
                this.delegate.removeChild(parentElement, node);
            }
        };
        RendererAdapter.prototype.destroyView = function (hostElement, viewAllNodes) {
            for (var i = 0; i < viewAllNodes.length; i++) {
                ((this.delegate.destroyNode))(viewAllNodes[i]);
            }
        };
        RendererAdapter.prototype.listen = function (renderElement, name, callback) {
            return this.delegate.listen(renderElement, name, (callback));
        };
        RendererAdapter.prototype.listenGlobal = function (target, name, callback) {
            return this.delegate.listen(target, name, (callback));
        };
        RendererAdapter.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
            this.delegate.setProperty(renderElement, propertyName, propertyValue);
        };
        RendererAdapter.prototype.setElementAttribute = function (renderElement, namespaceAndName, attributeValue) {
            var _a = splitNamespace(namespaceAndName), ns = _a[0], name = _a[1];
            if (attributeValue != null) {
                this.delegate.setAttribute(renderElement, name, attributeValue, ns);
            }
            else {
                this.delegate.removeAttribute(renderElement, name, ns);
            }
        };
        RendererAdapter.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) { };
        RendererAdapter.prototype.setElementClass = function (renderElement, className, isAdd) {
            if (isAdd) {
                this.delegate.addClass(renderElement, className);
            }
            else {
                this.delegate.removeClass(renderElement, className);
            }
        };
        RendererAdapter.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
            if (styleValue != null) {
                this.delegate.setStyle(renderElement, styleName, styleValue);
            }
            else {
                this.delegate.removeStyle(renderElement, styleName);
            }
        };
        RendererAdapter.prototype.invokeElementMethod = function (renderElement, methodName, args) {
            ((renderElement))[methodName].apply(renderElement, args);
        };
        RendererAdapter.prototype.setText = function (renderNode$$1, text) { this.delegate.setValue(renderNode$$1, text); };
        RendererAdapter.prototype.animate = function () { throw new Error('Renderer.animate is no longer supported!'); };
        return RendererAdapter;
    }());
    var RendererV1TokenKey = tokenKey(Renderer);
    var Renderer2TokenKey = tokenKey(Renderer2);
    var ElementRefTokenKey = tokenKey(ElementRef);
    var ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
    var TemplateRefTokenKey = tokenKey(TemplateRef);
    var ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
    var InjectorRefTokenKey = tokenKey(Injector);
    var NOT_CREATED = new Object();
    function directiveDef(flags, matchedQueries, childCount, ctor, deps, props, outputs) {
        var bindings = [];
        if (props) {
            for (var prop in props) {
                var _a = props[prop], bindingIndex = _a[0], nonMinifiedName = _a[1];
                bindings[bindingIndex] = {
                    flags: 8,
                    name: prop, nonMinifiedName: nonMinifiedName,
                    ns: null,
                    securityContext: null,
                    suffix: null
                };
            }
        }
        var outputDefs = [];
        if (outputs) {
            for (var propName in outputs) {
                outputDefs.push({ type: 1, propName: propName, target: null, eventName: outputs[propName] });
            }
        }
        flags |= 8192;
        return _def(flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
    }
    function providerDef(flags, matchedQueries, token, value, deps) {
        return _def(flags, matchedQueries, 0, token, value, deps);
    }
    function _def(flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
        var _a = splitMatchedQueriesDsl(matchedQueriesDsl), matchedQueries = _a.matchedQueries, references = _a.references, matchedQueryIds = _a.matchedQueryIds;
        if (!outputs) {
            outputs = [];
        }
        if (!bindings) {
            bindings = [];
        }
        var depDefs = deps.map(function (value) {
            var token;
            var flags;
            if (Array.isArray(value)) {
                flags = value[0], token = value[1];
            }
            else {
                flags = 0;
                token = value;
            }
            return { flags: flags, token: token, tokenKey: tokenKey(token) };
        });
        return {
            index: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0, matchedQueries: matchedQueries, matchedQueryIds: matchedQueryIds, references: references,
            ngContentIndex: -1, childCount: childCount, bindings: bindings,
            bindingFlags: calcBindingFlags(bindings), outputs: outputs,
            element: null,
            provider: { token: token, tokenKey: tokenKey(token), value: value, deps: depDefs },
            text: null,
            query: null,
            ngContent: null
        };
    }
    function createProviderInstance(view, def) {
        return def.flags & 2048 ? NOT_CREATED : _createProviderInstance(view, def);
    }
    function createPipeInstance(view, def) {
        var compView = view;
        while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
        }
        var allowPrivateServices = true;
        return createClass(((compView.parent)), ((viewParentEl(compView))), allowPrivateServices, ((def.provider)).value, ((def.provider)).deps);
    }
    function createDirectiveInstance(view, def) {
        var allowPrivateServices = (def.flags & 16384) > 0;
        var instance = createClass(view, ((def.parent)), allowPrivateServices, ((def.provider)).value, ((def.provider)).deps);
        if (def.outputs.length) {
            for (var i = 0; i < def.outputs.length; i++) {
                var output = def.outputs[i];
                var subscription = instance[((output.propName))].subscribe(eventHandlerClosure(view, ((def.parent)).index, output.eventName));
                ((view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
            }
        }
        return instance;
    }
    function eventHandlerClosure(view, index, eventName) {
        return function (event) { return dispatchEvent(view, index, eventName, event); };
    }
    function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var providerData = asProviderData(view, def.index);
        var directive = providerData.instance;
        var changed = false;
        var changes = ((undefined));
        var bindLen = def.bindings.length;
        if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
            changed = true;
            changes = updateProp(view, providerData, def, 0, v0, changes);
        }
        if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
            changed = true;
            changes = updateProp(view, providerData, def, 1, v1, changes);
        }
        if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
            changed = true;
            changes = updateProp(view, providerData, def, 2, v2, changes);
        }
        if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
            changed = true;
            changes = updateProp(view, providerData, def, 3, v3, changes);
        }
        if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
            changed = true;
            changes = updateProp(view, providerData, def, 4, v4, changes);
        }
        if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
            changed = true;
            changes = updateProp(view, providerData, def, 5, v5, changes);
        }
        if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
            changed = true;
            changes = updateProp(view, providerData, def, 6, v6, changes);
        }
        if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
            changed = true;
            changes = updateProp(view, providerData, def, 7, v7, changes);
        }
        if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
            changed = true;
            changes = updateProp(view, providerData, def, 8, v8, changes);
        }
        if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
            changed = true;
            changes = updateProp(view, providerData, def, 9, v9, changes);
        }
        if (changes) {
            directive.ngOnChanges(changes);
        }
        if ((view.state & 1) && (def.flags & 32768)) {
            directive.ngOnInit();
        }
        if (def.flags & 131072) {
            directive.ngDoCheck();
        }
        return changed;
    }
    function checkAndUpdateDirectiveDynamic(view, def, values) {
        var providerData = asProviderData(view, def.index);
        var directive = providerData.instance;
        var changed = false;
        var changes = ((undefined));
        for (var i = 0; i < values.length; i++) {
            if (checkBinding(view, def, i, values[i])) {
                changed = true;
                changes = updateProp(view, providerData, def, i, values[i], changes);
            }
        }
        if (changes) {
            directive.ngOnChanges(changes);
        }
        if ((view.state & 1) && (def.flags & 32768)) {
            directive.ngOnInit();
        }
        if (def.flags & 131072) {
            directive.ngDoCheck();
        }
        return changed;
    }
    function _createProviderInstance(view, def) {
        var allowPrivateServices = (def.flags & 4096) > 0;
        var providerDef = def.provider;
        var injectable;
        switch (def.flags & 100673535) {
            case 256:
                injectable = createClass(view, ((def.parent)), allowPrivateServices, ((providerDef)).value, ((providerDef)).deps);
                break;
            case 512:
                injectable = callFactory(view, ((def.parent)), allowPrivateServices, ((providerDef)).value, ((providerDef)).deps);
                break;
            case 1024:
                injectable = resolveDep(view, ((def.parent)), allowPrivateServices, ((providerDef)).deps[0]);
                break;
            case 128:
                injectable = ((providerDef)).value;
                break;
        }
        return injectable;
    }
    function createClass(view, elDef, allowPrivateServices, ctor, deps) {
        var len = deps.length;
        var injectable;
        switch (len) {
            case 0:
                injectable = new ctor();
                break;
            case 1:
                injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
                break;
            case 2:
                injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
                break;
            case 3:
                injectable = new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
                break;
            default:
                var depValues = new Array(len);
                for (var i = 0; i < len; i++) {
                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
                }
                injectable = new (ctor.bind.apply(ctor, [void 0].concat(depValues)))();
        }
        return injectable;
    }
    function callFactory(view, elDef, allowPrivateServices, factory, deps) {
        var len = deps.length;
        var injectable;
        switch (len) {
            case 0:
                injectable = factory();
                break;
            case 1:
                injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
                break;
            case 2:
                injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
                break;
            case 3:
                injectable = factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
                break;
            default:
                var depValues = Array(len);
                for (var i = 0; i < len; i++) {
                    depValues[i] = resolveDep(view, elDef, allowPrivateServices, deps[i]);
                }
                injectable = factory.apply(void 0, depValues);
        }
        return injectable;
    }
    var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
    function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue) {
        if (notFoundValue === void 0) {
            notFoundValue = Injector.THROW_IF_NOT_FOUND;
        }
        if (depDef.flags & 8) {
            return depDef.token;
        }
        var startView = view;
        if (depDef.flags & 2) {
            notFoundValue = null;
        }
        var tokenKey$$1 = depDef.tokenKey;
        if (elDef && (depDef.flags & 1)) {
            allowPrivateServices = false;
            elDef = ((elDef.parent));
        }
        while (view) {
            if (elDef) {
                switch (tokenKey$$1) {
                    case RendererV1TokenKey: {
                        var compView = findCompView(view, elDef, allowPrivateServices);
                        return createRendererV1(compView);
                    }
                    case Renderer2TokenKey: {
                        var compView = findCompView(view, elDef, allowPrivateServices);
                        return compView.renderer;
                    }
                    case ElementRefTokenKey:
                        return new ElementRef(asElementData(view, elDef.index).renderElement);
                    case ViewContainerRefTokenKey:
                        return asElementData(view, elDef.index).viewContainer;
                    case TemplateRefTokenKey: {
                        if (((elDef.element)).template) {
                            return asElementData(view, elDef.index).template;
                        }
                        break;
                    }
                    case ChangeDetectorRefTokenKey: {
                        var cdView = findCompView(view, elDef, allowPrivateServices);
                        return createChangeDetectorRef(cdView);
                    }
                    case InjectorRefTokenKey:
                        return createInjector(view, elDef);
                    default:
                        var providerDef_1 = (((allowPrivateServices ? ((elDef.element)).allProviders : ((elDef.element)).publicProviders)))[tokenKey$$1];
                        if (providerDef_1) {
                            var providerData = asProviderData(view, providerDef_1.index);
                            if (providerData.instance === NOT_CREATED) {
                                providerData.instance = _createProviderInstance(view, providerDef_1);
                            }
                            return providerData.instance;
                        }
                }
            }
            allowPrivateServices = isComponentView(view);
            elDef = ((viewParentEl(view)));
            view = ((view.parent));
        }
        var value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
        if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
            notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
            return value;
        }
        return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
    }
    function findCompView(view, elDef, allowPrivateServices) {
        var compView;
        if (allowPrivateServices) {
            compView = asElementData(view, elDef.index).componentView;
        }
        else {
            compView = view;
            while (compView.parent && !isComponentView(compView)) {
                compView = compView.parent;
            }
        }
        return compView;
    }
    function updateProp(view, providerData, def, bindingIdx, value, changes) {
        if (def.flags & 16384) {
            var compView = asElementData(view, ((def.parent)).index).componentView;
            if (compView.def.flags & 2) {
                compView.state |= 2;
            }
        }
        var binding = def.bindings[bindingIdx];
        var propName = ((binding.name));
        providerData.instance[propName] = value;
        if (def.flags & 262144) {
            changes = changes || {};
            var oldValue = view.oldValues[def.bindingIndex + bindingIdx];
            if (oldValue instanceof WrappedValue) {
                oldValue = oldValue.wrapped;
            }
            var binding_1 = def.bindings[bindingIdx];
            changes[((binding_1.nonMinifiedName))] =
                new SimpleChange(oldValue, value, (view.state & 1) !== 0);
        }
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return changes;
    }
    function callLifecycleHooksChildrenFirst(view, lifecycles) {
        if (!(view.def.nodeFlags & lifecycles)) {
            return;
        }
        var nodes = view.def.nodes;
        for (var i = 0; i < nodes.length; i++) {
            var nodeDef = nodes[i];
            var parent = nodeDef.parent;
            if (!parent && nodeDef.flags & lifecycles) {
                callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
            }
            if ((nodeDef.childFlags & lifecycles) === 0) {
                i += nodeDef.childCount;
            }
            while (parent && (parent.flags & 1) &&
                i === parent.index + parent.childCount) {
                if (parent.directChildFlags & lifecycles) {
                    callElementProvidersLifecycles(view, parent, lifecycles);
                }
                parent = parent.parent;
            }
        }
    }
    function callElementProvidersLifecycles(view, elDef, lifecycles) {
        for (var i = elDef.index + 1; i <= elDef.index + elDef.childCount; i++) {
            var nodeDef = view.def.nodes[i];
            if (nodeDef.flags & lifecycles) {
                callProviderLifecycles(view, i, nodeDef.flags & lifecycles);
            }
            i += nodeDef.childCount;
        }
    }
    function callProviderLifecycles(view, index, lifecycles) {
        var provider = asProviderData(view, index).instance;
        if (provider === NOT_CREATED) {
            return;
        }
        Services.setCurrentNode(view, index);
        if (lifecycles & 524288) {
            provider.ngAfterContentInit();
        }
        if (lifecycles & 1048576) {
            provider.ngAfterContentChecked();
        }
        if (lifecycles & 2097152) {
            provider.ngAfterViewInit();
        }
        if (lifecycles & 4194304) {
            provider.ngAfterViewChecked();
        }
        if (lifecycles & 65536) {
            provider.ngOnDestroy();
        }
    }
    function pureObjectDef(propertyNames) {
        return _pureExpressionDef(32, propertyNames);
    }
    function _pureExpressionDef(flags, propertyNames) {
        var bindings = new Array(propertyNames.length);
        for (var i = 0; i < propertyNames.length; i++) {
            var prop = propertyNames[i];
            bindings[i] = {
                flags: 8,
                name: prop,
                ns: null,
                nonMinifiedName: prop,
                securityContext: null,
                suffix: null
            };
        }
        return {
            index: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0,
            matchedQueries: {},
            matchedQueryIds: 0,
            references: {},
            ngContentIndex: -1,
            childCount: 0, bindings: bindings,
            bindingFlags: calcBindingFlags(bindings),
            outputs: [],
            element: null,
            provider: null,
            text: null,
            query: null,
            ngContent: null
        };
    }
    function createPureExpression(view, def) {
        return { value: undefined };
    }
    function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindings = def.bindings;
        var changed = false;
        var bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
            changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
            changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
            changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
            changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
            changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
            changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
            changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
            changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
            changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
            changed = true;
        if (changed) {
            var data = asPureExpressionData(view, def.index);
            var value = void 0;
            switch (def.flags & 100673535) {
                case 16:
                    value = new Array(bindings.length);
                    if (bindLen > 0)
                        value[0] = v0;
                    if (bindLen > 1)
                        value[1] = v1;
                    if (bindLen > 2)
                        value[2] = v2;
                    if (bindLen > 3)
                        value[3] = v3;
                    if (bindLen > 4)
                        value[4] = v4;
                    if (bindLen > 5)
                        value[5] = v5;
                    if (bindLen > 6)
                        value[6] = v6;
                    if (bindLen > 7)
                        value[7] = v7;
                    if (bindLen > 8)
                        value[8] = v8;
                    if (bindLen > 9)
                        value[9] = v9;
                    break;
                case 32:
                    value = {};
                    if (bindLen > 0)
                        value[((bindings[0].name))] = v0;
                    if (bindLen > 1)
                        value[((bindings[1].name))] = v1;
                    if (bindLen > 2)
                        value[((bindings[2].name))] = v2;
                    if (bindLen > 3)
                        value[((bindings[3].name))] = v3;
                    if (bindLen > 4)
                        value[((bindings[4].name))] = v4;
                    if (bindLen > 5)
                        value[((bindings[5].name))] = v5;
                    if (bindLen > 6)
                        value[((bindings[6].name))] = v6;
                    if (bindLen > 7)
                        value[((bindings[7].name))] = v7;
                    if (bindLen > 8)
                        value[((bindings[8].name))] = v8;
                    if (bindLen > 9)
                        value[((bindings[9].name))] = v9;
                    break;
                case 64:
                    var pipe = v0;
                    switch (bindLen) {
                        case 1:
                            value = pipe.transform(v0);
                            break;
                        case 2:
                            value = pipe.transform(v1);
                            break;
                        case 3:
                            value = pipe.transform(v1, v2);
                            break;
                        case 4:
                            value = pipe.transform(v1, v2, v3);
                            break;
                        case 5:
                            value = pipe.transform(v1, v2, v3, v4);
                            break;
                        case 6:
                            value = pipe.transform(v1, v2, v3, v4, v5);
                            break;
                        case 7:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6);
                            break;
                        case 8:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                            break;
                        case 9:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                            break;
                        case 10:
                            value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                            break;
                    }
                    break;
            }
            data.value = value;
        }
        return changed;
    }
    function checkAndUpdatePureExpressionDynamic(view, def, values) {
        var bindings = def.bindings;
        var changed = false;
        for (var i = 0; i < values.length; i++) {
            if (checkAndUpdateBinding(view, def, i, values[i])) {
                changed = true;
            }
        }
        if (changed) {
            var data = asPureExpressionData(view, def.index);
            var value = void 0;
            switch (def.flags & 100673535) {
                case 16:
                    value = values;
                    break;
                case 32:
                    value = {};
                    for (var i = 0; i < values.length; i++) {
                        value[((bindings[i].name))] = values[i];
                    }
                    break;
                case 64:
                    var pipe = values[0];
                    var params = values.slice(1);
                    value = pipe.transform.apply(pipe, params);
                    break;
            }
            data.value = value;
        }
        return changed;
    }
    function createQuery() {
        return new QueryList();
    }
    function dirtyParentQueries(view) {
        var queryIds = view.def.nodeMatchedQueries;
        while (view.parent && isEmbeddedView(view)) {
            var tplDef = ((view.parentNodeDef));
            view = view.parent;
            var end = tplDef.index + tplDef.childCount;
            for (var i = 0; i <= end; i++) {
                var nodeDef = view.def.nodes[i];
                if ((nodeDef.flags & 33554432) &&
                    (nodeDef.flags & 268435456) &&
                    (((nodeDef.query)).filterId & queryIds) === ((nodeDef.query)).filterId) {
                    asQueryList(view, i).setDirty();
                }
                if ((nodeDef.flags & 1 && i + nodeDef.childCount < tplDef.index) ||
                    !(nodeDef.childFlags & 33554432) ||
                    !(nodeDef.childFlags & 268435456)) {
                    i += nodeDef.childCount;
                }
            }
        }
        if (view.def.nodeFlags & 67108864) {
            for (var i = 0; i < view.def.nodes.length; i++) {
                var nodeDef = view.def.nodes[i];
                if ((nodeDef.flags & 67108864) && (nodeDef.flags & 268435456)) {
                    asQueryList(view, i).setDirty();
                }
                i += nodeDef.childCount;
            }
        }
    }
    function checkAndUpdateQuery(view, nodeDef) {
        var queryList = asQueryList(view, nodeDef.index);
        if (!queryList.dirty) {
            return;
        }
        var directiveInstance;
        var newValues = ((undefined));
        if (nodeDef.flags & 33554432) {
            var elementDef_1 = ((((nodeDef.parent)).parent));
            newValues = calcQueryValues(view, elementDef_1.index, elementDef_1.index + elementDef_1.childCount, ((nodeDef.query)), []);
            directiveInstance = asProviderData(view, ((nodeDef.parent)).index).instance;
        }
        else if (nodeDef.flags & 67108864) {
            newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, ((nodeDef.query)), []);
            directiveInstance = view.component;
        }
        queryList.reset(newValues);
        var bindings = ((nodeDef.query)).bindings;
        var notify = false;
        for (var i = 0; i < bindings.length; i++) {
            var binding = bindings[i];
            var boundValue = void 0;
            switch (binding.bindingType) {
                case 0:
                    boundValue = queryList.first;
                    break;
                case 1:
                    boundValue = queryList;
                    notify = true;
                    break;
            }
            directiveInstance[binding.propName] = boundValue;
        }
        if (notify) {
            queryList.notifyOnChanges();
        }
    }
    function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
        for (var i = startIndex; i <= endIndex; i++) {
            var nodeDef = view.def.nodes[i];
            var valueType = nodeDef.matchedQueries[queryDef.id];
            if (valueType != null) {
                values.push(getQueryValue(view, nodeDef, valueType));
            }
            if (nodeDef.flags & 1 && ((nodeDef.element)).template &&
                (((((nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===
                    queryDef.filterId) {
                var elementData = asElementData(view, i);
                if (nodeDef.flags & 8388608) {
                    var embeddedViews = ((elementData.viewContainer))._embeddedViews;
                    for (var k = 0; k < embeddedViews.length; k++) {
                        var embeddedView = embeddedViews[k];
                        var dvc = declaredViewContainer(embeddedView);
                        if (dvc && dvc === elementData) {
                            calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                        }
                    }
                }
                var projectedViews = elementData.template._projectedViews;
                if (projectedViews) {
                    for (var k = 0; k < projectedViews.length; k++) {
                        var projectedView = projectedViews[k];
                        calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                    }
                }
            }
            if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
                i += nodeDef.childCount;
            }
        }
        return values;
    }
    function getQueryValue(view, nodeDef, queryValueType) {
        if (queryValueType != null) {
            var value = void 0;
            switch (queryValueType) {
                case 1:
                    value = asElementData(view, nodeDef.index).renderElement;
                    break;
                case 0:
                    value = new ElementRef(asElementData(view, nodeDef.index).renderElement);
                    break;
                case 2:
                    value = asElementData(view, nodeDef.index).template;
                    break;
                case 3:
                    value = asElementData(view, nodeDef.index).viewContainer;
                    break;
                case 4:
                    value = asProviderData(view, nodeDef.index).instance;
                    break;
            }
            return value;
        }
    }
    function textDef(ngContentIndex, constants) {
        var bindings = new Array(constants.length - 1);
        for (var i = 1; i < constants.length; i++) {
            bindings[i - 1] = {
                flags: 8,
                name: null,
                ns: null,
                nonMinifiedName: null,
                securityContext: null,
                suffix: constants[i]
            };
        }
        var flags = 2;
        return {
            index: -1,
            parent: null,
            renderParent: null,
            bindingIndex: -1,
            outputIndex: -1,
            flags: flags,
            childFlags: 0,
            directChildFlags: 0,
            childMatchedQueries: 0,
            matchedQueries: {},
            matchedQueryIds: 0,
            references: {}, ngContentIndex: ngContentIndex,
            childCount: 0, bindings: bindings,
            bindingFlags: calcBindingFlags(bindings),
            outputs: [],
            element: null,
            provider: null,
            text: { prefix: constants[0] },
            query: null,
            ngContent: null
        };
    }
    function createText(view, renderHost, def) {
        var renderNode$$1;
        var renderer = view.renderer;
        renderNode$$1 = renderer.createText(((def.text)).prefix);
        var parentEl = getParentRenderElement(view, renderHost, def);
        if (parentEl) {
            renderer.appendChild(parentEl, renderNode$$1);
        }
        return { renderText: renderNode$$1 };
    }
    function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var changed = false;
        var bindings = def.bindings;
        var bindLen = bindings.length;
        if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
            changed = true;
        if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
            changed = true;
        if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
            changed = true;
        if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
            changed = true;
        if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
            changed = true;
        if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
            changed = true;
        if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
            changed = true;
        if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
            changed = true;
        if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
            changed = true;
        if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
            changed = true;
        if (changed) {
            var value = ((def.text)).prefix;
            if (bindLen > 0)
                value += _addInterpolationPart(v0, bindings[0]);
            if (bindLen > 1)
                value += _addInterpolationPart(v1, bindings[1]);
            if (bindLen > 2)
                value += _addInterpolationPart(v2, bindings[2]);
            if (bindLen > 3)
                value += _addInterpolationPart(v3, bindings[3]);
            if (bindLen > 4)
                value += _addInterpolationPart(v4, bindings[4]);
            if (bindLen > 5)
                value += _addInterpolationPart(v5, bindings[5]);
            if (bindLen > 6)
                value += _addInterpolationPart(v6, bindings[6]);
            if (bindLen > 7)
                value += _addInterpolationPart(v7, bindings[7]);
            if (bindLen > 8)
                value += _addInterpolationPart(v8, bindings[8]);
            if (bindLen > 9)
                value += _addInterpolationPart(v9, bindings[9]);
            var renderNode$$1 = asTextData(view, def.index).renderText;
            view.renderer.setValue(renderNode$$1, value);
        }
        return changed;
    }
    function checkAndUpdateTextDynamic(view, def, values) {
        var bindings = def.bindings;
        var changed = false;
        for (var i = 0; i < values.length; i++) {
            if (checkAndUpdateBinding(view, def, i, values[i])) {
                changed = true;
            }
        }
        if (changed) {
            var value = '';
            for (var i = 0; i < values.length; i++) {
                value = value + _addInterpolationPart(values[i], bindings[i]);
            }
            value = ((def.text)).prefix + value;
            var renderNode$$1 = asTextData(view, def.index).renderText;
            view.renderer.setValue(renderNode$$1, value);
        }
        return changed;
    }
    function _addInterpolationPart(value, binding) {
        var valueStr = value != null ? value.toString() : '';
        return valueStr + binding.suffix;
    }
    function viewDef(flags, nodes, updateDirectives, updateRenderer) {
        var viewBindingCount = 0;
        var viewDisposableCount = 0;
        var viewNodeFlags = 0;
        var viewRootNodeFlags = 0;
        var viewMatchedQueries = 0;
        var currentParent = null;
        var currentElementHasPublicProviders = false;
        var currentElementHasPrivateProviders = false;
        var lastRenderRootNode = null;
        for (var i = 0; i < nodes.length; i++) {
            while (currentParent && i > currentParent.index + currentParent.childCount) {
                var newParent = currentParent.parent;
                if (newParent) {
                    newParent.childFlags |= ((currentParent.childFlags));
                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;
                }
                currentParent = newParent;
            }
            var node = nodes[i];
            node.index = i;
            node.parent = currentParent;
            node.bindingIndex = viewBindingCount;
            node.outputIndex = viewDisposableCount;
            var currentRenderParent = void 0;
            if (currentParent && currentParent.flags & 1 &&
                !((currentParent.element)).name) {
                currentRenderParent = currentParent.renderParent;
            }
            else {
                currentRenderParent = currentParent;
            }
            node.renderParent = currentRenderParent;
            if (node.element) {
                var elDef = node.element;
                elDef.publicProviders =
                    currentParent ? ((currentParent.element)).publicProviders : Object.create(null);
                elDef.allProviders = elDef.publicProviders;
                currentElementHasPublicProviders = false;
                currentElementHasPrivateProviders = false;
            }
            validateNode(currentParent, node, nodes.length);
            viewNodeFlags |= node.flags;
            viewMatchedQueries |= node.matchedQueryIds;
            if (node.element && node.element.template) {
                viewMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
            if (currentParent) {
                currentParent.childFlags |= node.flags;
                currentParent.directChildFlags |= node.flags;
                currentParent.childMatchedQueries |= node.matchedQueryIds;
                if (node.element && node.element.template) {
                    currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
                }
            }
            else {
                viewRootNodeFlags |= node.flags;
            }
            viewBindingCount += node.bindings.length;
            viewDisposableCount += node.outputs.length;
            if (!currentRenderParent && (node.flags & 3)) {
                lastRenderRootNode = node;
            }
            if (node.flags & 10112) {
                if (!currentElementHasPublicProviders) {
                    currentElementHasPublicProviders = true;
                    ((((currentParent)).element)).publicProviders =
                        Object.create(((((currentParent)).element)).publicProviders);
                    ((((currentParent)).element)).allProviders = ((((currentParent)).element)).publicProviders;
                }
                var isPrivateService = (node.flags & 4096) !== 0;
                var isComponent = (node.flags & 16384) !== 0;
                if (!isPrivateService || isComponent) {
                    ((((((currentParent)).element)).publicProviders))[((node.provider)).tokenKey] = node;
                }
                else {
                    if (!currentElementHasPrivateProviders) {
                        currentElementHasPrivateProviders = true;
                        ((((currentParent)).element)).allProviders =
                            Object.create(((((currentParent)).element)).publicProviders);
                    }
                    ((((((currentParent)).element)).allProviders))[((node.provider)).tokenKey] = node;
                }
                if (isComponent) {
                    ((((currentParent)).element)).componentProvider = node;
                }
            }
            if (node.childCount) {
                currentParent = node;
            }
        }
        while (currentParent) {
            var newParent = currentParent.parent;
            if (newParent) {
                newParent.childFlags |= currentParent.childFlags;
                newParent.childMatchedQueries |= currentParent.childMatchedQueries;
            }
            currentParent = newParent;
        }
        var handleEvent = function (view, nodeIndex, eventName, event) { return ((((nodes[nodeIndex].element)).handleEvent))(view, eventName, event); };
        return {
            factory: null,
            nodeFlags: viewNodeFlags,
            rootNodeFlags: viewRootNodeFlags,
            nodeMatchedQueries: viewMatchedQueries, flags: flags,
            nodes: nodes,
            updateDirectives: updateDirectives || NOOP,
            updateRenderer: updateRenderer || NOOP,
            handleEvent: handleEvent || NOOP,
            bindingCount: viewBindingCount,
            outputCount: viewDisposableCount, lastRenderRootNode: lastRenderRootNode
        };
    }
    function validateNode(parent, node, nodeCount) {
        var template = node.element && node.element.template;
        if (template) {
            if (!template.lastRenderRootNode) {
                throw new Error("Illegal State: Embedded templates without nodes are not allowed!");
            }
            if (template.lastRenderRootNode &&
                template.lastRenderRootNode.flags & 8388608) {
                throw new Error("Illegal State: Last root node of a template can't have embedded views, at index " + node.index + "!");
            }
        }
        if (node.flags & 10112) {
            var parentFlags = parent ? parent.flags : 0;
            if ((parentFlags & 1) === 0) {
                throw new Error("Illegal State: Provider/Directive nodes need to be children of elements or anchors, at index " + node.index + "!");
            }
        }
        if (node.query) {
            if (node.flags & 33554432 &&
                (!parent || (parent.flags & 8192) === 0)) {
                throw new Error("Illegal State: Content Query nodes need to be children of directives, at index " + node.index + "!");
            }
            if (node.flags & 67108864 && parent) {
                throw new Error("Illegal State: View Query nodes have to be top level nodes, at index " + node.index + "!");
            }
        }
        if (node.childCount) {
            var parentEnd = parent ? parent.index + parent.childCount : nodeCount - 1;
            if (node.index <= parentEnd && node.index + node.childCount > parentEnd) {
                throw new Error("Illegal State: childCount of node leads outside of parent, at index " + node.index + "!");
            }
        }
    }
    function createEmbeddedView(parent, anchorDef$$1, context) {
        var view = createView(parent.root, parent.renderer, parent, anchorDef$$1, ((((anchorDef$$1.element)).template)));
        initView(view, parent.component, context);
        createViewNodes(view);
        return view;
    }
    function createRootView(root, def, context) {
        var view = createView(root, root.renderer, null, null, def);
        initView(view, context, context);
        createViewNodes(view);
        return view;
    }
    function createView(root, renderer, parent, parentNodeDef, def) {
        var nodes = new Array(def.nodes.length);
        var disposables = def.outputCount ? new Array(def.outputCount) : null;
        var view = {
            def: def,
            parent: parent,
            viewContainerParent: null, parentNodeDef: parentNodeDef,
            context: null,
            component: null, nodes: nodes,
            state: 1 | 2, root: root, renderer: renderer,
            oldValues: new Array(def.bindingCount), disposables: disposables
        };
        return view;
    }
    function initView(view, component, context) {
        view.component = component;
        view.context = context;
    }
    function createViewNodes(view) {
        var renderHost;
        if (isComponentView(view)) {
            var hostDef = view.parentNodeDef;
            renderHost = asElementData(((view.parent)), ((((hostDef)).parent)).index).renderElement;
        }
        var def = view.def;
        var nodes = view.nodes;
        for (var i = 0; i < def.nodes.length; i++) {
            var nodeDef = def.nodes[i];
            Services.setCurrentNode(view, i);
            var nodeData = void 0;
            switch (nodeDef.flags & 100673535) {
                case 1:
                    var el = (createElement(view, renderHost, nodeDef));
                    var componentView = ((undefined));
                    if (nodeDef.flags & 16777216) {
                        var compViewDef = resolveViewDefinition(((((nodeDef.element)).componentView)));
                        var rendererType = ((nodeDef.element)).componentRendererType;
                        var compRenderer = void 0;
                        if (!rendererType) {
                            compRenderer = view.root.renderer;
                        }
                        else {
                            compRenderer = view.root.rendererFactory.createRenderer(el, rendererType);
                        }
                        componentView = createView(view.root, compRenderer, view, ((nodeDef.element)).componentProvider, compViewDef);
                    }
                    listenToElementOutputs(view, componentView, nodeDef, el);
                    nodeData = ({
                        renderElement: el,
                        componentView: componentView,
                        viewContainer: null,
                        template: ((nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined
                    });
                    if (nodeDef.flags & 8388608) {
                        nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                    }
                    break;
                case 2:
                    nodeData = (createText(view, renderHost, nodeDef));
                    break;
                case 256:
                case 512:
                case 1024:
                case 128: {
                    var instance = createProviderInstance(view, nodeDef);
                    nodeData = ({ instance: instance });
                    break;
                }
                case 8: {
                    var instance = createPipeInstance(view, nodeDef);
                    nodeData = ({ instance: instance });
                    break;
                }
                case 8192: {
                    var instance = createDirectiveInstance(view, nodeDef);
                    nodeData = ({ instance: instance });
                    if (nodeDef.flags & 16384) {
                        var compView = asElementData(view, ((nodeDef.parent)).index).componentView;
                        initView(compView, instance, instance);
                    }
                    break;
                }
                case 16:
                case 32:
                case 64:
                    nodeData = (createPureExpression(view, nodeDef));
                    break;
                case 33554432:
                case 67108864:
                    nodeData = (createQuery());
                    break;
                case 4:
                    appendNgContent(view, renderHost, nodeDef);
                    nodeData = undefined;
                    break;
            }
            nodes[i] = nodeData;
        }
        execComponentViewsAction(view, ViewAction.CreateViewNodes);
        execQueriesAction(view, 33554432 | 67108864, 134217728, 0);
    }
    function checkNoChangesView(view) {
        Services.updateDirectives(view, 1);
        execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
        Services.updateRenderer(view, 1);
        execComponentViewsAction(view, ViewAction.CheckNoChanges);
    }
    function checkAndUpdateView(view) {
        Services.updateDirectives(view, 0);
        execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 33554432, 268435456, 0);
        callLifecycleHooksChildrenFirst(view, 1048576 |
            (view.state & 1 ? 524288 : 0));
        Services.updateRenderer(view, 0);
        execComponentViewsAction(view, ViewAction.CheckAndUpdate);
        execQueriesAction(view, 67108864, 268435456, 0);
        callLifecycleHooksChildrenFirst(view, 4194304 |
            (view.state & 1 ? 2097152 : 0));
        if (view.def.flags & 2) {
            view.state &= ~2;
        }
        view.state &= ~1;
    }
    function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0) {
            return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        }
        else {
            return checkAndUpdateNodeDynamic(view, nodeDef, v0);
        }
    }
    function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var changed = false;
        switch (nodeDef.flags & 100673535) {
            case 1:
                changed = checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
                break;
            case 2:
                changed = checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
                break;
            case 8192:
                changed =
                    checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
                break;
            case 16:
            case 32:
            case 64:
                changed =
                    checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
                break;
        }
        return changed;
    }
    function checkAndUpdateNodeDynamic(view, nodeDef, values) {
        var changed = false;
        switch (nodeDef.flags & 100673535) {
            case 1:
                changed = checkAndUpdateElementDynamic(view, nodeDef, values);
                break;
            case 2:
                changed = checkAndUpdateTextDynamic(view, nodeDef, values);
                break;
            case 8192:
                changed = checkAndUpdateDirectiveDynamic(view, nodeDef, values);
                break;
            case 16:
            case 32:
            case 64:
                changed = checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
                break;
        }
        if (changed) {
            var bindLen = nodeDef.bindings.length;
            var bindingStart = nodeDef.bindingIndex;
            var oldValues = view.oldValues;
            for (var i = 0; i < bindLen; i++) {
                oldValues[bindingStart + i] = values[i];
            }
        }
        return changed;
    }
    function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        if (argStyle === 0) {
            checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        }
        else {
            checkNoChangesNodeDynamic(view, nodeDef, v0);
        }
        return false;
    }
    function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var bindLen = nodeDef.bindings.length;
        if (bindLen > 0)
            checkBindingNoChanges(view, nodeDef, 0, v0);
        if (bindLen > 1)
            checkBindingNoChanges(view, nodeDef, 1, v1);
        if (bindLen > 2)
            checkBindingNoChanges(view, nodeDef, 2, v2);
        if (bindLen > 3)
            checkBindingNoChanges(view, nodeDef, 3, v3);
        if (bindLen > 4)
            checkBindingNoChanges(view, nodeDef, 4, v4);
        if (bindLen > 5)
            checkBindingNoChanges(view, nodeDef, 5, v5);
        if (bindLen > 6)
            checkBindingNoChanges(view, nodeDef, 6, v6);
        if (bindLen > 7)
            checkBindingNoChanges(view, nodeDef, 7, v7);
        if (bindLen > 8)
            checkBindingNoChanges(view, nodeDef, 8, v8);
        if (bindLen > 9)
            checkBindingNoChanges(view, nodeDef, 9, v9);
    }
    function checkNoChangesNodeDynamic(view, nodeDef, values) {
        for (var i = 0; i < values.length; i++) {
            checkBindingNoChanges(view, nodeDef, i, values[i]);
        }
    }
    function checkNoChangesQuery(view, nodeDef) {
        var queryList = asQueryList(view, nodeDef.index);
        if (queryList.dirty) {
            throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.index), "Query " + ((nodeDef.query)).id + " not dirty", "Query " + ((nodeDef.query)).id + " dirty", (view.state & 1) !== 0);
        }
    }
    function destroyView(view) {
        if (view.state & 8) {
            return;
        }
        execEmbeddedViewsAction(view, ViewAction.Destroy);
        execComponentViewsAction(view, ViewAction.Destroy);
        callLifecycleHooksChildrenFirst(view, 65536);
        if (view.disposables) {
            for (var i = 0; i < view.disposables.length; i++) {
                view.disposables[i]();
            }
        }
        if (view.renderer.destroyNode) {
            destroyViewNodes(view);
        }
        if (isComponentView(view)) {
            view.renderer.destroy();
        }
        view.state |= 8;
    }
    function destroyViewNodes(view) {
        var len = view.def.nodes.length;
        for (var i = 0; i < len; i++) {
            var def = view.def.nodes[i];
            if (def.flags & 1) {
                ((view.renderer.destroyNode))(asElementData(view, i).renderElement);
            }
            else if (def.flags & 2) {
                ((view.renderer.destroyNode))(asTextData(view, i).renderText);
            }
        }
    }
    var ViewAction = {};
    ViewAction.CreateViewNodes = 0;
    ViewAction.CheckNoChanges = 1;
    ViewAction.CheckAndUpdate = 2;
    ViewAction.Destroy = 3;
    ViewAction[ViewAction.CreateViewNodes] = "CreateViewNodes";
    ViewAction[ViewAction.CheckNoChanges] = "CheckNoChanges";
    ViewAction[ViewAction.CheckAndUpdate] = "CheckAndUpdate";
    ViewAction[ViewAction.Destroy] = "Destroy";
    function execComponentViewsAction(view, action) {
        var def = view.def;
        if (!(def.nodeFlags & 16777216)) {
            return;
        }
        for (var i = 0; i < def.nodes.length; i++) {
            var nodeDef = def.nodes[i];
            if (nodeDef.flags & 16777216) {
                callViewAction(asElementData(view, i).componentView, action);
            }
            else if ((nodeDef.childFlags & 16777216) === 0) {
                i += nodeDef.childCount;
            }
        }
    }
    function execEmbeddedViewsAction(view, action) {
        var def = view.def;
        if (!(def.nodeFlags & 8388608)) {
            return;
        }
        for (var i = 0; i < def.nodes.length; i++) {
            var nodeDef = def.nodes[i];
            if (nodeDef.flags & 8388608) {
                var embeddedViews = ((asElementData(view, i).viewContainer))._embeddedViews;
                for (var k = 0; k < embeddedViews.length; k++) {
                    callViewAction(embeddedViews[k], action);
                }
            }
            else if ((nodeDef.childFlags & 8388608) === 0) {
                i += nodeDef.childCount;
            }
        }
    }
    function callViewAction(view, action) {
        var viewState = view.state;
        switch (action) {
            case ViewAction.CheckNoChanges:
                if ((viewState & 2) &&
                    (viewState & (4 | 8)) === 0) {
                    checkNoChangesView(view);
                }
                break;
            case ViewAction.CheckAndUpdate:
                if ((viewState & 2) &&
                    (viewState & (4 | 8)) === 0) {
                    checkAndUpdateView(view);
                }
                break;
            case ViewAction.Destroy:
                destroyView(view);
                break;
            case ViewAction.CreateViewNodes:
                createViewNodes(view);
                break;
        }
    }
    function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
        if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
            return;
        }
        var nodeCount = view.def.nodes.length;
        for (var i = 0; i < nodeCount; i++) {
            var nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
                Services.setCurrentNode(view, nodeDef.index);
                switch (checkType) {
                    case 0:
                        checkAndUpdateQuery(view, nodeDef);
                        break;
                    case 1:
                        checkNoChangesQuery(view, nodeDef);
                        break;
                }
            }
            if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
                i += nodeDef.childCount;
            }
        }
    }
    var initialized = false;
    function initServicesIfNeeded() {
        if (initialized) {
            return;
        }
        initialized = true;
        var services = isDevMode() ? createDebugServices() : createProdServices();
        Services.setCurrentNode = services.setCurrentNode;
        Services.createRootView = services.createRootView;
        Services.createEmbeddedView = services.createEmbeddedView;
        Services.checkAndUpdateView = services.checkAndUpdateView;
        Services.checkNoChangesView = services.checkNoChangesView;
        Services.destroyView = services.destroyView;
        Services.resolveDep = resolveDep;
        Services.createDebugContext = services.createDebugContext;
        Services.handleEvent = services.handleEvent;
        Services.updateDirectives = services.updateDirectives;
        Services.updateRenderer = services.updateRenderer;
        Services.dirtyParentQueries = dirtyParentQueries;
    }
    function createProdServices() {
        return {
            setCurrentNode: function () { },
            createRootView: createProdRootView,
            createEmbeddedView: createEmbeddedView,
            checkAndUpdateView: checkAndUpdateView,
            checkNoChangesView: checkNoChangesView,
            destroyView: destroyView,
            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
            handleEvent: function (view, nodeIndex, eventName, event) { return view.def.handleEvent(view, nodeIndex, eventName, event); },
            updateDirectives: function (view, checkType) {
                return view.def.updateDirectives(checkType === 0 ? prodCheckAndUpdateNode :
                    prodCheckNoChangesNode, view);
            },
            updateRenderer: function (view, checkType) {
                return view.def.updateRenderer(checkType === 0 ? prodCheckAndUpdateNode :
                    prodCheckNoChangesNode, view);
            },
        };
    }
    function createDebugServices() {
        return {
            setCurrentNode: debugSetCurrentNode,
            createRootView: debugCreateRootView,
            createEmbeddedView: debugCreateEmbeddedView,
            checkAndUpdateView: debugCheckAndUpdateView,
            checkNoChangesView: debugCheckNoChangesView,
            destroyView: debugDestroyView,
            createDebugContext: function (view, nodeIndex) { return new DebugContext_(view, nodeIndex); },
            handleEvent: debugHandleEvent,
            updateDirectives: debugUpdateDirectives,
            updateRenderer: debugUpdateRenderer
        };
    }
    function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var rendererFactory = ngModule.injector.get(RendererFactory2);
        return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
    }
    function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
        var rendererFactory = ngModule.injector.get(RendererFactory2);
        var root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
        return callWithDebugContext(DebugAction.create, createRootView, null, [root, def, context]);
    }
    function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
        var sanitizer = ngModule.injector.get(Sanitizer);
        var renderer = rendererFactory.createRenderer(null, null);
        return {
            ngModule: ngModule,
            injector: elInjector, projectableNodes: projectableNodes,
            selectorOrNode: rootSelectorOrNode, sanitizer: sanitizer, rendererFactory: rendererFactory, renderer: renderer
        };
    }
    function prodCheckAndUpdateNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var nodeDef = view.def.nodes[nodeIndex];
        checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return (nodeDef.flags & 112) ?
            asPureExpressionData(view, nodeIndex).value :
            undefined;
    }
    function prodCheckNoChangesNode(view, nodeIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
        var nodeDef = view.def.nodes[nodeIndex];
        checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        return (nodeDef.flags & 112) ?
            asPureExpressionData(view, nodeIndex).value :
            undefined;
    }
    function debugCreateEmbeddedView(parent, anchorDef, context) {
        return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parent, anchorDef, context]);
    }
    function debugCheckAndUpdateView(view) {
        return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
    }
    function debugCheckNoChangesView(view) {
        return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
    }
    function debugDestroyView(view) {
        return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
    }
    var DebugAction = {};
    DebugAction.create = 0;
    DebugAction.detectChanges = 1;
    DebugAction.checkNoChanges = 2;
    DebugAction.destroy = 3;
    DebugAction.handleEvent = 4;
    DebugAction[DebugAction.create] = "create";
    DebugAction[DebugAction.detectChanges] = "detectChanges";
    DebugAction[DebugAction.checkNoChanges] = "checkNoChanges";
    DebugAction[DebugAction.destroy] = "destroy";
    DebugAction[DebugAction.handleEvent] = "handleEvent";
    var _currentAction;
    var _currentView;
    var _currentNodeIndex;
    function debugSetCurrentNode(view, nodeIndex) {
        _currentView = view;
        _currentNodeIndex = nodeIndex;
    }
    function debugHandleEvent(view, nodeIndex, eventName, event) {
        debugSetCurrentNode(view, nodeIndex);
        return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
    }
    function debugUpdateDirectives(view, checkType) {
        if (view.state & 8) {
            throw viewDestroyedError(DebugAction[_currentAction]);
        }
        debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
        return view.def.updateDirectives(debugCheckDirectivesFn, view);
        function debugCheckDirectivesFn(view, nodeIndex, argStyle) {
            var values = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                values[_i - 3] = arguments[_i];
            }
            var nodeDef = view.def.nodes[nodeIndex];
            if (checkType === 0) {
                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            }
            else {
                debugCheckNoChangesNode(view, nodeDef, argStyle, values);
            }
            if (nodeDef.flags & 8192) {
                debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
            }
            return (nodeDef.flags & 112) ?
                asPureExpressionData(view, nodeDef.index).value :
                undefined;
        }
    }
    function debugUpdateRenderer(view, checkType) {
        if (view.state & 8) {
            throw viewDestroyedError(DebugAction[_currentAction]);
        }
        debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
        return view.def.updateRenderer(debugCheckRenderNodeFn, view);
        function debugCheckRenderNodeFn(view, nodeIndex, argStyle) {
            var values = [];
            for (var _i = 3; _i < arguments.length; _i++) {
                values[_i - 3] = arguments[_i];
            }
            var nodeDef = view.def.nodes[nodeIndex];
            if (checkType === 0) {
                debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
            }
            else {
                debugCheckNoChangesNode(view, nodeDef, argStyle, values);
            }
            if (nodeDef.flags & 3) {
                debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
            }
            return (nodeDef.flags & 112) ?
                asPureExpressionData(view, nodeDef.index).value :
                undefined;
        }
    }
    function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
        var changed = ((checkAndUpdateNode)).apply(void 0, [view, nodeDef, argStyle].concat(givenValues));
        if (changed) {
            var values = argStyle === 1 ? givenValues[0] : givenValues;
            if (nodeDef.flags & 8192) {
                var bindingValues = {};
                for (var i = 0; i < nodeDef.bindings.length; i++) {
                    var binding = nodeDef.bindings[i];
                    var value = values[i];
                    if (binding.flags & 8) {
                        bindingValues[normalizeDebugBindingName(((binding.nonMinifiedName)))] =
                            normalizeDebugBindingValue(value);
                    }
                }
                var elDef = ((nodeDef.parent));
                var el = asElementData(view, elDef.index).renderElement;
                if (!((elDef.element)).name) {
                    view.renderer.setValue(el, "bindings=" + JSON.stringify(bindingValues, null, 2));
                }
                else {
                    for (var attr in bindingValues) {
                        var value = bindingValues[attr];
                        if (value != null) {
                            view.renderer.setAttribute(el, attr, value);
                        }
                        else {
                            view.renderer.removeAttribute(el, attr);
                        }
                    }
                }
            }
        }
    }
    function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
        ((checkNoChangesNode)).apply(void 0, [view, nodeDef, argStyle].concat(values));
    }
    function normalizeDebugBindingName(name) {
        name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
        return "ng-reflect-" + name;
    }
    var CAMEL_CASE_REGEXP = /([A-Z])/g;
    function camelCaseToDashCase(input) {
        return input.replace(CAMEL_CASE_REGEXP, function () {
            var m = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                m[_i] = arguments[_i];
            }
            return '-' + m[1].toLowerCase();
        });
    }
    function normalizeDebugBindingValue(value) {
        try {
            return value != null ? value.toString().slice(0, 30) : value;
        }
        catch (e) {
            return '[ERROR] Exception while trying to serialize the value';
        }
    }
    function nextDirectiveWithBinding(view, nodeIndex) {
        for (var i = nodeIndex; i < view.def.nodes.length; i++) {
            var nodeDef = view.def.nodes[i];
            if (nodeDef.flags & 8192 && nodeDef.bindings && nodeDef.bindings.length) {
                return i;
            }
        }
        return null;
    }
    function nextRenderNodeWithBinding(view, nodeIndex) {
        for (var i = nodeIndex; i < view.def.nodes.length; i++) {
            var nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 3) && nodeDef.bindings && nodeDef.bindings.length) {
                return i;
            }
        }
        return null;
    }
    var DebugContext_ = (function () {
        function DebugContext_(view, nodeIndex) {
            this.view = view;
            this.nodeIndex = nodeIndex;
            if (nodeIndex == null) {
                this.nodeIndex = nodeIndex = 0;
            }
            this.nodeDef = view.def.nodes[nodeIndex];
            var elDef = this.nodeDef;
            var elView = view;
            while (elDef && (elDef.flags & 1) === 0) {
                elDef = elDef.parent;
            }
            if (!elDef) {
                while (!elDef && elView) {
                    elDef = viewParentEl(elView);
                    elView = elView.parent;
                }
            }
            this.elDef = elDef;
            this.elView = elView;
        }
        Object.defineProperty(DebugContext_.prototype, "elOrCompView", {
            get: function () {
                return asElementData(this.elView, this.elDef.index).componentView || this.view;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "injector", {
            get: function () { return createInjector(this.elView, this.elDef); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "component", {
            get: function () { return this.elOrCompView.component; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "context", {
            get: function () { return this.elOrCompView.context; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "providerTokens", {
            get: function () {
                var tokens = [];
                if (this.elDef) {
                    for (var i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                        var childDef = this.elView.def.nodes[i];
                        if (childDef.flags & 10112) {
                            tokens.push(((childDef.provider)).token);
                        }
                        i += childDef.childCount;
                    }
                }
                return tokens;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "references", {
            get: function () {
                var references = {};
                if (this.elDef) {
                    collectReferences(this.elView, this.elDef, references);
                    for (var i = this.elDef.index + 1; i <= this.elDef.index + this.elDef.childCount; i++) {
                        var childDef = this.elView.def.nodes[i];
                        if (childDef.flags & 10112) {
                            collectReferences(this.elView, childDef, references);
                        }
                        i += childDef.childCount;
                    }
                }
                return references;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "componentRenderElement", {
            get: function () {
                var elData = findHostElement(this.elOrCompView);
                return elData ? elData.renderElement : undefined;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DebugContext_.prototype, "renderNode", {
            get: function () {
                return this.nodeDef.flags & 2 ? renderNode(this.view, this.nodeDef) :
                    renderNode(this.elView, this.elDef);
            },
            enumerable: true,
            configurable: true
        });
        DebugContext_.prototype.logError = function (console) {
            var values = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                values[_i - 1] = arguments[_i];
            }
            var logViewDef;
            var logNodeIndex;
            if (this.nodeDef.flags & 2) {
                logViewDef = this.view.def;
                logNodeIndex = this.nodeDef.index;
            }
            else {
                logViewDef = this.elView.def;
                logNodeIndex = this.elDef.index;
            }
            var renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
            var currRenderNodeIndex = -1;
            var nodeLogger = function () {
                currRenderNodeIndex++;
                if (currRenderNodeIndex === renderNodeIndex) {
                    return (_a = console.error).bind.apply(_a, [console].concat(values));
                }
                else {
                    return NOOP;
                }
                var _a;
            };
            ((logViewDef.factory))(nodeLogger);
            if (currRenderNodeIndex < renderNodeIndex) {
                console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
                console.error.apply(console, values);
            }
        };
        return DebugContext_;
    }());
    function getRenderNodeIndex(viewDef$$1, nodeIndex) {
        var renderNodeIndex = -1;
        for (var i = 0; i <= nodeIndex; i++) {
            var nodeDef = viewDef$$1.nodes[i];
            if (nodeDef.flags & 3) {
                renderNodeIndex++;
            }
        }
        return renderNodeIndex;
    }
    function findHostElement(view) {
        while (view && !isComponentView(view)) {
            view = ((view.parent));
        }
        if (view.parent) {
            return asElementData(view.parent, ((viewParentEl(view))).index);
        }
        return null;
    }
    function collectReferences(view, nodeDef, references) {
        for (var refName in nodeDef.references) {
            references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
        }
    }
    function callWithDebugContext(action, fn, self, args) {
        var oldAction = _currentAction;
        var oldView = _currentView;
        var oldNodeIndex = _currentNodeIndex;
        try {
            _currentAction = action;
            var result = fn.apply(self, args);
            _currentView = oldView;
            _currentNodeIndex = oldNodeIndex;
            _currentAction = oldAction;
            return result;
        }
        catch (e) {
            if (isViewDebugError(e) || !_currentView) {
                throw e;
            }
            _currentView.state |= 4;
            throw viewWrappedDebugError(e, ((getCurrentDebugContext())));
        }
    }
    function getCurrentDebugContext() {
        return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
    }
    var DebugRendererFactory2 = (function () {
        function DebugRendererFactory2(delegate) {
            this.delegate = delegate;
        }
        DebugRendererFactory2.prototype.createRenderer = function (element, renderData) {
            return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
        };
        return DebugRendererFactory2;
    }());
    var DebugRenderer2 = (function () {
        function DebugRenderer2(delegate) {
            this.delegate = delegate;
        }
        Object.defineProperty(DebugRenderer2.prototype, "data", {
            get: function () { return this.delegate.data; },
            enumerable: true,
            configurable: true
        });
        DebugRenderer2.prototype.destroyNode = function (node) {
            removeDebugNodeFromIndex(((getDebugNode(node))));
            if (this.delegate.destroyNode) {
                this.delegate.destroyNode(node);
            }
        };
        DebugRenderer2.prototype.destroy = function () { this.delegate.destroy(); };
        DebugRenderer2.prototype.createElement = function (name, namespace) {
            var el = this.delegate.createElement(name, namespace);
            var debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                var debugEl = new DebugElement(el, null, debugCtx);
                debugEl.name = name;
                indexDebugNode(debugEl);
            }
            return el;
        };
        DebugRenderer2.prototype.createComment = function (value) {
            var comment = this.delegate.createComment(value);
            var debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                indexDebugNode(new DebugNode(comment, null, debugCtx));
            }
            return comment;
        };
        DebugRenderer2.prototype.createText = function (value) {
            var text = this.delegate.createText(value);
            var debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                indexDebugNode(new DebugNode(text, null, debugCtx));
            }
            return text;
        };
        DebugRenderer2.prototype.appendChild = function (parent, newChild) {
            var debugEl = getDebugNode(parent);
            var debugChildEl = getDebugNode(newChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.addChild(debugChildEl);
            }
            this.delegate.appendChild(parent, newChild);
        };
        DebugRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
            var debugEl = getDebugNode(parent);
            var debugChildEl = getDebugNode(newChild);
            var debugRefEl = ((getDebugNode(refChild)));
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.insertBefore(debugRefEl, debugChildEl);
            }
            this.delegate.insertBefore(parent, newChild, refChild);
        };
        DebugRenderer2.prototype.removeChild = function (parent, oldChild) {
            var debugEl = getDebugNode(parent);
            var debugChildEl = getDebugNode(oldChild);
            if (debugEl && debugChildEl && debugEl instanceof DebugElement) {
                debugEl.removeChild(debugChildEl);
            }
            this.delegate.removeChild(parent, oldChild);
        };
        DebugRenderer2.prototype.selectRootElement = function (selectorOrNode) {
            var el = this.delegate.selectRootElement(selectorOrNode);
            var debugCtx = getCurrentDebugContext();
            if (debugCtx) {
                indexDebugNode(new DebugElement(el, null, debugCtx));
            }
            return el;
        };
        DebugRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                var fullName = namespace ? namespace + ':' + name : name;
                debugEl.attributes[fullName] = value;
            }
            this.delegate.setAttribute(el, name, value, namespace);
        };
        DebugRenderer2.prototype.removeAttribute = function (el, name, namespace) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                var fullName = namespace ? namespace + ':' + name : name;
                debugEl.attributes[fullName] = null;
            }
            this.delegate.removeAttribute(el, name, namespace);
        };
        DebugRenderer2.prototype.addClass = function (el, name) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.classes[name] = true;
            }
            this.delegate.addClass(el, name);
        };
        DebugRenderer2.prototype.removeClass = function (el, name) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.classes[name] = false;
            }
            this.delegate.removeClass(el, name);
        };
        DebugRenderer2.prototype.setStyle = function (el, style, value, flags) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.styles[style] = value;
            }
            this.delegate.setStyle(el, style, value, flags);
        };
        DebugRenderer2.prototype.removeStyle = function (el, style, flags) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.styles[style] = null;
            }
            this.delegate.removeStyle(el, style, flags);
        };
        DebugRenderer2.prototype.setProperty = function (el, name, value) {
            var debugEl = getDebugNode(el);
            if (debugEl && debugEl instanceof DebugElement) {
                debugEl.properties[name] = value;
            }
            this.delegate.setProperty(el, name, value);
        };
        DebugRenderer2.prototype.listen = function (target, eventName, callback) {
            if (typeof target !== 'string') {
                var debugEl = getDebugNode(target);
                if (debugEl) {
                    debugEl.listeners.push(new EventListener(eventName, callback));
                }
            }
            return this.delegate.listen(target, eventName, callback);
        };
        DebugRenderer2.prototype.parentNode = function (node) { return this.delegate.parentNode(node); };
        DebugRenderer2.prototype.nextSibling = function (node) { return this.delegate.nextSibling(node); };
        DebugRenderer2.prototype.setValue = function (node, value) { return this.delegate.setValue(node, value); };
        return DebugRenderer2;
    }());
    function _iterableDiffersFactory() {
        return defaultIterableDiffers;
    }
    function _keyValueDiffersFactory() {
        return defaultKeyValueDiffers;
    }
    function _localeFactory(locale) {
        return locale || 'en-US';
    }
    function _initViewEngine() {
        initServicesIfNeeded();
    }
    var ApplicationModule = (function () {
        function ApplicationModule(appRef) {
        }
        return ApplicationModule;
    }());
    ApplicationModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        ApplicationRef_,
                        { provide: ApplicationRef, useExisting: ApplicationRef_ },
                        ApplicationInitStatus,
                        Compiler,
                        APP_ID_RANDOM_PROVIDER,
                        { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
                        { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
                        {
                            provide: LOCALE_ID,
                            useFactory: _localeFactory,
                            deps: [[new Inject(LOCALE_ID), new Optional(), new SkipSelf()]]
                        },
                        { provide: APP_INITIALIZER, useValue: _initViewEngine, multi: true },
                    ]
                },] },
    ];
    ApplicationModule.ctorParameters = function () {
        return [
            { type: ApplicationRef, },
        ];
    };
    var __extends$1 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var PlatformLocation = (function () {
        function PlatformLocation() {
        }
        PlatformLocation.prototype.getBaseHrefFromDOM = function () { };
        PlatformLocation.prototype.onPopState = function (fn) { };
        PlatformLocation.prototype.onHashChange = function (fn) { };
        Object.defineProperty(PlatformLocation.prototype, "pathname", {
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformLocation.prototype, "search", {
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PlatformLocation.prototype, "hash", {
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        PlatformLocation.prototype.replaceState = function (state$$1, title, url) { };
        PlatformLocation.prototype.pushState = function (state$$1, title, url) { };
        PlatformLocation.prototype.forward = function () { };
        PlatformLocation.prototype.back = function () { };
        return PlatformLocation;
    }());
    var LOCATION_INITIALIZED = new InjectionToken('Location Initialized');
    var LocationStrategy = (function () {
        function LocationStrategy() {
        }
        LocationStrategy.prototype.path = function (includeHash) { };
        LocationStrategy.prototype.prepareExternalUrl = function (internal) { };
        LocationStrategy.prototype.pushState = function (state$$1, title, url, queryParams) { };
        LocationStrategy.prototype.replaceState = function (state$$1, title, url, queryParams) { };
        LocationStrategy.prototype.forward = function () { };
        LocationStrategy.prototype.back = function () { };
        LocationStrategy.prototype.onPopState = function (fn) { };
        LocationStrategy.prototype.getBaseHref = function () { };
        return LocationStrategy;
    }());
    var APP_BASE_HREF = new InjectionToken('appBaseHref');
    var Location = (function () {
        function Location(platformStrategy) {
            var _this = this;
            this._subject = new EventEmitter();
            this._platformStrategy = platformStrategy;
            var browserBaseHref = this._platformStrategy.getBaseHref();
            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
            this._platformStrategy.onPopState(function (ev) {
                _this._subject.emit({
                    'url': _this.path(true),
                    'pop': true,
                    'type': ev.type,
                });
            });
        }
        Location.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            return this.normalize(this._platformStrategy.path(includeHash));
        };
        Location.prototype.isCurrentPathEqualTo = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
        };
        Location.prototype.normalize = function (url) {
            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
        };
        Location.prototype.prepareExternalUrl = function (url) {
            if (url && url[0] !== '/') {
                url = '/' + url;
            }
            return this._platformStrategy.prepareExternalUrl(url);
        };
        Location.prototype.go = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            this._platformStrategy.pushState(null, '', path, query);
        };
        Location.prototype.replaceState = function (path, query) {
            if (query === void 0) {
                query = '';
            }
            this._platformStrategy.replaceState(null, '', path, query);
        };
        Location.prototype.forward = function () { this._platformStrategy.forward(); };
        Location.prototype.back = function () { this._platformStrategy.back(); };
        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
            if (onThrow === void 0) {
                onThrow = null;
            }
            if (onReturn === void 0) {
                onReturn = null;
            }
            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
        };
        Location.normalizeQueryParams = function (params) {
            return params && params[0] !== '?' ? '?' + params : params;
        };
        Location.joinWithSlash = function (start, end) {
            if (start.length == 0) {
                return end;
            }
            if (end.length == 0) {
                return start;
            }
            var slashes = 0;
            if (start.endsWith('/')) {
                slashes++;
            }
            if (end.startsWith('/')) {
                slashes++;
            }
            if (slashes == 2) {
                return start + end.substring(1);
            }
            if (slashes == 1) {
                return start + end;
            }
            return start + '/' + end;
        };
        Location.stripTrailingSlash = function (url) { return url.replace(/\/$/, ''); };
        return Location;
    }());
    Location.decorators = [
        { type: Injectable },
    ];
    Location.ctorParameters = function () {
        return [
            { type: LocationStrategy, },
        ];
    };
    function _stripBaseHref(baseHref, url) {
        return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
    }
    function _stripIndexHtml(url) {
        return url.replace(/\/index.html$/, '');
    }
    var HashLocationStrategy = (function (_super) {
        __extends$1(HashLocationStrategy, _super);
        function HashLocationStrategy(_platformLocation, _baseHref) {
            var _this = _super.call(this) || this;
            _this._platformLocation = _platformLocation;
            _this._baseHref = '';
            if (_baseHref != null) {
                _this._baseHref = _baseHref;
            }
            return _this;
        }
        HashLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
        HashLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            var path = this._platformLocation.hash;
            if (path == null)
                path = '#';
            return path.length > 0 ? path.substring(1) : path;
        };
        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            var url = Location.joinWithSlash(this._baseHref, internal);
            return url.length > 0 ? ('#' + url) : url;
        };
        HashLocationStrategy.prototype.pushState = function (state$$1, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.pushState(state$$1, title, url);
        };
        HashLocationStrategy.prototype.replaceState = function (state$$1, title, path, queryParams) {
            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
            if (url.length == 0) {
                url = this._platformLocation.pathname;
            }
            this._platformLocation.replaceState(state$$1, title, url);
        };
        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
        return HashLocationStrategy;
    }(LocationStrategy));
    HashLocationStrategy.decorators = [
        { type: Injectable },
    ];
    HashLocationStrategy.ctorParameters = function () {
        return [
            { type: PlatformLocation, },
            { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
        ];
    };
    var PathLocationStrategy = (function (_super) {
        __extends$1(PathLocationStrategy, _super);
        function PathLocationStrategy(_platformLocation, href) {
            var _this = _super.call(this) || this;
            _this._platformLocation = _platformLocation;
            if (href == null) {
                href = _this._platformLocation.getBaseHrefFromDOM();
            }
            if (href == null) {
                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
            }
            _this._baseHref = href;
            return _this;
        }
        PathLocationStrategy.prototype.onPopState = function (fn) {
            this._platformLocation.onPopState(fn);
            this._platformLocation.onHashChange(fn);
        };
        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
            return Location.joinWithSlash(this._baseHref, internal);
        };
        PathLocationStrategy.prototype.path = function (includeHash) {
            if (includeHash === void 0) {
                includeHash = false;
            }
            var pathname = this._platformLocation.pathname +
                Location.normalizeQueryParams(this._platformLocation.search);
            var hash = this._platformLocation.hash;
            return hash && includeHash ? "" + pathname + hash : pathname;
        };
        PathLocationStrategy.prototype.pushState = function (state$$1, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
            this._platformLocation.pushState(state$$1, title, externalUrl);
        };
        PathLocationStrategy.prototype.replaceState = function (state$$1, title, url, queryParams) {
            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
            this._platformLocation.replaceState(state$$1, title, externalUrl);
        };
        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
        return PathLocationStrategy;
    }(LocationStrategy));
    PathLocationStrategy.decorators = [
        { type: Injectable },
    ];
    PathLocationStrategy.ctorParameters = function () {
        return [
            { type: PlatformLocation, },
            { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [APP_BASE_HREF,] },] },
        ];
    };
    var NgLocalization = (function () {
        function NgLocalization() {
        }
        NgLocalization.prototype.getPluralCategory = function (value) { };
        return NgLocalization;
    }());
    function getPluralCategory(value, cases, ngLocalization) {
        var key = "=" + value;
        if (cases.indexOf(key) > -1) {
            return key;
        }
        key = ngLocalization.getPluralCategory(value);
        if (cases.indexOf(key) > -1) {
            return key;
        }
        if (cases.indexOf('other') > -1) {
            return 'other';
        }
        throw new Error("No plural message found for value \"" + value + "\"");
    }
    var NgLocaleLocalization = (function (_super) {
        __extends$1(NgLocaleLocalization, _super);
        function NgLocaleLocalization(locale) {
            var _this = _super.call(this) || this;
            _this.locale = locale;
            return _this;
        }
        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
            var plural = getPluralCase(this.locale, value);
            switch (plural) {
                case Plural.Zero:
                    return 'zero';
                case Plural.One:
                    return 'one';
                case Plural.Two:
                    return 'two';
                case Plural.Few:
                    return 'few';
                case Plural.Many:
                    return 'many';
                default:
                    return 'other';
            }
        };
        return NgLocaleLocalization;
    }(NgLocalization));
    NgLocaleLocalization.decorators = [
        { type: Injectable },
    ];
    NgLocaleLocalization.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
        ];
    };
    var Plural = {};
    Plural.Zero = 0;
    Plural.One = 1;
    Plural.Two = 2;
    Plural.Few = 3;
    Plural.Many = 4;
    Plural.Other = 5;
    Plural[Plural.Zero] = "Zero";
    Plural[Plural.One] = "One";
    Plural[Plural.Two] = "Two";
    Plural[Plural.Few] = "Few";
    Plural[Plural.Many] = "Many";
    Plural[Plural.Other] = "Other";
    function getPluralCase(locale, nLike) {
        if (typeof nLike === 'string') {
            nLike = parseInt((nLike), 10);
        }
        var n = (nLike);
        var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
        var i = Math.floor(Math.abs(n));
        var v = nDecimal.length;
        var f = parseInt(nDecimal, 10);
        var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
        var lang = locale.split('-')[0].toLowerCase();
        switch (lang) {
            case 'af':
            case 'asa':
            case 'az':
            case 'bem':
            case 'bez':
            case 'bg':
            case 'brx':
            case 'ce':
            case 'cgg':
            case 'chr':
            case 'ckb':
            case 'ee':
            case 'el':
            case 'eo':
            case 'es':
            case 'eu':
            case 'fo':
            case 'fur':
            case 'gsw':
            case 'ha':
            case 'haw':
            case 'hu':
            case 'jgo':
            case 'jmc':
            case 'ka':
            case 'kk':
            case 'kkj':
            case 'kl':
            case 'ks':
            case 'ksb':
            case 'ky':
            case 'lb':
            case 'lg':
            case 'mas':
            case 'mgo':
            case 'ml':
            case 'mn':
            case 'nb':
            case 'nd':
            case 'ne':
            case 'nn':
            case 'nnh':
            case 'nyn':
            case 'om':
            case 'or':
            case 'os':
            case 'ps':
            case 'rm':
            case 'rof':
            case 'rwk':
            case 'saq':
            case 'seh':
            case 'sn':
            case 'so':
            case 'sq':
            case 'ta':
            case 'te':
            case 'teo':
            case 'tk':
            case 'tr':
            case 'ug':
            case 'uz':
            case 'vo':
            case 'vun':
            case 'wae':
            case 'xog':
                if (n === 1)
                    return Plural.One;
                return Plural.Other;
            case 'agq':
            case 'bas':
            case 'cu':
            case 'dav':
            case 'dje':
            case 'dua':
            case 'dyo':
            case 'ebu':
            case 'ewo':
            case 'guz':
            case 'kam':
            case 'khq':
            case 'ki':
            case 'kln':
            case 'kok':
            case 'ksf':
            case 'lrc':
            case 'lu':
            case 'luo':
            case 'luy':
            case 'mer':
            case 'mfe':
            case 'mgh':
            case 'mua':
            case 'mzn':
            case 'nmg':
            case 'nus':
            case 'qu':
            case 'rn':
            case 'rw':
            case 'sbp':
            case 'twq':
            case 'vai':
            case 'yav':
            case 'yue':
            case 'zgh':
            case 'ak':
            case 'ln':
            case 'mg':
            case 'pa':
            case 'ti':
                if (n === Math.floor(n) && n >= 0 && n <= 1)
                    return Plural.One;
                return Plural.Other;
            case 'am':
            case 'as':
            case 'bn':
            case 'fa':
            case 'gu':
            case 'hi':
            case 'kn':
            case 'mr':
            case 'zu':
                if (i === 0 || n === 1)
                    return Plural.One;
                return Plural.Other;
            case 'ar':
                if (n === 0)
                    return Plural.Zero;
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
                    return Plural.Few;
                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
                    return Plural.Many;
                return Plural.Other;
            case 'ast':
            case 'ca':
            case 'de':
            case 'en':
            case 'et':
            case 'fi':
            case 'fy':
            case 'gl':
            case 'it':
            case 'nl':
            case 'sv':
            case 'sw':
            case 'ur':
            case 'yi':
                if (i === 1 && v === 0)
                    return Plural.One;
                return Plural.Other;
            case 'be':
                if (n % 10 === 1 && !(n % 100 === 11))
                    return Plural.One;
                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
                    !(n % 100 >= 12 && n % 100 <= 14))
                    return Plural.Few;
                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
                    return Plural.Many;
                return Plural.Other;
            case 'br':
                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
                    return Plural.One;
                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
                    return Plural.Two;
                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
                        n % 100 >= 90 && n % 100 <= 99))
                    return Plural.Few;
                if (!(n === 0) && n % 1e6 === 0)
                    return Plural.Many;
                return Plural.Other;
            case 'bs':
            case 'hr':
            case 'sr':
                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
                    return Plural.One;
                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                    !(i % 100 >= 12 && i % 100 <= 14) ||
                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
                        !(f % 100 >= 12 && f % 100 <= 14))
                    return Plural.Few;
                return Plural.Other;
            case 'cs':
            case 'sk':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
                    return Plural.Few;
                if (!(v === 0))
                    return Plural.Many;
                return Plural.Other;
            case 'cy':
                if (n === 0)
                    return Plural.Zero;
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                if (n === 3)
                    return Plural.Few;
                if (n === 6)
                    return Plural.Many;
                return Plural.Other;
            case 'da':
                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
                    return Plural.One;
                return Plural.Other;
            case 'dsb':
            case 'hsb':
                if (v === 0 && i % 100 === 1 || f % 100 === 1)
                    return Plural.One;
                if (v === 0 && i % 100 === 2 || f % 100 === 2)
                    return Plural.Two;
                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
                    return Plural.Few;
                return Plural.Other;
            case 'ff':
            case 'fr':
            case 'hy':
            case 'kab':
                if (i === 0 || i === 1)
                    return Plural.One;
                return Plural.Other;
            case 'fil':
                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
                    return Plural.One;
                return Plural.Other;
            case 'ga':
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                if (n === Math.floor(n) && n >= 3 && n <= 6)
                    return Plural.Few;
                if (n === Math.floor(n) && n >= 7 && n <= 10)
                    return Plural.Many;
                return Plural.Other;
            case 'gd':
                if (n === 1 || n === 11)
                    return Plural.One;
                if (n === 2 || n === 12)
                    return Plural.Two;
                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
                    return Plural.Few;
                return Plural.Other;
            case 'gv':
                if (v === 0 && i % 10 === 1)
                    return Plural.One;
                if (v === 0 && i % 10 === 2)
                    return Plural.Two;
                if (v === 0 &&
                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
                    return Plural.Few;
                if (!(v === 0))
                    return Plural.Many;
                return Plural.Other;
            case 'he':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (i === 2 && v === 0)
                    return Plural.Two;
                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
                    return Plural.Many;
                return Plural.Other;
            case 'is':
                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
                    return Plural.One;
                return Plural.Other;
            case 'ksh':
                if (n === 0)
                    return Plural.Zero;
                if (n === 1)
                    return Plural.One;
                return Plural.Other;
            case 'kw':
            case 'naq':
            case 'se':
            case 'smn':
                if (n === 1)
                    return Plural.One;
                if (n === 2)
                    return Plural.Two;
                return Plural.Other;
            case 'lag':
                if (n === 0)
                    return Plural.Zero;
                if ((i === 0 || i === 1) && !(n === 0))
                    return Plural.One;
                return Plural.Other;
            case 'lt':
                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
                    return Plural.One;
                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
                    !(n % 100 >= 11 && n % 100 <= 19))
                    return Plural.Few;
                if (!(f === 0))
                    return Plural.Many;
                return Plural.Other;
            case 'lv':
            case 'prg':
                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
                    return Plural.Zero;
                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
                    !(v === 2) && f % 10 === 1)
                    return Plural.One;
                return Plural.Other;
            case 'mk':
                if (v === 0 && i % 10 === 1 || f % 10 === 1)
                    return Plural.One;
                return Plural.Other;
            case 'mt':
                if (n === 1)
                    return Plural.One;
                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
                    return Plural.Few;
                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
                    return Plural.Many;
                return Plural.Other;
            case 'pl':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                    !(i % 100 >= 12 && i % 100 <= 14))
                    return Plural.Few;
                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
                    return Plural.Many;
                return Plural.Other;
            case 'pt':
                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
                    return Plural.One;
                return Plural.Other;
            case 'ro':
                if (i === 1 && v === 0)
                    return Plural.One;
                if (!(v === 0) || n === 0 ||
                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
                    return Plural.Few;
                return Plural.Other;
            case 'ru':
            case 'uk':
                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
                    return Plural.One;
                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
                    !(i % 100 >= 12 && i % 100 <= 14))
                    return Plural.Few;
                if (v === 0 && i % 10 === 0 ||
                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
                    return Plural.Many;
                return Plural.Other;
            case 'shi':
                if (i === 0 || n === 1)
                    return Plural.One;
                if (n === Math.floor(n) && n >= 2 && n <= 10)
                    return Plural.Few;
                return Plural.Other;
            case 'si':
                if (n === 0 || n === 1 || i === 0 && f === 1)
                    return Plural.One;
                return Plural.Other;
            case 'sl':
                if (v === 0 && i % 100 === 1)
                    return Plural.One;
                if (v === 0 && i % 100 === 2)
                    return Plural.Two;
                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
                    return Plural.Few;
                return Plural.Other;
            case 'tzm':
                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
                    return Plural.One;
                return Plural.Other;
            default:
                return Plural.Other;
        }
    }
    var NgClass = (function () {
        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
            this._iterableDiffers = _iterableDiffers;
            this._keyValueDiffers = _keyValueDiffers;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
            this._initialClasses = [];
        }
        Object.defineProperty(NgClass.prototype, "klass", {
            set: function (v) {
                this._applyInitialClasses(true);
                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
                this._applyInitialClasses(false);
                this._applyClasses(this._rawClass, false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgClass.prototype, "ngClass", {
            set: function (v) {
                this._cleanupClasses(this._rawClass);
                this._iterableDiffer = null;
                this._keyValueDiffer = null;
                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
                if (this._rawClass) {
                    if (isListLikeIterable(this._rawClass)) {
                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
                    }
                    else {
                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        NgClass.prototype.ngDoCheck = function () {
            if (this._iterableDiffer) {
                var iterableChanges = this._iterableDiffer.diff((this._rawClass));
                if (iterableChanges) {
                    this._applyIterableChanges(iterableChanges);
                }
            }
            else if (this._keyValueDiffer) {
                var keyValueChanges = this._keyValueDiffer.diff((this._rawClass));
                if (keyValueChanges) {
                    this._applyKeyValueChanges(keyValueChanges);
                }
            }
        };
        NgClass.prototype._cleanupClasses = function (rawClassVal) {
            this._applyClasses(rawClassVal, true);
            this._applyInitialClasses(false);
        };
        NgClass.prototype._applyKeyValueChanges = function (changes) {
            var _this = this;
            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
            changes.forEachRemovedItem(function (record) {
                if (record.previousValue) {
                    _this._toggleClass(record.key, false);
                }
            });
        };
        NgClass.prototype._applyIterableChanges = function (changes) {
            var _this = this;
            changes.forEachAddedItem(function (record) {
                if (typeof record.item === 'string') {
                    _this._toggleClass(record.item, true);
                }
                else {
                    throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
                }
            });
            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
        };
        NgClass.prototype._applyInitialClasses = function (isCleanup) {
            var _this = this;
            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
        };
        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
            var _this = this;
            if (rawClassVal) {
                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                    ((rawClassVal)).forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
                }
                else {
                    Object.keys(rawClassVal).forEach(function (klass) {
                        if (rawClassVal[klass] != null)
                            _this._toggleClass(klass, !isCleanup);
                    });
                }
            }
        };
        NgClass.prototype._toggleClass = function (klass, enabled) {
            var _this = this;
            klass = klass.trim();
            if (klass) {
                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, !!enabled); });
            }
        };
        return NgClass;
    }());
    NgClass.decorators = [
        { type: Directive, args: [{ selector: '[ngClass]' },] },
    ];
    NgClass.ctorParameters = function () {
        return [
            { type: IterableDiffers, },
            { type: KeyValueDiffers, },
            { type: ElementRef, },
            { type: Renderer, },
        ];
    };
    NgClass.propDecorators = {
        'klass': [{ type: Input, args: ['class',] },],
        'ngClass': [{ type: Input },],
    };
    var NgComponentOutlet = (function () {
        function NgComponentOutlet(_viewContainerRef) {
            this._viewContainerRef = _viewContainerRef;
            this._componentRef = null;
            this._moduleRef = null;
        }
        NgComponentOutlet.prototype.ngOnChanges = function (changes) {
            this._viewContainerRef.clear();
            this._componentRef = null;
            if (this.ngComponentOutlet) {
                var elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
                if (changes['ngComponentOutletNgModuleFactory']) {
                    if (this._moduleRef)
                        this._moduleRef.destroy();
                    if (this.ngComponentOutletNgModuleFactory) {
                        var parentModule = elInjector.get(NgModuleRef);
                        this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                    }
                    else {
                        this._moduleRef = null;
                    }
                }
                var componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
                    elInjector.get(ComponentFactoryResolver);
                var componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
                this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
            }
        };
        NgComponentOutlet.prototype.ngOnDestroy = function () {
            if (this._moduleRef)
                this._moduleRef.destroy();
        };
        return NgComponentOutlet;
    }());
    NgComponentOutlet.decorators = [
        { type: Directive, args: [{ selector: '[ngComponentOutlet]' },] },
    ];
    NgComponentOutlet.ctorParameters = function () {
        return [
            { type: ViewContainerRef, },
        ];
    };
    NgComponentOutlet.propDecorators = {
        'ngComponentOutlet': [{ type: Input },],
        'ngComponentOutletInjector': [{ type: Input },],
        'ngComponentOutletContent': [{ type: Input },],
        'ngComponentOutletNgModuleFactory': [{ type: Input },],
    };
    var NgForOfContext = (function () {
        function NgForOfContext($implicit, ngForOf, index, count) {
            this.$implicit = $implicit;
            this.ngForOf = ngForOf;
            this.index = index;
            this.count = count;
        }
        Object.defineProperty(NgForOfContext.prototype, "first", {
            get: function () { return this.index === 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOfContext.prototype, "last", {
            get: function () { return this.index === this.count - 1; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOfContext.prototype, "even", {
            get: function () { return this.index % 2 === 0; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOfContext.prototype, "odd", {
            get: function () { return !this.even; },
            enumerable: true,
            configurable: true
        });
        return NgForOfContext;
    }());
    var NgForOf = (function () {
        function NgForOf(_viewContainer, _template, _differs) {
            this._viewContainer = _viewContainer;
            this._template = _template;
            this._differs = _differs;
            this._differ = null;
        }
        Object.defineProperty(NgForOf.prototype, "ngForTrackBy", {
            get: function () { return this._trackByFn; },
            set: function (fn) {
                if (isDevMode() && fn != null && typeof fn !== 'function') {
                    if ((console) && (console.warn)) {
                        console.warn("trackBy must be a function, but received " + JSON.stringify(fn) + ". " +
                            "See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.");
                    }
                }
                this._trackByFn = fn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForOf.prototype, "ngForTemplate", {
            set: function (value) {
                if (value) {
                    this._template = value;
                }
            },
            enumerable: true,
            configurable: true
        });
        NgForOf.prototype.ngOnChanges = function (changes) {
            if ('ngForOf' in changes) {
                var value = changes['ngForOf'].currentValue;
                if (!this._differ && value) {
                    try {
                        this._differ = this._differs.find(value).create(this.ngForTrackBy);
                    }
                    catch (e) {
                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
                    }
                }
            }
        };
        NgForOf.prototype.ngDoCheck = function () {
            if (this._differ) {
                var changes = this._differ.diff(this.ngForOf);
                if (changes)
                    this._applyChanges(changes);
            }
        };
        NgForOf.prototype._applyChanges = function (changes) {
            var _this = this;
            var insertTuples = [];
            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
                if (item.previousIndex == null) {
                    var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForOfContext(null, _this.ngForOf, null, null), currentIndex);
                    var tuple = new RecordViewTuple(item, view);
                    insertTuples.push(tuple);
                }
                else if (currentIndex == null) {
                    _this._viewContainer.remove(adjustedPreviousIndex);
                }
                else {
                    var view = _this._viewContainer.get(adjustedPreviousIndex);
                    _this._viewContainer.move(view, currentIndex);
                    var tuple = new RecordViewTuple(item, (view));
                    insertTuples.push(tuple);
                }
            });
            for (var i = 0; i < insertTuples.length; i++) {
                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
            }
            for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
                var viewRef = (this._viewContainer.get(i));
                viewRef.context.index = i;
                viewRef.context.count = ilen;
            }
            changes.forEachIdentityChange(function (record) {
                var viewRef = (_this._viewContainer.get(record.currentIndex));
                viewRef.context.$implicit = record.item;
            });
        };
        NgForOf.prototype._perViewChange = function (view, record) {
            view.context.$implicit = record.item;
        };
        return NgForOf;
    }());
    NgForOf.decorators = [
        { type: Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
    ];
    NgForOf.ctorParameters = function () {
        return [
            { type: ViewContainerRef, },
            { type: TemplateRef, },
            { type: IterableDiffers, },
        ];
    };
    NgForOf.propDecorators = {
        'ngForOf': [{ type: Input },],
        'ngForTrackBy': [{ type: Input },],
        'ngForTemplate': [{ type: Input },],
    };
    var RecordViewTuple = (function () {
        function RecordViewTuple(record, view) {
            this.record = record;
            this.view = view;
        }
        return RecordViewTuple;
    }());
    function getTypeNameForDebugging(type) {
        return type['name'] || typeof type;
    }
    var NgIf = (function () {
        function NgIf(_viewContainer, templateRef) {
            this._viewContainer = _viewContainer;
            this._context = new NgIfContext();
            this._thenTemplateRef = null;
            this._elseTemplateRef = null;
            this._thenViewRef = null;
            this._elseViewRef = null;
            this._thenTemplateRef = templateRef;
        }
        Object.defineProperty(NgIf.prototype, "ngIf", {
            set: function (condition) {
                this._context.$implicit = this._context.ngIf = condition;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgIf.prototype, "ngIfThen", {
            set: function (templateRef) {
                this._thenTemplateRef = templateRef;
                this._thenViewRef = null;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgIf.prototype, "ngIfElse", {
            set: function (templateRef) {
                this._elseTemplateRef = templateRef;
                this._elseViewRef = null;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        NgIf.prototype._updateView = function () {
            if (this._context.$implicit) {
                if (!this._thenViewRef) {
                    this._viewContainer.clear();
                    this._elseViewRef = null;
                    if (this._thenTemplateRef) {
                        this._thenViewRef =
                            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                    }
                }
            }
            else {
                if (!this._elseViewRef) {
                    this._viewContainer.clear();
                    this._thenViewRef = null;
                    if (this._elseTemplateRef) {
                        this._elseViewRef =
                            this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                    }
                }
            }
        };
        return NgIf;
    }());
    NgIf.decorators = [
        { type: Directive, args: [{ selector: '[ngIf]' },] },
    ];
    NgIf.ctorParameters = function () {
        return [
            { type: ViewContainerRef, },
            { type: TemplateRef, },
        ];
    };
    NgIf.propDecorators = {
        'ngIf': [{ type: Input },],
        'ngIfThen': [{ type: Input },],
        'ngIfElse': [{ type: Input },],
    };
    var NgIfContext = (function () {
        function NgIfContext() {
            this.$implicit = null;
            this.ngIf = null;
        }
        return NgIfContext;
    }());
    var SwitchView = (function () {
        function SwitchView(_viewContainerRef, _templateRef) {
            this._viewContainerRef = _viewContainerRef;
            this._templateRef = _templateRef;
            this._created = false;
        }
        SwitchView.prototype.create = function () {
            this._created = true;
            this._viewContainerRef.createEmbeddedView(this._templateRef);
        };
        SwitchView.prototype.destroy = function () {
            this._created = false;
            this._viewContainerRef.clear();
        };
        SwitchView.prototype.enforceState = function (created) {
            if (created && !this._created) {
                this.create();
            }
            else if (!created && this._created) {
                this.destroy();
            }
        };
        return SwitchView;
    }());
    var NgSwitch = (function () {
        function NgSwitch() {
            this._defaultUsed = false;
            this._caseCount = 0;
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
            set: function (newValue) {
                this._ngSwitch = newValue;
                if (this._caseCount === 0) {
                    this._updateDefaultCases(true);
                }
            },
            enumerable: true,
            configurable: true
        });
        NgSwitch.prototype._addCase = function () { return this._caseCount++; };
        NgSwitch.prototype._addDefault = function (view) {
            if (!this._defaultViews) {
                this._defaultViews = [];
            }
            this._defaultViews.push(view);
        };
        NgSwitch.prototype._matchCase = function (value) {
            var matched = value == this._ngSwitch;
            this._lastCasesMatched = this._lastCasesMatched || matched;
            this._lastCaseCheckIndex++;
            if (this._lastCaseCheckIndex === this._caseCount) {
                this._updateDefaultCases(!this._lastCasesMatched);
                this._lastCaseCheckIndex = 0;
                this._lastCasesMatched = false;
            }
            return matched;
        };
        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
            if (this._defaultViews && useDefault !== this._defaultUsed) {
                this._defaultUsed = useDefault;
                for (var i = 0; i < this._defaultViews.length; i++) {
                    var defaultView = this._defaultViews[i];
                    defaultView.enforceState(useDefault);
                }
            }
        };
        return NgSwitch;
    }());
    NgSwitch.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitch]' },] },
    ];
    NgSwitch.ctorParameters = function () { return []; };
    NgSwitch.propDecorators = {
        'ngSwitch': [{ type: Input },],
    };
    var NgSwitchCase = (function () {
        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
            this.ngSwitch = ngSwitch;
            ngSwitch._addCase();
            this._view = new SwitchView(viewContainer, templateRef);
        }
        NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
        return NgSwitchCase;
    }());
    NgSwitchCase.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitchCase]' },] },
    ];
    NgSwitchCase.ctorParameters = function () {
        return [
            { type: ViewContainerRef, },
            { type: TemplateRef, },
            { type: NgSwitch, decorators: [{ type: Host },] },
        ];
    };
    NgSwitchCase.propDecorators = {
        'ngSwitchCase': [{ type: Input },],
    };
    var NgSwitchDefault = (function () {
        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
        }
        return NgSwitchDefault;
    }());
    NgSwitchDefault.decorators = [
        { type: Directive, args: [{ selector: '[ngSwitchDefault]' },] },
    ];
    NgSwitchDefault.ctorParameters = function () {
        return [
            { type: ViewContainerRef, },
            { type: TemplateRef, },
            { type: NgSwitch, decorators: [{ type: Host },] },
        ];
    };
    var NgPlural = (function () {
        function NgPlural(_localization) {
            this._localization = _localization;
            this._caseViews = {};
        }
        Object.defineProperty(NgPlural.prototype, "ngPlural", {
            set: function (value) {
                this._switchValue = value;
                this._updateView();
            },
            enumerable: true,
            configurable: true
        });
        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
        NgPlural.prototype._updateView = function () {
            this._clearViews();
            var cases = Object.keys(this._caseViews);
            var key = getPluralCategory(this._switchValue, cases, this._localization);
            this._activateView(this._caseViews[key]);
        };
        NgPlural.prototype._clearViews = function () {
            if (this._activeView)
                this._activeView.destroy();
        };
        NgPlural.prototype._activateView = function (view) {
            if (view) {
                this._activeView = view;
                this._activeView.create();
            }
        };
        return NgPlural;
    }());
    NgPlural.decorators = [
        { type: Directive, args: [{ selector: '[ngPlural]' },] },
    ];
    NgPlural.ctorParameters = function () {
        return [
            { type: NgLocalization, },
        ];
    };
    NgPlural.propDecorators = {
        'ngPlural': [{ type: Input },],
    };
    var NgPluralCase = (function () {
        function NgPluralCase(value, template, viewContainer, ngPlural) {
            this.value = value;
            var isANumber = !isNaN(Number(value));
            ngPlural.addCase(isANumber ? "=" + value : value, new SwitchView(viewContainer, template));
        }
        return NgPluralCase;
    }());
    NgPluralCase.decorators = [
        { type: Directive, args: [{ selector: '[ngPluralCase]' },] },
    ];
    NgPluralCase.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Attribute, args: ['ngPluralCase',] },] },
            { type: TemplateRef, },
            { type: ViewContainerRef, },
            { type: NgPlural, decorators: [{ type: Host },] },
        ];
    };
    var NgStyle = (function () {
        function NgStyle(_differs, _ngEl, _renderer) {
            this._differs = _differs;
            this._ngEl = _ngEl;
            this._renderer = _renderer;
        }
        Object.defineProperty(NgStyle.prototype, "ngStyle", {
            set: function (v) {
                this._ngStyle = v;
                if (!this._differ && v) {
                    this._differ = this._differs.find(v).create();
                }
            },
            enumerable: true,
            configurable: true
        });
        NgStyle.prototype.ngDoCheck = function () {
            if (this._differ) {
                var changes = this._differ.diff(this._ngStyle);
                if (changes) {
                    this._applyChanges(changes);
                }
            }
        };
        NgStyle.prototype._applyChanges = function (changes) {
            var _this = this;
            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
        };
        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
            value = value != null && unit ? "" + value + unit : value;
            this._renderer.setElementStyle(this._ngEl.nativeElement, name, (value));
        };
        return NgStyle;
    }());
    NgStyle.decorators = [
        { type: Directive, args: [{ selector: '[ngStyle]' },] },
    ];
    NgStyle.ctorParameters = function () {
        return [
            { type: KeyValueDiffers, },
            { type: ElementRef, },
            { type: Renderer, },
        ];
    };
    NgStyle.propDecorators = {
        'ngStyle': [{ type: Input },],
    };
    var NgTemplateOutlet = (function () {
        function NgTemplateOutlet(_viewContainerRef) {
            this._viewContainerRef = _viewContainerRef;
        }
        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
            set: function (context) { this.ngTemplateOutletContext = context; },
            enumerable: true,
            configurable: true
        });
        NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
            if (this._viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
            }
            if (this.ngTemplateOutlet) {
                this._viewRef = this._viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext);
            }
        };
        return NgTemplateOutlet;
    }());
    NgTemplateOutlet.decorators = [
        { type: Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
    ];
    NgTemplateOutlet.ctorParameters = function () {
        return [
            { type: ViewContainerRef, },
        ];
    };
    NgTemplateOutlet.propDecorators = {
        'ngTemplateOutletContext': [{ type: Input },],
        'ngTemplateOutlet': [{ type: Input },],
        'ngOutletContext': [{ type: Input },],
    };
    var COMMON_DIRECTIVES = [
        NgClass,
        NgComponentOutlet,
        NgForOf,
        NgIf,
        NgTemplateOutlet,
        NgStyle,
        NgSwitch,
        NgSwitchCase,
        NgSwitchDefault,
        NgPlural,
        NgPluralCase,
    ];
    function invalidPipeArgumentError(type, value) {
        return Error("InvalidPipeArgument: '" + value + "' for pipe '" + stringify(type) + "'");
    }
    var ObservableStrategy = (function () {
        function ObservableStrategy() {
        }
        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
        };
        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
        return ObservableStrategy;
    }());
    var PromiseStrategy = (function () {
        function PromiseStrategy() {
        }
        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
            return async.then(updateLatestValue, function (e) { throw e; });
        };
        PromiseStrategy.prototype.dispose = function (subscription) { };
        PromiseStrategy.prototype.onDestroy = function (subscription) { };
        return PromiseStrategy;
    }());
    var _promiseStrategy = new PromiseStrategy();
    var _observableStrategy = new ObservableStrategy();
    var AsyncPipe = (function () {
        function AsyncPipe(_ref) {
            this._ref = _ref;
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
            this._strategy = null;
        }
        AsyncPipe.prototype.ngOnDestroy = function () {
            if (this._subscription) {
                this._dispose();
            }
        };
        AsyncPipe.prototype.transform = function (obj) {
            if (!this._obj) {
                if (obj) {
                    this._subscribe(obj);
                }
                this._latestReturnedValue = this._latestValue;
                return this._latestValue;
            }
            if (obj !== this._obj) {
                this._dispose();
                return this.transform((obj));
            }
            if (this._latestValue === this._latestReturnedValue) {
                return this._latestReturnedValue;
            }
            this._latestReturnedValue = this._latestValue;
            return WrappedValue.wrap(this._latestValue);
        };
        AsyncPipe.prototype._subscribe = function (obj) {
            var _this = this;
            this._obj = obj;
            this._strategy = this._selectStrategy(obj);
            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
        };
        AsyncPipe.prototype._selectStrategy = function (obj) {
            if (isPromise(obj)) {
                return _promiseStrategy;
            }
            if (isObservable(obj)) {
                return _observableStrategy;
            }
            throw invalidPipeArgumentError(AsyncPipe, obj);
        };
        AsyncPipe.prototype._dispose = function () {
            this._strategy.dispose(this._subscription);
            this._latestValue = null;
            this._latestReturnedValue = null;
            this._subscription = null;
            this._obj = null;
        };
        AsyncPipe.prototype._updateLatestValue = function (async, value) {
            if (async === this._obj) {
                this._latestValue = value;
                this._ref.markForCheck();
            }
        };
        return AsyncPipe;
    }());
    AsyncPipe.decorators = [
        { type: Pipe, args: [{ name: 'async', pure: false },] },
    ];
    AsyncPipe.ctorParameters = function () {
        return [
            { type: ChangeDetectorRef, },
        ];
    };
    var LowerCasePipe = (function () {
        function LowerCasePipe() {
        }
        LowerCasePipe.prototype.transform = function (value) {
            if (!value)
                return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(LowerCasePipe, value);
            }
            return value.toLowerCase();
        };
        return LowerCasePipe;
    }());
    LowerCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'lowercase' },] },
    ];
    LowerCasePipe.ctorParameters = function () { return []; };
    function titleCaseWord(word) {
        if (!word)
            return word;
        return word[0].toUpperCase() + word.substr(1).toLowerCase();
    }
    var TitleCasePipe = (function () {
        function TitleCasePipe() {
        }
        TitleCasePipe.prototype.transform = function (value) {
            if (!value)
                return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(TitleCasePipe, value);
            }
            return value.split(/\b/g).map(function (word) { return titleCaseWord(word); }).join('');
        };
        return TitleCasePipe;
    }());
    TitleCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'titlecase' },] },
    ];
    TitleCasePipe.ctorParameters = function () { return []; };
    var UpperCasePipe = (function () {
        function UpperCasePipe() {
        }
        UpperCasePipe.prototype.transform = function (value) {
            if (!value)
                return value;
            if (typeof value !== 'string') {
                throw invalidPipeArgumentError(UpperCasePipe, value);
            }
            return value.toUpperCase();
        };
        return UpperCasePipe;
    }());
    UpperCasePipe.decorators = [
        { type: Pipe, args: [{ name: 'uppercase' },] },
    ];
    UpperCasePipe.ctorParameters = function () { return []; };
    var NumberFormatStyle = {};
    NumberFormatStyle.Decimal = 0;
    NumberFormatStyle.Percent = 1;
    NumberFormatStyle.Currency = 2;
    NumberFormatStyle[NumberFormatStyle.Decimal] = "Decimal";
    NumberFormatStyle[NumberFormatStyle.Percent] = "Percent";
    NumberFormatStyle[NumberFormatStyle.Currency] = "Currency";
    var NumberFormatter = (function () {
        function NumberFormatter() {
        }
        NumberFormatter.format = function (num, locale, style$$1, _a) {
            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
            var options = {
                minimumIntegerDigits: minimumIntegerDigits,
                minimumFractionDigits: minimumFractionDigits,
                maximumFractionDigits: maximumFractionDigits,
                style: NumberFormatStyle[style$$1].toLowerCase()
            };
            if (style$$1 == NumberFormatStyle.Currency) {
                options.currency = currency;
                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
            }
            return new Intl.NumberFormat(locale, options).format(num);
        };
        return NumberFormatter;
    }());
    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
    var PATTERN_ALIASES = {
        'yMMMdjms': datePartGetterFactory(combine([
            digitCondition('year', 1),
            nameCondition('month', 3),
            digitCondition('day', 1),
            digitCondition('hour', 1),
            digitCondition('minute', 1),
            digitCondition('second', 1),
        ])),
        'yMdjm': datePartGetterFactory(combine([
            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
            digitCondition('hour', 1), digitCondition('minute', 1)
        ])),
        'yMMMMEEEEd': datePartGetterFactory(combine([
            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
            digitCondition('day', 1)
        ])),
        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
    };
    var DATE_FORMATS = {
        'yyyy': datePartGetterFactory(digitCondition('year', 4)),
        'yy': datePartGetterFactory(digitCondition('year', 2)),
        'y': datePartGetterFactory(digitCondition('year', 1)),
        'MMMM': datePartGetterFactory(nameCondition('month', 4)),
        'MMM': datePartGetterFactory(nameCondition('month', 3)),
        'MM': datePartGetterFactory(digitCondition('month', 2)),
        'M': datePartGetterFactory(digitCondition('month', 1)),
        'LLLL': datePartGetterFactory(nameCondition('month', 4)),
        'L': datePartGetterFactory(nameCondition('month', 1)),
        'dd': datePartGetterFactory(digitCondition('day', 2)),
        'd': datePartGetterFactory(digitCondition('day', 1)),
        'HH': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
        'H': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
        'hh': digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
        'h': hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        'jj': datePartGetterFactory(digitCondition('hour', 2)),
        'j': datePartGetterFactory(digitCondition('hour', 1)),
        'mm': digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
        'm': datePartGetterFactory(digitCondition('minute', 1)),
        'ss': digitModifier(datePartGetterFactory(digitCondition('second', 2))),
        's': datePartGetterFactory(digitCondition('second', 1)),
        'sss': datePartGetterFactory(digitCondition('second', 3)),
        'EEEE': datePartGetterFactory(nameCondition('weekday', 4)),
        'EEE': datePartGetterFactory(nameCondition('weekday', 3)),
        'EE': datePartGetterFactory(nameCondition('weekday', 2)),
        'E': datePartGetterFactory(nameCondition('weekday', 1)),
        'a': hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
        'Z': timeZoneGetter('short'),
        'z': timeZoneGetter('long'),
        'ww': datePartGetterFactory({}),
        'w': datePartGetterFactory({}),
        'G': datePartGetterFactory(nameCondition('era', 1)),
        'GG': datePartGetterFactory(nameCondition('era', 2)),
        'GGG': datePartGetterFactory(nameCondition('era', 3)),
        'GGGG': datePartGetterFactory(nameCondition('era', 4))
    };
    function digitModifier(inner) {
        return function (date, locale) {
            var result = inner(date, locale);
            return result.length == 1 ? '0' + result : result;
        };
    }
    function hourClockExtractor(inner) {
        return function (date, locale) { return inner(date, locale).split(' ')[1]; };
    }
    function hourExtractor(inner) {
        return function (date, locale) { return inner(date, locale).split(' ')[0]; };
    }
    function intlDateFormat(date, locale, options) {
        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
    }
    function timeZoneGetter(timezone) {
        var options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
        return function (date, locale) {
            var result = intlDateFormat(date, locale, options);
            return result ? result.substring(3) : '';
        };
    }
    function hour12Modify(options, value) {
        options.hour12 = value;
        return options;
    }
    function digitCondition(prop, len) {
        var result = {};
        result[prop] = len === 2 ? '2-digit' : 'numeric';
        return result;
    }
    function nameCondition(prop, len) {
        var result = {};
        if (len < 4) {
            result[prop] = len > 1 ? 'short' : 'narrow';
        }
        else {
            result[prop] = 'long';
        }
        return result;
    }
    function combine(options) {
        return ((Object)).assign.apply(((Object)), [{}].concat(options));
    }
    function datePartGetterFactory(ret) {
        return function (date, locale) { return intlDateFormat(date, locale, ret); };
    }
    var DATE_FORMATTER_CACHE = new Map();
    function dateFormatter(format, date, locale) {
        var fn = PATTERN_ALIASES[format];
        if (fn)
            return fn(date, locale);
        var cacheKey = format;
        var parts = DATE_FORMATTER_CACHE.get(cacheKey);
        if (!parts) {
            parts = [];
            var match = void 0;
            DATE_FORMATS_SPLIT.exec(format);
            while (format) {
                match = DATE_FORMATS_SPLIT.exec(format);
                if (match) {
                    parts = parts.concat(match.slice(1));
                    format = parts.pop();
                }
                else {
                    parts.push(format);
                    format = null;
                }
            }
            DATE_FORMATTER_CACHE.set(cacheKey, parts);
        }
        return parts.reduce(function (text, part) {
            var fn = DATE_FORMATS[part];
            return text + (fn ? fn(date, locale) : partToTime(part));
        }, '');
    }
    function partToTime(part) {
        return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    }
    var DateFormatter = (function () {
        function DateFormatter() {
        }
        DateFormatter.format = function (date, locale, pattern) {
            return dateFormatter(pattern, date, locale);
        };
        return DateFormatter;
    }());
    var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
    function formatNumber(pipe, locale, value, style$$1, digits, currency, currencyAsSymbol) {
        if (currency === void 0) {
            currency = null;
        }
        if (currencyAsSymbol === void 0) {
            currencyAsSymbol = false;
        }
        if (value == null)
            return null;
        value = typeof value === 'string' && isNumeric(value) ? +value : value;
        if (typeof value !== 'number') {
            throw invalidPipeArgumentError(pipe, value);
        }
        var minInt;
        var minFraction;
        var maxFraction;
        if (style$$1 !== NumberFormatStyle.Currency) {
            minInt = 1;
            minFraction = 0;
            maxFraction = 3;
        }
        if (digits) {
            var parts = digits.match(_NUMBER_FORMAT_REGEXP);
            if (parts === null) {
                throw new Error(digits + " is not a valid digit info for number pipes");
            }
            if (parts[1] != null) {
                minInt = parseIntAutoRadix(parts[1]);
            }
            if (parts[3] != null) {
                minFraction = parseIntAutoRadix(parts[3]);
            }
            if (parts[5] != null) {
                maxFraction = parseIntAutoRadix(parts[5]);
            }
        }
        return NumberFormatter.format((value), locale, style$$1, {
            minimumIntegerDigits: minInt,
            minimumFractionDigits: minFraction,
            maximumFractionDigits: maxFraction,
            currency: currency,
            currencyAsSymbol: currencyAsSymbol,
        });
    }
    var DecimalPipe = (function () {
        function DecimalPipe(_locale) {
            this._locale = _locale;
        }
        DecimalPipe.prototype.transform = function (value, digits) {
            if (digits === void 0) {
                digits = null;
            }
            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
        };
        return DecimalPipe;
    }());
    DecimalPipe.decorators = [
        { type: Pipe, args: [{ name: 'number' },] },
    ];
    DecimalPipe.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
        ];
    };
    var PercentPipe = (function () {
        function PercentPipe(_locale) {
            this._locale = _locale;
        }
        PercentPipe.prototype.transform = function (value, digits) {
            if (digits === void 0) {
                digits = null;
            }
            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
        };
        return PercentPipe;
    }());
    PercentPipe.decorators = [
        { type: Pipe, args: [{ name: 'percent' },] },
    ];
    PercentPipe.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
        ];
    };
    var CurrencyPipe = (function () {
        function CurrencyPipe(_locale) {
            this._locale = _locale;
        }
        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
            if (currencyCode === void 0) {
                currencyCode = 'USD';
            }
            if (symbolDisplay === void 0) {
                symbolDisplay = false;
            }
            if (digits === void 0) {
                digits = null;
            }
            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
        };
        return CurrencyPipe;
    }());
    CurrencyPipe.decorators = [
        { type: Pipe, args: [{ name: 'currency' },] },
    ];
    CurrencyPipe.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
        ];
    };
    function parseIntAutoRadix(text) {
        var result = parseInt(text);
        if (isNaN(result)) {
            throw new Error('Invalid integer literal when parsing ' + text);
        }
        return result;
    }
    function isNumeric(value) {
        return !isNaN(value - parseFloat(value));
    }
    var ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
    var DatePipe = (function () {
        function DatePipe(_locale) {
            this._locale = _locale;
        }
        DatePipe.prototype.transform = function (value, pattern) {
            if (pattern === void 0) {
                pattern = 'mediumDate';
            }
            var date;
            if (isBlank(value) || value !== value)
                return null;
            if (typeof value === 'string') {
                value = value.trim();
            }
            if (isDate(value)) {
                date = value;
            }
            else if (isNumeric(value)) {
                date = new Date(parseFloat(value));
            }
            else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
                var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
                date = new Date(y, m - 1, d);
            }
            else {
                date = new Date(value);
            }
            if (!isDate(date)) {
                var match = void 0;
                if ((typeof value === 'string') && (match = value.match(ISO8601_DATE_REGEX))) {
                    date = isoStringToDate(match);
                }
                else {
                    throw invalidPipeArgumentError(DatePipe, value);
                }
            }
            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
        };
        return DatePipe;
    }());
    DatePipe._ALIASES = {
        'medium': 'yMMMdjms',
        'short': 'yMdjm',
        'fullDate': 'yMMMMEEEEd',
        'longDate': 'yMMMMd',
        'mediumDate': 'yMMMd',
        'shortDate': 'yMd',
        'mediumTime': 'jms',
        'shortTime': 'jm'
    };
    DatePipe.decorators = [
        { type: Pipe, args: [{ name: 'date', pure: true },] },
    ];
    DatePipe.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID,] },] },
        ];
    };
    function isBlank(obj) {
        return obj == null || obj === '';
    }
    function isDate(obj) {
        return obj instanceof Date && !isNaN(obj.valueOf());
    }
    function isoStringToDate(match) {
        var date = new Date(0);
        var tzHour = 0;
        var tzMin = 0;
        var dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
        var timeSetter = match[8] ? date.setUTCHours : date.setHours;
        if (match[9]) {
            tzHour = toInt(match[9] + match[10]);
            tzMin = toInt(match[9] + match[11]);
        }
        dateSetter.call(date, toInt(match[1]), toInt(match[2]) - 1, toInt(match[3]));
        var h = toInt(match[4] || '0') - tzHour;
        var m = toInt(match[5] || '0') - tzMin;
        var s = toInt(match[6] || '0');
        var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
        timeSetter.call(date, h, m, s, ms);
        return date;
    }
    function toInt(str) {
        return parseInt(str, 10);
    }
    var _INTERPOLATION_REGEXP = /#/g;
    var I18nPluralPipe = (function () {
        function I18nPluralPipe(_localization) {
            this._localization = _localization;
        }
        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
            if (value == null)
                return '';
            if (typeof pluralMap !== 'object' || pluralMap === null) {
                throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
            }
            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
        };
        return I18nPluralPipe;
    }());
    I18nPluralPipe.decorators = [
        { type: Pipe, args: [{ name: 'i18nPlural', pure: true },] },
    ];
    I18nPluralPipe.ctorParameters = function () {
        return [
            { type: NgLocalization, },
        ];
    };
    var I18nSelectPipe = (function () {
        function I18nSelectPipe() {
        }
        I18nSelectPipe.prototype.transform = function (value, mapping) {
            if (value == null)
                return '';
            if (typeof mapping !== 'object' || typeof value !== 'string') {
                throw invalidPipeArgumentError(I18nSelectPipe, mapping);
            }
            if (mapping.hasOwnProperty(value)) {
                return mapping[value];
            }
            if (mapping.hasOwnProperty('other')) {
                return mapping['other'];
            }
            return '';
        };
        return I18nSelectPipe;
    }());
    I18nSelectPipe.decorators = [
        { type: Pipe, args: [{ name: 'i18nSelect', pure: true },] },
    ];
    I18nSelectPipe.ctorParameters = function () { return []; };
    var JsonPipe = (function () {
        function JsonPipe() {
        }
        JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
        return JsonPipe;
    }());
    JsonPipe.decorators = [
        { type: Pipe, args: [{ name: 'json', pure: false },] },
    ];
    JsonPipe.ctorParameters = function () { return []; };
    var SlicePipe = (function () {
        function SlicePipe() {
        }
        SlicePipe.prototype.transform = function (value, start, end) {
            if (value == null)
                return value;
            if (!this.supports(value)) {
                throw invalidPipeArgumentError(SlicePipe, value);
            }
            return value.slice(start, end);
        };
        SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
        return SlicePipe;
    }());
    SlicePipe.decorators = [
        { type: Pipe, args: [{ name: 'slice', pure: false },] },
    ];
    SlicePipe.ctorParameters = function () { return []; };
    var COMMON_PIPES = [
        AsyncPipe,
        UpperCasePipe,
        LowerCasePipe,
        JsonPipe,
        SlicePipe,
        DecimalPipe,
        PercentPipe,
        TitleCasePipe,
        CurrencyPipe,
        DatePipe,
        I18nPluralPipe,
        I18nSelectPipe,
    ];
    var CommonModule = (function () {
        function CommonModule() {
        }
        return CommonModule;
    }());
    CommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                    exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                    providers: [
                        { provide: NgLocalization, useClass: NgLocaleLocalization },
                    ],
                },] },
    ];
    CommonModule.ctorParameters = function () { return []; };
    var PLATFORM_BROWSER_ID = 'browser';
    var VERSION$1 = new Version('4.0.1');
    var __extends = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var _DOM = null;
    function getDOM() {
        return _DOM;
    }
    function setRootDomAdapter(adapter) {
        if (!_DOM) {
            _DOM = adapter;
        }
    }
    var DomAdapter = (function () {
        function DomAdapter() {
            this.resourceLoaderType = null;
        }
        DomAdapter.prototype.hasProperty = function (element, name) { };
        DomAdapter.prototype.setProperty = function (el, name, value) { };
        DomAdapter.prototype.getProperty = function (el, name) { };
        DomAdapter.prototype.invoke = function (el, methodName, args) { };
        DomAdapter.prototype.logError = function (error) { };
        DomAdapter.prototype.log = function (error) { };
        DomAdapter.prototype.logGroup = function (error) { };
        DomAdapter.prototype.logGroupEnd = function () { };
        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
            get: function () { return this._attrToPropMap; },
            set: function (value) { this._attrToPropMap = value; },
            enumerable: true,
            configurable: true
        });
        DomAdapter.prototype.contains = function (nodeA, nodeB) { };
        DomAdapter.prototype.parse = function (templateHtml) { };
        DomAdapter.prototype.querySelector = function (el, selector) { };
        DomAdapter.prototype.querySelectorAll = function (el, selector) { };
        DomAdapter.prototype.on = function (el, evt, listener) { };
        DomAdapter.prototype.onAndCancel = function (el, evt, listener) { };
        DomAdapter.prototype.dispatchEvent = function (el, evt) { };
        DomAdapter.prototype.createMouseEvent = function (eventType) { };
        DomAdapter.prototype.createEvent = function (eventType) { };
        DomAdapter.prototype.preventDefault = function (evt) { };
        DomAdapter.prototype.isPrevented = function (evt) { };
        DomAdapter.prototype.getInnerHTML = function (el) { };
        DomAdapter.prototype.getTemplateContent = function (el) { };
        DomAdapter.prototype.getOuterHTML = function (el) { };
        DomAdapter.prototype.nodeName = function (node) { };
        DomAdapter.prototype.nodeValue = function (node) { };
        DomAdapter.prototype.type = function (node) { };
        DomAdapter.prototype.content = function (node) { };
        DomAdapter.prototype.firstChild = function (el) { };
        DomAdapter.prototype.nextSibling = function (el) { };
        DomAdapter.prototype.parentElement = function (el) { };
        DomAdapter.prototype.childNodes = function (el) { };
        DomAdapter.prototype.childNodesAsList = function (el) { };
        DomAdapter.prototype.clearNodes = function (el) { };
        DomAdapter.prototype.appendChild = function (el, node) { };
        DomAdapter.prototype.removeChild = function (el, node) { };
        DomAdapter.prototype.replaceChild = function (el, newNode, oldNode) { };
        DomAdapter.prototype.remove = function (el) { };
        DomAdapter.prototype.insertBefore = function (parent, ref, node) { };
        DomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) { };
        DomAdapter.prototype.insertAfter = function (parent, el, node) { };
        DomAdapter.prototype.setInnerHTML = function (el, value) { };
        DomAdapter.prototype.getText = function (el) { };
        DomAdapter.prototype.setText = function (el, value) { };
        DomAdapter.prototype.getValue = function (el) { };
        DomAdapter.prototype.setValue = function (el, value) { };
        DomAdapter.prototype.getChecked = function (el) { };
        DomAdapter.prototype.setChecked = function (el, value) { };
        DomAdapter.prototype.createComment = function (text) { };
        DomAdapter.prototype.createTemplate = function (html) { };
        DomAdapter.prototype.createElement = function (tagName, doc) { };
        DomAdapter.prototype.createElementNS = function (ns, tagName, doc) { };
        DomAdapter.prototype.createTextNode = function (text, doc) { };
        DomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) { };
        DomAdapter.prototype.createStyleElement = function (css, doc) { };
        DomAdapter.prototype.createShadowRoot = function (el) { };
        DomAdapter.prototype.getShadowRoot = function (el) { };
        DomAdapter.prototype.getHost = function (el) { };
        DomAdapter.prototype.getDistributedNodes = function (el) { };
        DomAdapter.prototype.clone = function (node) { };
        DomAdapter.prototype.getElementsByClassName = function (element, name) { };
        DomAdapter.prototype.getElementsByTagName = function (element, name) { };
        DomAdapter.prototype.classList = function (element) { };
        DomAdapter.prototype.addClass = function (element, className) { };
        DomAdapter.prototype.removeClass = function (element, className) { };
        DomAdapter.prototype.hasClass = function (element, className) { };
        DomAdapter.prototype.setStyle = function (element, styleName, styleValue) { };
        DomAdapter.prototype.removeStyle = function (element, styleName) { };
        DomAdapter.prototype.getStyle = function (element, styleName) { };
        DomAdapter.prototype.hasStyle = function (element, styleName, styleValue) { };
        DomAdapter.prototype.tagName = function (element) { };
        DomAdapter.prototype.attributeMap = function (element) { };
        DomAdapter.prototype.hasAttribute = function (element, attribute) { };
        DomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) { };
        DomAdapter.prototype.getAttribute = function (element, attribute) { };
        DomAdapter.prototype.getAttributeNS = function (element, ns, attribute) { };
        DomAdapter.prototype.setAttribute = function (element, name, value) { };
        DomAdapter.prototype.setAttributeNS = function (element, ns, name, value) { };
        DomAdapter.prototype.removeAttribute = function (element, attribute) { };
        DomAdapter.prototype.removeAttributeNS = function (element, ns, attribute) { };
        DomAdapter.prototype.templateAwareRoot = function (el) { };
        DomAdapter.prototype.createHtmlDocument = function () { };
        DomAdapter.prototype.getBoundingClientRect = function (el) { };
        DomAdapter.prototype.getTitle = function (doc) { };
        DomAdapter.prototype.setTitle = function (doc, newTitle) { };
        DomAdapter.prototype.elementMatches = function (n, selector) { };
        DomAdapter.prototype.isTemplateElement = function (el) { };
        DomAdapter.prototype.isTextNode = function (node) { };
        DomAdapter.prototype.isCommentNode = function (node) { };
        DomAdapter.prototype.isElementNode = function (node) { };
        DomAdapter.prototype.hasShadowRoot = function (node) { };
        DomAdapter.prototype.isShadowRoot = function (node) { };
        DomAdapter.prototype.importIntoDoc = function (node) { };
        DomAdapter.prototype.adoptNode = function (node) { };
        DomAdapter.prototype.getHref = function (element) { };
        DomAdapter.prototype.getEventKey = function (event) { };
        DomAdapter.prototype.resolveAndSetHref = function (element, baseUrl, href) { };
        DomAdapter.prototype.supportsDOMEvents = function () { };
        DomAdapter.prototype.supportsNativeShadowDOM = function () { };
        DomAdapter.prototype.getGlobalEventTarget = function (doc, target) { };
        DomAdapter.prototype.getHistory = function () { };
        DomAdapter.prototype.getLocation = function () { };
        DomAdapter.prototype.getBaseHref = function (doc) { };
        DomAdapter.prototype.resetBaseElement = function () { };
        DomAdapter.prototype.getUserAgent = function () { };
        DomAdapter.prototype.setData = function (element, name, value) { };
        DomAdapter.prototype.getComputedStyle = function (element) { };
        DomAdapter.prototype.getData = function (element, name) { };
        DomAdapter.prototype.setGlobalVar = function (name, value) { };
        DomAdapter.prototype.supportsWebAnimation = function () { };
        DomAdapter.prototype.performanceNow = function () { };
        DomAdapter.prototype.getAnimationPrefix = function () { };
        DomAdapter.prototype.getTransitionEnd = function () { };
        DomAdapter.prototype.supportsAnimation = function () { };
        DomAdapter.prototype.supportsCookies = function () { };
        DomAdapter.prototype.getCookie = function (name) { };
        DomAdapter.prototype.setCookie = function (name, value) { };
        return DomAdapter;
    }());
    var GenericBrowserDomAdapter = (function (_super) {
        __extends(GenericBrowserDomAdapter, _super);
        function GenericBrowserDomAdapter() {
            var _this = _super.call(this) || this;
            _this._animationPrefix = null;
            _this._transitionEnd = null;
            try {
                var element_1 = _this.createElement('div', document);
                if (_this.getStyle(element_1, 'animationName') != null) {
                    _this._animationPrefix = '';
                }
                else {
                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
                    for (var i = 0; i < domPrefixes.length; i++) {
                        if (_this.getStyle(element_1, domPrefixes[i] + 'AnimationName') != null) {
                            _this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
                            break;
                        }
                    }
                }
                var transEndEventNames_1 = {
                    WebkitTransition: 'webkitTransitionEnd',
                    MozTransition: 'transitionend',
                    OTransition: 'oTransitionEnd otransitionend',
                    transition: 'transitionend'
                };
                Object.keys(transEndEventNames_1).forEach(function (key) {
                    if (_this.getStyle(element_1, key) != null) {
                        _this._transitionEnd = transEndEventNames_1[key];
                    }
                });
            }
            catch (e) {
                _this._animationPrefix = null;
                _this._transitionEnd = null;
            }
            return _this;
        }
        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return ((el)).getDistributedNodes(); };
        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
        };
        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
            return typeof ((document.body)).createShadowRoot === 'function';
        };
        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
            return this._animationPrefix != null && this._transitionEnd != null;
        };
        return GenericBrowserDomAdapter;
    }(DomAdapter));
    var _attrToPropMap = {
        'class': 'className',
        'innerHtml': 'innerHTML',
        'readonly': 'readOnly',
        'tabindex': 'tabIndex',
    };
    var DOM_KEY_LOCATION_NUMPAD = 3;
    var _keyMap = {
        '\b': 'Backspace',
        '\t': 'Tab',
        '\x7F': 'Delete',
        '\x1B': 'Escape',
        'Del': 'Delete',
        'Esc': 'Escape',
        'Left': 'ArrowLeft',
        'Right': 'ArrowRight',
        'Up': 'ArrowUp',
        'Down': 'ArrowDown',
        'Menu': 'ContextMenu',
        'Scroll': 'ScrollLock',
        'Win': 'OS'
    };
    var _chromeNumKeyPadMap = {
        'A': '1',
        'B': '2',
        'C': '3',
        'D': '4',
        'E': '5',
        'F': '6',
        'G': '7',
        'H': '8',
        'I': '9',
        'J': '*',
        'K': '+',
        'M': '-',
        'N': '.',
        'O': '/',
        '\x60': '0',
        '\x90': 'NumLock'
    };
    var nodeContains;
    if (_global['Node']) {
        nodeContains = _global['Node'].prototype.contains || function (node) {
            return !!(this.compareDocumentPosition(node) & 16);
        };
    }
    var BrowserDomAdapter = (function (_super) {
        __extends(BrowserDomAdapter, _super);
        function BrowserDomAdapter() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
        BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { ((el))[name] = value; };
        BrowserDomAdapter.prototype.getProperty = function (el, name) { return ((el))[name]; };
        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { ((el))[methodName].apply(((el)), args); };
        BrowserDomAdapter.prototype.logError = function (error) {
            if (window.console) {
                if (console.error) {
                    console.error(error);
                }
                else {
                    console.log(error);
                }
            }
        };
        BrowserDomAdapter.prototype.log = function (error) {
            if (window.console) {
                window.console.log && window.console.log(error);
            }
        };
        BrowserDomAdapter.prototype.logGroup = function (error) {
            if (window.console) {
                window.console.group && window.console.group(error);
            }
        };
        BrowserDomAdapter.prototype.logGroupEnd = function () {
            if (window.console) {
                window.console.groupEnd && window.console.groupEnd();
            }
        };
        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
            get: function () { return _attrToPropMap; },
            enumerable: true,
            configurable: true
        });
        BrowserDomAdapter.prototype.contains = function (nodeA, nodeB) { return nodeContains.call(nodeA, nodeB); };
        BrowserDomAdapter.prototype.querySelector = function (el, selector) { return el.querySelector(selector); };
        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
        BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
            el.addEventListener(evt, listener, false);
            return function () { el.removeEventListener(evt, listener, false); };
        };
        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
            var evt = document.createEvent('MouseEvent');
            evt.initEvent(eventType, true, true);
            return evt;
        };
        BrowserDomAdapter.prototype.createEvent = function (eventType) {
            var evt = document.createEvent('Event');
            evt.initEvent(eventType, true, true);
            return evt;
        };
        BrowserDomAdapter.prototype.preventDefault = function (evt) {
            evt.preventDefault();
            evt.returnValue = false;
        };
        BrowserDomAdapter.prototype.isPrevented = function (evt) {
            return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;
        };
        BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
        BrowserDomAdapter.prototype.getTemplateContent = function (el) {
            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
        };
        BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
        BrowserDomAdapter.prototype.type = function (node) { return node.type; };
        BrowserDomAdapter.prototype.content = function (node) {
            if (this.hasProperty(node, 'content')) {
                return ((node)).content;
            }
            else {
                return node;
            }
        };
        BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
        BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
        BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
        BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
        BrowserDomAdapter.prototype.childNodesAsList = function (el) {
            var childNodes = el.childNodes;
            var res = new Array(childNodes.length);
            for (var i = 0; i < childNodes.length; i++) {
                res[i] = childNodes[i];
            }
            return res;
        };
        BrowserDomAdapter.prototype.clearNodes = function (el) {
            while (el.firstChild) {
                el.removeChild(el.firstChild);
            }
        };
        BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
        BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
        BrowserDomAdapter.prototype.remove = function (node) {
            if (node.parentNode) {
                node.parentNode.removeChild(node);
            }
            return node;
        };
        BrowserDomAdapter.prototype.insertBefore = function (parent, ref, node) { parent.insertBefore(node, ref); };
        BrowserDomAdapter.prototype.insertAllBefore = function (parent, ref, nodes) {
            nodes.forEach(function (n) { return parent.insertBefore(n, ref); });
        };
        BrowserDomAdapter.prototype.insertAfter = function (parent, ref, node) { parent.insertBefore(node, ref.nextSibling); };
        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
        BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
        BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
        BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
        BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
        BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
        BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
        BrowserDomAdapter.prototype.createTemplate = function (html) {
            var t = document.createElement('template');
            t.innerHTML = html;
            return t;
        };
        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
            if (doc === void 0) {
                doc = document;
            }
            return doc.createElement(tagName);
        };
        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
            if (doc === void 0) {
                doc = document;
            }
            return doc.createElementNS(ns, tagName);
        };
        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
            if (doc === void 0) {
                doc = document;
            }
            return doc.createTextNode(text);
        };
        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
            if (doc === void 0) {
                doc = document;
            }
            var el = (doc.createElement('SCRIPT'));
            el.setAttribute(attrName, attrValue);
            return el;
        };
        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
            if (doc === void 0) {
                doc = document;
            }
            var style$$1 = (doc.createElement('style'));
            this.appendChild(style$$1, this.createTextNode(css));
            return style$$1;
        };
        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return ((el)).createShadowRoot(); };
        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return ((el)).shadowRoot; };
        BrowserDomAdapter.prototype.getHost = function (el) { return ((el)).host; };
        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
            return element.getElementsByClassName(name);
        };
        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
            return element.getElementsByTagName(name);
        };
        BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
        BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
        BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
        BrowserDomAdapter.prototype.hasClass = function (element, className) {
            return element.classList.contains(className);
        };
        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
            element.style[styleName] = styleValue;
        };
        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
            element.style[stylename] = '';
        };
        BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
            if (styleValue === void 0) {
                styleValue = null;
            }
            var value = this.getStyle(element, styleName) || '';
            return styleValue ? value == styleValue : value.length > 0;
        };
        BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
        BrowserDomAdapter.prototype.attributeMap = function (element) {
            var res = new Map();
            var elAttrs = element.attributes;
            for (var i = 0; i < elAttrs.length; i++) {
                var attrib = elAttrs[i];
                res.set(attrib.name, attrib.value);
            }
            return res;
        };
        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
            return element.hasAttribute(attribute);
        };
        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
            return element.hasAttributeNS(ns, attribute);
        };
        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
            return element.getAttribute(attribute);
        };
        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
            return element.getAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
            element.setAttributeNS(ns, name, value);
        };
        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
            element.removeAttributeNS(ns, name);
        };
        BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
        BrowserDomAdapter.prototype.createHtmlDocument = function () {
            return document.implementation.createHTMLDocument('fakeTitle');
        };
        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
            try {
                return el.getBoundingClientRect();
            }
            catch (e) {
                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
            }
        };
        BrowserDomAdapter.prototype.getTitle = function (doc) { return document.title; };
        BrowserDomAdapter.prototype.setTitle = function (doc, newTitle) { document.title = newTitle || ''; };
        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
            if (n instanceof HTMLElement) {
                return n.matches && n.matches(selector) ||
                    n.msMatchesSelector && n.msMatchesSelector(selector) ||
                    n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
            }
            return false;
        };
        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
        };
        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
            return node.shadowRoot != null && node instanceof HTMLElement;
        };
        BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
        BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
        BrowserDomAdapter.prototype.getHref = function (el) { return ((el)).href; };
        BrowserDomAdapter.prototype.getEventKey = function (event) {
            var key = event.key;
            if (key == null) {
                key = event.keyIdentifier;
                if (key == null) {
                    return 'Unidentified';
                }
                if (key.startsWith('U+')) {
                    key = String.fromCharCode(parseInt(key.substring(2), 16));
                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                        key = ((_chromeNumKeyPadMap))[key];
                    }
                }
            }
            return _keyMap[key] || key;
        };
        BrowserDomAdapter.prototype.getGlobalEventTarget = function (doc, target) {
            if (target === 'window') {
                return window;
            }
            if (target === 'document') {
                return document;
            }
            if (target === 'body') {
                return document.body;
            }
        };
        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
        BrowserDomAdapter.prototype.getBaseHref = function (doc) {
            var href = getBaseElementHref();
            return href == null ? null : relativePath(href);
        };
        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
        BrowserDomAdapter.prototype.setData = function (element, name, value) {
            this.setAttribute(element, 'data-' + name, value);
        };
        BrowserDomAdapter.prototype.getData = function (element, name) {
            return this.getAttribute(element, 'data-' + name);
        };
        BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(_global, path, value); };
        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
            return typeof ((Element)).prototype['animate'] === 'function';
        };
        BrowserDomAdapter.prototype.performanceNow = function () {
            return window.performance && window.performance.now ? window.performance.now() :
                new Date().getTime();
        };
        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
        BrowserDomAdapter.prototype.setCookie = function (name, value) {
            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
        };
        return BrowserDomAdapter;
    }(GenericBrowserDomAdapter));
    var baseElement = null;
    function getBaseElementHref() {
        if (!baseElement) {
            baseElement = document.querySelector('base');
            if (!baseElement) {
                return null;
            }
        }
        return baseElement.getAttribute('href');
    }
    var urlParsingNode;
    function relativePath(url) {
        if (!urlParsingNode) {
            urlParsingNode = document.createElement('a');
        }
        urlParsingNode.setAttribute('href', url);
        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
            '/' + urlParsingNode.pathname;
    }
    function parseCookieValue(cookieStr, name) {
        name = encodeURIComponent(name);
        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
            var cookie = _a[_i];
            var eqIndex = cookie.indexOf('=');
            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
            if (cookieName.trim() === name) {
                return decodeURIComponent(cookieValue);
            }
        }
        return null;
    }
    function setValueOnPath(global, path, value) {
        var parts = path.split('.');
        var obj = global;
        while (parts.length > 1) {
            var name = parts.shift();
            if (obj.hasOwnProperty(name) && obj[name] != null) {
                obj = obj[name];
            }
            else {
                obj = obj[name] = {};
            }
        }
        if (obj === undefined || obj === null) {
            obj = {};
        }
        obj[parts.shift()] = value;
    }
    var DOCUMENT = new InjectionToken('DocumentToken');
    function supportsState() {
        return !!window.history.pushState;
    }
    var BrowserPlatformLocation = (function (_super) {
        __extends(BrowserPlatformLocation, _super);
        function BrowserPlatformLocation(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            _this._init();
            return _this;
        }
        BrowserPlatformLocation.prototype._init = function () {
            this._location = getDOM().getLocation();
            this._history = getDOM().getHistory();
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
            get: function () { return this._location; },
            enumerable: true,
            configurable: true
        });
        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(this._doc); };
        BrowserPlatformLocation.prototype.onPopState = function (fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
        };
        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
            getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
        };
        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
            get: function () { return this._location.pathname; },
            set: function (newPath) { this._location.pathname = newPath; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
            get: function () { return this._location.search; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
            get: function () { return this._location.hash; },
            enumerable: true,
            configurable: true
        });
        BrowserPlatformLocation.prototype.pushState = function (state$$1, title, url) {
            if (supportsState()) {
                this._history.pushState(state$$1, title, url);
            }
            else {
                this._location.hash = url;
            }
        };
        BrowserPlatformLocation.prototype.replaceState = function (state$$1, title, url) {
            if (supportsState()) {
                this._history.replaceState(state$$1, title, url);
            }
            else {
                this._location.hash = url;
            }
        };
        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
        return BrowserPlatformLocation;
    }(PlatformLocation));
    BrowserPlatformLocation.decorators = [
        { type: Injectable },
    ];
    BrowserPlatformLocation.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var Meta = (function () {
        function Meta(_doc) {
            this._doc = _doc;
            this._dom = getDOM();
        }
        Meta.prototype.addTag = function (tag, forceCreation) {
            if (forceCreation === void 0) {
                forceCreation = false;
            }
            if (!tag)
                return null;
            return this._getOrCreateElement(tag, forceCreation);
        };
        Meta.prototype.addTags = function (tags, forceCreation) {
            var _this = this;
            if (forceCreation === void 0) {
                forceCreation = false;
            }
            if (!tags)
                return [];
            return tags.reduce(function (result, tag) {
                if (tag) {
                    result.push(_this._getOrCreateElement(tag, forceCreation));
                }
                return result;
            }, []);
        };
        Meta.prototype.getTag = function (attrSelector) {
            if (!attrSelector)
                return null;
            return this._dom.querySelector(this._doc, "meta[" + attrSelector + "]");
        };
        Meta.prototype.getTags = function (attrSelector) {
            if (!attrSelector)
                return [];
            var list = this._dom.querySelectorAll(this._doc, "meta[" + attrSelector + "]");
            return list ? [].slice.call(list) : [];
        };
        Meta.prototype.updateTag = function (tag, selector) {
            if (!tag)
                return null;
            selector = selector || this._parseSelector(tag);
            var meta = this.getTag(selector);
            if (meta) {
                return this._setMetaElementAttributes(tag, meta);
            }
            return this._getOrCreateElement(tag, true);
        };
        Meta.prototype.removeTag = function (attrSelector) { this.removeTagElement(this.getTag(attrSelector)); };
        Meta.prototype.removeTagElement = function (meta) {
            if (meta) {
                this._dom.remove(meta);
            }
        };
        Meta.prototype._getOrCreateElement = function (meta, forceCreation) {
            if (forceCreation === void 0) {
                forceCreation = false;
            }
            if (!forceCreation) {
                var selector = this._parseSelector(meta);
                var elem = this.getTag(selector);
                if (elem && this._containsAttributes(meta, elem))
                    return elem;
            }
            var element = (this._dom.createElement('meta'));
            this._setMetaElementAttributes(meta, element);
            var head = this._dom.getElementsByTagName(this._doc, 'head')[0];
            this._dom.appendChild(head, element);
            return element;
        };
        Meta.prototype._setMetaElementAttributes = function (tag, el) {
            var _this = this;
            Object.keys(tag).forEach(function (prop) { return _this._dom.setAttribute(el, prop, tag[prop]); });
            return el;
        };
        Meta.prototype._parseSelector = function (tag) {
            var attr = tag.name ? 'name' : 'property';
            return attr + "=\"" + tag[attr] + "\"";
        };
        Meta.prototype._containsAttributes = function (tag, elem) {
            var _this = this;
            return Object.keys(tag).every(function (key) { return _this._dom.getAttribute(elem, key) === tag[key]; });
        };
        return Meta;
    }());
    Meta.decorators = [
        { type: Injectable },
    ];
    Meta.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var TRANSITION_ID = new InjectionToken('TRANSITION_ID');
    function bootstrapListenerFactory(transitionId, document) {
        var factory = function () {
            var dom = getDOM();
            var styles = Array.prototype.slice.apply(dom.querySelectorAll(document, "style[ng-transition]"));
            styles.filter(function (el) { return dom.getAttribute(el, 'ng-transition') === transitionId; })
                .forEach(function (el) { return dom.remove(el); });
        };
        return factory;
    }
    var SERVER_TRANSITION_PROVIDERS = [
        {
            provide: APP_INITIALIZER,
            useFactory: bootstrapListenerFactory,
            deps: [TRANSITION_ID, DOCUMENT],
            multi: true
        },
    ];
    var BrowserGetTestability = (function () {
        function BrowserGetTestability() {
        }
        BrowserGetTestability.init = function () { setTestabilityGetter(new BrowserGetTestability()); };
        BrowserGetTestability.prototype.addToWindow = function (registry) {
            _global['getAngularTestability'] = function (elem, findInAncestors) {
                if (findInAncestors === void 0) {
                    findInAncestors = true;
                }
                var testability = registry.findTestabilityInTree(elem, findInAncestors);
                if (testability == null) {
                    throw new Error('Could not find testability for element.');
                }
                return testability;
            };
            _global['getAllAngularTestabilities'] = function () { return registry.getAllTestabilities(); };
            _global['getAllAngularRootElements'] = function () { return registry.getAllRootElements(); };
            var whenAllStable = function (callback) {
                var testabilities = _global['getAllAngularTestabilities']();
                var count = testabilities.length;
                var didWork = false;
                var decrement = function (didWork_) {
                    didWork = didWork || didWork_;
                    count--;
                    if (count == 0) {
                        callback(didWork);
                    }
                };
                testabilities.forEach(function (testability) {
                    testability.whenStable(decrement);
                });
            };
            if (!_global['frameworkStabilizers']) {
                _global['frameworkStabilizers'] = [];
            }
            _global['frameworkStabilizers'].push(whenAllStable);
        };
        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
            if (elem == null) {
                return null;
            }
            var t = registry.getTestability(elem);
            if (t != null) {
                return t;
            }
            else if (!findInAncestors) {
                return null;
            }
            if (getDOM().isShadowRoot(elem)) {
                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
            }
            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
        };
        return BrowserGetTestability;
    }());
    var Title = (function () {
        function Title(_doc) {
            this._doc = _doc;
        }
        Title.prototype.getTitle = function () { return getDOM().getTitle(this._doc); };
        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(this._doc, newTitle); };
        return Title;
    }());
    Title.decorators = [
        { type: Injectable },
    ];
    Title.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var __assign = (undefined && undefined.__assign) || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    var CORE_TOKENS = {
        'ApplicationRef': ApplicationRef,
        'NgZone': NgZone,
    };
    var INSPECT_GLOBAL_NAME = 'ng.probe';
    var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
    function inspectNativeElement(element) {
        return getDebugNode(element);
    }
    var NgProbeToken$1 = (function () {
        function NgProbeToken$1(name, token) {
            this.name = name;
            this.token = token;
        }
        return NgProbeToken$1;
    }());
    function _createNgProbe(extraTokens, coreTokens) {
        var tokens = (extraTokens || []).concat(coreTokens || []);
        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, __assign({}, CORE_TOKENS, _ngProbeTokensToMap(tokens || [])));
        return function () { return inspectNativeElement; };
    }
    function _ngProbeTokensToMap(tokens) {
        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
    }
    var ELEMENT_PROBE_PROVIDERS = [
        {
            provide: APP_INITIALIZER,
            useFactory: _createNgProbe,
            deps: [
                [NgProbeToken$1, new Optional()],
                [NgProbeToken, new Optional()],
            ],
            multi: true,
        },
    ];
    var EVENT_MANAGER_PLUGINS = new InjectionToken('EventManagerPlugins');
    var EventManager = (function () {
        function EventManager(plugins, _zone) {
            var _this = this;
            this._zone = _zone;
            this._eventNameToPlugin = new Map();
            plugins.forEach(function (p) { return p.manager = _this; });
            this._plugins = plugins.slice().reverse();
        }
        EventManager.prototype.addEventListener = function (element, eventName, handler) {
            var plugin = this._findPluginFor(eventName);
            return plugin.addEventListener(element, eventName, handler);
        };
        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
            var plugin = this._findPluginFor(eventName);
            return plugin.addGlobalEventListener(target, eventName, handler);
        };
        EventManager.prototype.getZone = function () { return this._zone; };
        EventManager.prototype._findPluginFor = function (eventName) {
            var plugin = this._eventNameToPlugin.get(eventName);
            if (plugin) {
                return plugin;
            }
            var plugins = this._plugins;
            for (var i = 0; i < plugins.length; i++) {
                var plugin_1 = plugins[i];
                if (plugin_1.supports(eventName)) {
                    this._eventNameToPlugin.set(eventName, plugin_1);
                    return plugin_1;
                }
            }
            throw new Error("No event manager plugin found for event " + eventName);
        };
        return EventManager;
    }());
    EventManager.decorators = [
        { type: Injectable },
    ];
    EventManager.ctorParameters = function () {
        return [
            { type: Array, decorators: [{ type: Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
            { type: NgZone, },
        ];
    };
    var EventManagerPlugin = (function () {
        function EventManagerPlugin(_doc) {
            this._doc = _doc;
        }
        EventManagerPlugin.prototype.supports = function (eventName) { };
        EventManagerPlugin.prototype.addEventListener = function (element, eventName, handler) { };
        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
            var target = getDOM().getGlobalEventTarget(this._doc, element);
            if (!target) {
                throw new Error("Unsupported event target " + target + " for event " + eventName);
            }
            return this.addEventListener(target, eventName, handler);
        };
        return EventManagerPlugin;
    }());
    var SharedStylesHost = (function () {
        function SharedStylesHost() {
            this._stylesSet = new Set();
        }
        SharedStylesHost.prototype.addStyles = function (styles) {
            var _this = this;
            var additions = new Set();
            styles.forEach(function (style$$1) {
                if (!_this._stylesSet.has(style$$1)) {
                    _this._stylesSet.add(style$$1);
                    additions.add(style$$1);
                }
            });
            this.onStylesAdded(additions);
        };
        SharedStylesHost.prototype.onStylesAdded = function (additions) { };
        SharedStylesHost.prototype.getAllStyles = function () { return Array.from(this._stylesSet); };
        return SharedStylesHost;
    }());
    SharedStylesHost.decorators = [
        { type: Injectable },
    ];
    SharedStylesHost.ctorParameters = function () { return []; };
    var DomSharedStylesHost = (function (_super) {
        __extends(DomSharedStylesHost, _super);
        function DomSharedStylesHost(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            _this._hostNodes = new Set();
            _this._styleNodes = new Set();
            _this._hostNodes.add(_doc.head);
            return _this;
        }
        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
            var _this = this;
            styles.forEach(function (style$$1) {
                var styleEl = _this._doc.createElement('style');
                styleEl.textContent = style$$1;
                _this._styleNodes.add(host.appendChild(styleEl));
            });
        };
        DomSharedStylesHost.prototype.addHost = function (hostNode) {
            this._addStylesToHost(this._stylesSet, hostNode);
            this._hostNodes.add(hostNode);
        };
        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
            var _this = this;
            this._hostNodes.forEach(function (hostNode) { return _this._addStylesToHost(additions, hostNode); });
        };
        DomSharedStylesHost.prototype.ngOnDestroy = function () { this._styleNodes.forEach(function (styleNode) { return getDOM().remove(styleNode); }); };
        return DomSharedStylesHost;
    }(SharedStylesHost));
    DomSharedStylesHost.decorators = [
        { type: Injectable },
    ];
    DomSharedStylesHost.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var NAMESPACE_URIS = {
        'svg': 'http://www.w3.org/2000/svg',
        'xhtml': 'http://www.w3.org/1999/xhtml',
        'xlink': 'http://www.w3.org/1999/xlink',
        'xml': 'http://www.w3.org/XML/1998/namespace',
        'xmlns': 'http://www.w3.org/2000/xmlns/',
    };
    var COMPONENT_REGEX = /%COMP%/g;
    var COMPONENT_VARIABLE = '%COMP%';
    var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
    var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
    function shimContentAttribute(componentShortId) {
        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }
    function shimHostAttribute(componentShortId) {
        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }
    function flattenStyles(compId, styles, target) {
        for (var i = 0; i < styles.length; i++) {
            var style$$1 = styles[i];
            if (Array.isArray(style$$1)) {
                flattenStyles(compId, style$$1, target);
            }
            else {
                style$$1 = style$$1.replace(COMPONENT_REGEX, compId);
                target.push(style$$1);
            }
        }
        return target;
    }
    function decoratePreventDefault(eventHandler) {
        return function (event) {
            var allowDefaultBehavior = eventHandler(event);
            if (allowDefaultBehavior === false) {
                event.preventDefault();
                event.returnValue = false;
            }
        };
    }
    var DomRendererFactory2 = (function () {
        function DomRendererFactory2(eventManager, sharedStylesHost) {
            this.eventManager = eventManager;
            this.sharedStylesHost = sharedStylesHost;
            this.rendererByCompId = new Map();
            this.defaultRenderer = new DefaultDomRenderer2(eventManager);
        }
        DomRendererFactory2.prototype.createRenderer = function (element, type) {
            if (!element || !type) {
                return this.defaultRenderer;
            }
            switch (type.encapsulation) {
                case ViewEncapsulation.Emulated: {
                    var renderer = this.rendererByCompId.get(type.id);
                    if (!renderer) {
                        renderer =
                            new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);
                        this.rendererByCompId.set(type.id, renderer);
                    }
                    ((renderer)).applyToHost(element);
                    return renderer;
                }
                case ViewEncapsulation.Native:
                    return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
                default: {
                    if (!this.rendererByCompId.has(type.id)) {
                        var styles = flattenStyles(type.id, type.styles, []);
                        this.sharedStylesHost.addStyles(styles);
                        this.rendererByCompId.set(type.id, this.defaultRenderer);
                    }
                    return this.defaultRenderer;
                }
            }
        };
        return DomRendererFactory2;
    }());
    DomRendererFactory2.decorators = [
        { type: Injectable },
    ];
    DomRendererFactory2.ctorParameters = function () {
        return [
            { type: EventManager, },
            { type: DomSharedStylesHost, },
        ];
    };
    var DefaultDomRenderer2 = (function () {
        function DefaultDomRenderer2(eventManager) {
            this.eventManager = eventManager;
            this.data = Object.create(null);
        }
        DefaultDomRenderer2.prototype.destroy = function () { };
        DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
            if (namespace) {
                return document.createElementNS(NAMESPACE_URIS[namespace], name);
            }
            return document.createElement(name);
        };
        DefaultDomRenderer2.prototype.createComment = function (value) { return document.createComment(value); };
        DefaultDomRenderer2.prototype.createText = function (value) { return document.createTextNode(value); };
        DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) { parent.appendChild(newChild); };
        DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
            if (parent) {
                parent.insertBefore(newChild, refChild);
            }
        };
        DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
            if (parent) {
                parent.removeChild(oldChild);
            }
        };
        DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode) {
            var el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
                selectorOrNode;
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
            el.textContent = '';
            return el;
        };
        DefaultDomRenderer2.prototype.parentNode = function (node) { return node.parentNode; };
        DefaultDomRenderer2.prototype.nextSibling = function (node) { return node.nextSibling; };
        DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
            if (namespace) {
                name = namespace + ":" + name;
                var namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.setAttributeNS(namespaceUri, name, value);
                }
                else {
                    el.setAttribute(name, value);
                }
            }
            else {
                el.setAttribute(name, value);
            }
        };
        DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
            if (namespace) {
                var namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.removeAttributeNS(namespaceUri, name);
                }
                else {
                    el.removeAttribute(namespace + ":" + name);
                }
            }
            else {
                el.removeAttribute(name);
            }
        };
        DefaultDomRenderer2.prototype.addClass = function (el, name) { el.classList.add(name); };
        DefaultDomRenderer2.prototype.removeClass = function (el, name) { el.classList.remove(name); };
        DefaultDomRenderer2.prototype.setStyle = function (el, style$$1, value, flags) {
            if (flags & RendererStyleFlags2.DashCase) {
                el.style.setProperty(style$$1, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');
            }
            else {
                el.style[style$$1] = value;
            }
        };
        DefaultDomRenderer2.prototype.removeStyle = function (el, style$$1, flags) {
            if (flags & RendererStyleFlags2.DashCase) {
                el.style.removeProperty(style$$1);
            }
            else {
                el.style[style$$1] = '';
            }
        };
        DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
            checkNoSyntheticProp(name, 'property');
            el[name] = value;
        };
        DefaultDomRenderer2.prototype.setValue = function (node, value) { node.nodeValue = value; };
        DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
            checkNoSyntheticProp(event, 'listener');
            if (typeof target === 'string') {
                return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
            }
            return ((this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))));
        };
        return DefaultDomRenderer2;
    }());
    var AT_CHARCODE = '@'.charCodeAt(0);
    function checkNoSyntheticProp(name, nameKind) {
        if (name.charCodeAt(0) === AT_CHARCODE) {
            throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
        }
    }
    var EmulatedEncapsulationDomRenderer2 = (function (_super) {
        __extends(EmulatedEncapsulationDomRenderer2, _super);
        function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component) {
            var _this = _super.call(this, eventManager) || this;
            _this.component = component;
            var styles = flattenStyles(component.id, component.styles, []);
            sharedStylesHost.addStyles(styles);
            _this.contentAttr = shimContentAttribute(component.id);
            _this.hostAttr = shimHostAttribute(component.id);
            return _this;
        }
        EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) { _super.prototype.setAttribute.call(this, element, this.hostAttr, ''); };
        EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
            var el = _super.prototype.createElement.call(this, parent, name);
            _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
            return el;
        };
        return EmulatedEncapsulationDomRenderer2;
    }(DefaultDomRenderer2));
    var ShadowDomRenderer = (function (_super) {
        __extends(ShadowDomRenderer, _super);
        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
            var _this = _super.call(this, eventManager) || this;
            _this.sharedStylesHost = sharedStylesHost;
            _this.hostEl = hostEl;
            _this.component = component;
            _this.shadowRoot = hostEl.createShadowRoot();
            _this.sharedStylesHost.addHost(_this.shadowRoot);
            var styles = flattenStyles(component.id, component.styles, []);
            for (var i = 0; i < styles.length; i++) {
                var styleEl = document.createElement('style');
                styleEl.textContent = styles[i];
                _this.shadowRoot.appendChild(styleEl);
            }
            return _this;
        }
        ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) { return node === this.hostEl ? this.shadowRoot : node; };
        ShadowDomRenderer.prototype.destroy = function () { this.sharedStylesHost.removeHost(this.shadowRoot); };
        ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
            return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
        };
        ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
            return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
        };
        ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
            return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
        };
        ShadowDomRenderer.prototype.parentNode = function (node) {
            return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
        };
        return ShadowDomRenderer;
    }(DefaultDomRenderer2));
    var DomEventsPlugin = (function (_super) {
        __extends(DomEventsPlugin, _super);
        function DomEventsPlugin(doc) {
            return _super.call(this, doc) || this;
        }
        DomEventsPlugin.prototype.supports = function (eventName) { return true; };
        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
            element.addEventListener(eventName, (handler), false);
            return function () { return element.removeEventListener(eventName, (handler), false); };
        };
        return DomEventsPlugin;
    }(EventManagerPlugin));
    DomEventsPlugin.decorators = [
        { type: Injectable },
    ];
    DomEventsPlugin.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var EVENT_NAMES = {
        'pan': true,
        'panstart': true,
        'panmove': true,
        'panend': true,
        'pancancel': true,
        'panleft': true,
        'panright': true,
        'panup': true,
        'pandown': true,
        'pinch': true,
        'pinchstart': true,
        'pinchmove': true,
        'pinchend': true,
        'pinchcancel': true,
        'pinchin': true,
        'pinchout': true,
        'press': true,
        'pressup': true,
        'rotate': true,
        'rotatestart': true,
        'rotatemove': true,
        'rotateend': true,
        'rotatecancel': true,
        'swipe': true,
        'swipeleft': true,
        'swiperight': true,
        'swipeup': true,
        'swipedown': true,
        'tap': true,
    };
    var HAMMER_GESTURE_CONFIG = new InjectionToken('HammerGestureConfig');
    var HammerGestureConfig = (function () {
        function HammerGestureConfig() {
            this.events = [];
            this.overrides = {};
        }
        HammerGestureConfig.prototype.buildHammer = function (element) {
            var mc = new Hammer(element);
            mc.get('pinch').set({ enable: true });
            mc.get('rotate').set({ enable: true });
            for (var eventName in this.overrides) {
                mc.get(eventName).set(this.overrides[eventName]);
            }
            return mc;
        };
        return HammerGestureConfig;
    }());
    HammerGestureConfig.decorators = [
        { type: Injectable },
    ];
    HammerGestureConfig.ctorParameters = function () { return []; };
    var HammerGesturesPlugin = (function (_super) {
        __extends(HammerGesturesPlugin, _super);
        function HammerGesturesPlugin(doc, _config) {
            var _this = _super.call(this, doc) || this;
            _this._config = _config;
            return _this;
        }
        HammerGesturesPlugin.prototype.supports = function (eventName) {
            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
                return false;
            }
            if (!((window)).Hammer) {
                throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
            }
            return true;
        };
        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var _this = this;
            var zone = this.manager.getZone();
            eventName = eventName.toLowerCase();
            return zone.runOutsideAngular(function () {
                var mc = _this._config.buildHammer(element);
                var callback = function (eventObj) {
                    zone.runGuarded(function () { handler(eventObj); });
                };
                mc.on(eventName, callback);
                return function () { return mc.off(eventName, callback); };
            });
        };
        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
        return HammerGesturesPlugin;
    }(EventManagerPlugin));
    HammerGesturesPlugin.decorators = [
        { type: Injectable },
    ];
    HammerGesturesPlugin.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
            { type: HammerGestureConfig, decorators: [{ type: Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
        ];
    };
    var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
    var MODIFIER_KEY_GETTERS = {
        'alt': function (event) { return event.altKey; },
        'control': function (event) { return event.ctrlKey; },
        'meta': function (event) { return event.metaKey; },
        'shift': function (event) { return event.shiftKey; }
    };
    var KeyEventsPlugin = (function (_super) {
        __extends(KeyEventsPlugin, _super);
        function KeyEventsPlugin(doc) {
            return _super.call(this, doc) || this;
        }
        KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
            var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
            return this.manager.getZone().runOutsideAngular(function () {
                return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
            });
        };
        KeyEventsPlugin.parseEventName = function (eventName) {
            var parts = eventName.toLowerCase().split('.');
            var domEventName = parts.shift();
            if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
                return null;
            }
            var key = KeyEventsPlugin._normalizeKey(parts.pop());
            var fullKey = '';
            MODIFIER_KEYS.forEach(function (modifierName) {
                var index = parts.indexOf(modifierName);
                if (index > -1) {
                    parts.splice(index, 1);
                    fullKey += modifierName + '.';
                }
            });
            fullKey += key;
            if (parts.length != 0 || key.length === 0) {
                return null;
            }
            var result = {};
            result['domEventName'] = domEventName;
            result['fullKey'] = fullKey;
            return result;
        };
        KeyEventsPlugin.getEventFullKey = function (event) {
            var fullKey = '';
            var key = getDOM().getEventKey(event);
            key = key.toLowerCase();
            if (key === ' ') {
                key = 'space';
            }
            else if (key === '.') {
                key = 'dot';
            }
            MODIFIER_KEYS.forEach(function (modifierName) {
                if (modifierName != key) {
                    var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                    if (modifierGetter(event)) {
                        fullKey += modifierName + '.';
                    }
                }
            });
            fullKey += key;
            return fullKey;
        };
        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
            return function (event) {
                if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                    zone.runGuarded(function () { return handler(event); });
                }
            };
        };
        KeyEventsPlugin._normalizeKey = function (keyName) {
            switch (keyName) {
                case 'esc':
                    return 'escape';
                default:
                    return keyName;
            }
        };
        return KeyEventsPlugin;
    }(EventManagerPlugin));
    KeyEventsPlugin.decorators = [
        { type: Injectable },
    ];
    KeyEventsPlugin.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
    function sanitizeUrl(url) {
        url = String(url);
        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
            return url;
        if (isDevMode()) {
            getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
        }
        return 'unsafe:' + url;
    }
    function sanitizeSrcset(srcset) {
        srcset = String(srcset);
        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
    }
    var inertElement = null;
    var DOM = null;
    function getInertElement() {
        if (inertElement)
            return inertElement;
        DOM = getDOM();
        var templateEl = DOM.createElement('template');
        if ('content' in templateEl)
            return templateEl;
        var doc = DOM.createHtmlDocument();
        inertElement = DOM.querySelector(doc, 'body');
        if (inertElement == null) {
            var html = DOM.createElement('html', doc);
            inertElement = DOM.createElement('body', doc);
            DOM.appendChild(html, inertElement);
            DOM.appendChild(doc, html);
        }
        return inertElement;
    }
    function tagSet(tags) {
        var res = {};
        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
            var t = _a[_i];
            res[t] = true;
        }
        return res;
    }
    function merge() {
        var sets = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sets[_i] = arguments[_i];
        }
        var res = {};
        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
            var s = sets_1[_a];
            for (var v in s) {
                if (s.hasOwnProperty(v))
                    res[v] = true;
            }
        }
        return res;
    }
    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
    var SRCSET_ATTRS = tagSet('srcset');
    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
        'valign,value,vspace,width');
    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
    var SanitizingHtmlSerializer = (function () {
        function SanitizingHtmlSerializer() {
            this.sanitizedSomething = false;
            this.buf = [];
        }
        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
            var current = el.firstChild;
            while (current) {
                if (DOM.isElementNode(current)) {
                    this.startElement((current));
                }
                else if (DOM.isTextNode(current)) {
                    this.chars(DOM.nodeValue(current));
                }
                else {
                    this.sanitizedSomething = true;
                }
                if (DOM.firstChild(current)) {
                    current = DOM.firstChild(current);
                    continue;
                }
                while (current) {
                    if (DOM.isElementNode(current)) {
                        this.endElement((current));
                    }
                    var next = checkClobberedElement(current, DOM.nextSibling(current));
                    if (next) {
                        current = next;
                        break;
                    }
                    current = checkClobberedElement(current, DOM.parentElement(current));
                }
            }
            return this.buf.join('');
        };
        SanitizingHtmlSerializer.prototype.startElement = function (element) {
            var _this = this;
            var tagName = DOM.nodeName(element).toLowerCase();
            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
                this.sanitizedSomething = true;
                return;
            }
            this.buf.push('<');
            this.buf.push(tagName);
            DOM.attributeMap(element).forEach(function (value, attrName) {
                var lower = attrName.toLowerCase();
                if (!VALID_ATTRS.hasOwnProperty(lower)) {
                    _this.sanitizedSomething = true;
                    return;
                }
                if (URI_ATTRS[lower])
                    value = sanitizeUrl(value);
                if (SRCSET_ATTRS[lower])
                    value = sanitizeSrcset(value);
                _this.buf.push(' ');
                _this.buf.push(attrName);
                _this.buf.push('="');
                _this.buf.push(encodeEntities(value));
                _this.buf.push('"');
            });
            this.buf.push('>');
        };
        SanitizingHtmlSerializer.prototype.endElement = function (current) {
            var tagName = DOM.nodeName(current).toLowerCase();
            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
                this.buf.push('</');
                this.buf.push(tagName);
                this.buf.push('>');
            }
        };
        SanitizingHtmlSerializer.prototype.chars = function (chars) { this.buf.push(encodeEntities(chars)); };
        return SanitizingHtmlSerializer;
    }());
    function checkClobberedElement(node, nextNode) {
        if (nextNode && DOM.contains(node, nextNode)) {
            throw new Error("Failed to sanitize html because the element is clobbered: " + DOM.getOuterHTML(node));
        }
        return nextNode;
    }
    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
    function encodeEntities(value) {
        return value.replace(/&/g, '&amp;')
            .replace(SURROGATE_PAIR_REGEXP, function (match) {
            var hi = match.charCodeAt(0);
            var low = match.charCodeAt(1);
            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
        })
            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
    function stripCustomNsAttrs(el) {
        DOM.attributeMap(el).forEach(function (_, attrName) {
            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                DOM.removeAttribute(el, attrName);
            }
        });
        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
            var n = _a[_i];
            if (DOM.isElementNode(n))
                stripCustomNsAttrs((n));
        }
    }
    function sanitizeHtml(defaultDoc, unsafeHtmlInput) {
        try {
            var containerEl = getInertElement();
            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
            var mXSSAttempts = 5;
            var parsedHtml = unsafeHtml;
            do {
                if (mXSSAttempts === 0) {
                    throw new Error('Failed to sanitize html because the input is unstable');
                }
                mXSSAttempts--;
                unsafeHtml = parsedHtml;
                DOM.setInnerHTML(containerEl, unsafeHtml);
                if (defaultDoc.documentMode) {
                    stripCustomNsAttrs(containerEl);
                }
                parsedHtml = DOM.getInnerHTML(containerEl);
            } while (unsafeHtml !== parsedHtml);
            var sanitizer = new SanitizingHtmlSerializer();
            var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
            var parent = DOM.getTemplateContent(containerEl) || containerEl;
            for (var _i = 0, _a = DOM.childNodesAsList(parent); _i < _a.length; _i++) {
                var child = _a[_i];
                DOM.removeChild(parent, child);
            }
            if (isDevMode() && sanitizer.sanitizedSomething) {
                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
            }
            return safeHtml;
        }
        catch (e) {
            inertElement = null;
            throw e;
        }
    }
    var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
    var COLOR_FNS = '(?:rgb|hsl)a?';
    var GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
    var CSS3_FNS = '(?:calc|attr)';
    var FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
    var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|" +
        ("(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + "|" + GRADIENTS + "|" + CSS3_FNS + ")") +
        (FN_ARGS + ")$"), 'g');
    var URL_RE = /^url\(([^)]+)\)$/;
    function hasBalancedQuotes(value) {
        var outsideSingle = true;
        var outsideDouble = true;
        for (var i = 0; i < value.length; i++) {
            var c = value.charAt(i);
            if (c === '\'' && outsideDouble) {
                outsideSingle = !outsideSingle;
            }
            else if (c === '"' && outsideSingle) {
                outsideDouble = !outsideDouble;
            }
        }
        return outsideSingle && outsideDouble;
    }
    function sanitizeStyle(value) {
        value = String(value).trim();
        if (!value)
            return '';
        var urlMatch = value.match(URL_RE);
        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
            return value;
        }
        if (isDevMode()) {
            getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
        }
        return 'unsafe';
    }
    var DomSanitizer = (function () {
        function DomSanitizer() {
        }
        DomSanitizer.prototype.sanitize = function (context, value) { };
        DomSanitizer.prototype.bypassSecurityTrustHtml = function (value) { };
        DomSanitizer.prototype.bypassSecurityTrustStyle = function (value) { };
        DomSanitizer.prototype.bypassSecurityTrustScript = function (value) { };
        DomSanitizer.prototype.bypassSecurityTrustUrl = function (value) { };
        DomSanitizer.prototype.bypassSecurityTrustResourceUrl = function (value) { };
        return DomSanitizer;
    }());
    var DomSanitizerImpl = (function (_super) {
        __extends(DomSanitizerImpl, _super);
        function DomSanitizerImpl(_doc) {
            var _this = _super.call(this) || this;
            _this._doc = _doc;
            return _this;
        }
        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
            if (value == null)
                return null;
            switch (ctx) {
                case SecurityContext.NONE:
                    return value;
                case SecurityContext.HTML:
                    if (value instanceof SafeHtmlImpl)
                        return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'HTML');
                    return sanitizeHtml(this._doc, String(value));
                case SecurityContext.STYLE:
                    if (value instanceof SafeStyleImpl)
                        return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'Style');
                    return sanitizeStyle(value);
                case SecurityContext.SCRIPT:
                    if (value instanceof SafeScriptImpl)
                        return value.changingThisBreaksApplicationSecurity;
                    this.checkNotSafeValue(value, 'Script');
                    throw new Error('unsafe value used in a script context');
                case SecurityContext.URL:
                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
                        return value.changingThisBreaksApplicationSecurity;
                    }
                    this.checkNotSafeValue(value, 'URL');
                    return sanitizeUrl(String(value));
                case SecurityContext.RESOURCE_URL:
                    if (value instanceof SafeResourceUrlImpl) {
                        return value.changingThisBreaksApplicationSecurity;
                    }
                    this.checkNotSafeValue(value, 'ResourceURL');
                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
                default:
                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
            }
        };
        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
            if (value instanceof SafeValueImpl) {
                throw new Error("Required a safe " + expectedType + ", got a " + value.getTypeName() + " " +
                    "(see http://g.co/ng/security#xss)");
            }
        };
        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
            return new SafeResourceUrlImpl(value);
        };
        return DomSanitizerImpl;
    }(DomSanitizer));
    DomSanitizerImpl.decorators = [
        { type: Injectable },
    ];
    DomSanitizerImpl.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
        ];
    };
    var SafeValueImpl = (function () {
        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
        }
        SafeValueImpl.prototype.getTypeName = function () { };
        SafeValueImpl.prototype.toString = function () {
            return "SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity +
                " (see http://g.co/ng/security#xss)";
        };
        return SafeValueImpl;
    }());
    var SafeHtmlImpl = (function (_super) {
        __extends(SafeHtmlImpl, _super);
        function SafeHtmlImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
        return SafeHtmlImpl;
    }(SafeValueImpl));
    var SafeStyleImpl = (function (_super) {
        __extends(SafeStyleImpl, _super);
        function SafeStyleImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
        return SafeStyleImpl;
    }(SafeValueImpl));
    var SafeScriptImpl = (function (_super) {
        __extends(SafeScriptImpl, _super);
        function SafeScriptImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
        return SafeScriptImpl;
    }(SafeValueImpl));
    var SafeUrlImpl = (function (_super) {
        __extends(SafeUrlImpl, _super);
        function SafeUrlImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
        return SafeUrlImpl;
    }(SafeValueImpl));
    var SafeResourceUrlImpl = (function (_super) {
        __extends(SafeResourceUrlImpl, _super);
        function SafeResourceUrlImpl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
        return SafeResourceUrlImpl;
    }(SafeValueImpl));
    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
        { provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID },
        { provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
        { provide: PlatformLocation, useClass: BrowserPlatformLocation },
        { provide: DOCUMENT, useFactory: _document, deps: [] },
    ];
    var BROWSER_SANITIZATION_PROVIDERS = [
        { provide: Sanitizer, useExisting: DomSanitizer },
        { provide: DomSanitizer, useClass: DomSanitizerImpl },
    ];
    var platformBrowser = createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
    function initDomAdapter() {
        BrowserDomAdapter.makeCurrent();
        BrowserGetTestability.init();
    }
    function errorHandler() {
        return new ErrorHandler();
    }
    function _document() {
        return document;
    }
    var BrowserModule = (function () {
        function BrowserModule(parentModule) {
            if (parentModule) {
                throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
            }
        }
        BrowserModule.withServerTransition = function (params) {
            return {
                ngModule: BrowserModule,
                providers: [
                    { provide: APP_ID, useValue: params.appId },
                    { provide: TRANSITION_ID, useExisting: APP_ID },
                    SERVER_TRANSITION_PROVIDERS,
                ],
            };
        };
        return BrowserModule;
    }());
    BrowserModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        BROWSER_SANITIZATION_PROVIDERS,
                        { provide: ErrorHandler, useFactory: errorHandler, deps: [] },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
                        { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
                        { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
                        DomRendererFactory2,
                        { provide: RendererFactory2, useExisting: DomRendererFactory2 },
                        { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
                        DomSharedStylesHost,
                        Testability,
                        EventManager,
                        ELEMENT_PROBE_PROVIDERS,
                        Meta,
                        Title,
                    ],
                    exports: [CommonModule, ApplicationModule]
                },] },
    ];
    BrowserModule.ctorParameters = function () {
        return [
            { type: BrowserModule, decorators: [{ type: Optional }, { type: SkipSelf },] },
        ];
    };
    var VERSION$$1 = new Version('4.0.1');
    var __extends$17 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$8 = Observable_1;
    var EmptyObservable_1$3 = EmptyObservable_1$1;
    var isArray_1$3 = isArray;
    var subscribeToResult_1$3 = subscribeToResult_1$1;
    var OuterSubscriber_1$3 = OuterSubscriber_1$1;
    var ForkJoinObservable = (function (_super) {
        __extends$17(ForkJoinObservable, _super);
        function ForkJoinObservable(sources, resultSelector) {
            _super.call(this);
            this.sources = sources;
            this.resultSelector = resultSelector;
        }
        ForkJoinObservable.create = function () {
            var sources = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                sources[_i - 0] = arguments[_i];
            }
            if (sources === null || arguments.length === 0) {
                return new EmptyObservable_1$3.EmptyObservable();
            }
            var resultSelector = null;
            if (typeof sources[sources.length - 1] === 'function') {
                resultSelector = sources.pop();
            }
            if (sources.length === 1 && isArray_1$3.isArray(sources[0])) {
                sources = sources[0];
            }
            if (sources.length === 0) {
                return new EmptyObservable_1$3.EmptyObservable();
            }
            return new ForkJoinObservable(sources, resultSelector);
        };
        ForkJoinObservable.prototype._subscribe = function (subscriber) {
            return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);
        };
        return ForkJoinObservable;
    }(Observable_1$8.Observable));
    var ForkJoinObservable_2 = ForkJoinObservable;
    var ForkJoinSubscriber = (function (_super) {
        __extends$17(ForkJoinSubscriber, _super);
        function ForkJoinSubscriber(destination, sources, resultSelector) {
            _super.call(this, destination);
            this.sources = sources;
            this.resultSelector = resultSelector;
            this.completed = 0;
            this.haveValues = 0;
            var len = sources.length;
            this.total = len;
            this.values = new Array(len);
            for (var i = 0; i < len; i++) {
                var source = sources[i];
                var innerSubscription = subscribeToResult_1$3.subscribeToResult(this, source, null, i);
                if (innerSubscription) {
                    innerSubscription.outerIndex = i;
                    this.add(innerSubscription);
                }
            }
        }
        ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            this.values[outerIndex] = innerValue;
            if (!innerSub._hasValue) {
                innerSub._hasValue = true;
                this.haveValues++;
            }
        };
        ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {
            var destination = this.destination;
            var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;
            var len = values.length;
            if (!innerSub._hasValue) {
                destination.complete();
                return;
            }
            this.completed++;
            if (this.completed !== len) {
                return;
            }
            if (haveValues === len) {
                var value = resultSelector ? resultSelector.apply(this, values) : values;
                destination.next(value);
            }
            destination.complete();
        };
        return ForkJoinSubscriber;
    }(OuterSubscriber_1$3.OuterSubscriber));
    var ForkJoinObservable_1$1 = {
        ForkJoinObservable: ForkJoinObservable_2
    };
    var ForkJoinObservable_1 = ForkJoinObservable_1$1;
    var forkJoin_1 = ForkJoinObservable_1.ForkJoinObservable.create;
    var __extends$18 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1$6 = root;
    var Observable_1$9 = Observable_1;
    var PromiseObservable = (function (_super) {
        __extends$18(PromiseObservable, _super);
        function PromiseObservable(promise, scheduler) {
            _super.call(this);
            this.promise = promise;
            this.scheduler = scheduler;
        }
        PromiseObservable.create = function (promise, scheduler) {
            return new PromiseObservable(promise, scheduler);
        };
        PromiseObservable.prototype._subscribe = function (subscriber) {
            var _this = this;
            var promise = this.promise;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        subscriber.next(this.value);
                        subscriber.complete();
                    }
                }
                else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.next(value);
                            subscriber.complete();
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.error(err);
                        }
                    })
                        .then(null, function (err) {
                        root_1$6.root.setTimeout(function () { throw err; });
                    });
                }
            }
            else {
                if (this._isScalar) {
                    if (!subscriber.closed) {
                        return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
                    }
                }
                else {
                    promise.then(function (value) {
                        _this.value = value;
                        _this._isScalar = true;
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
                        }
                    }, function (err) {
                        if (!subscriber.closed) {
                            subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
                        }
                    })
                        .then(null, function (err) {
                        root_1$6.root.setTimeout(function () { throw err; });
                    });
                }
            }
        };
        return PromiseObservable;
    }(Observable_1$9.Observable));
    var PromiseObservable_2 = PromiseObservable;
    function dispatchNext(arg) {
        var value = arg.value, subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }
    function dispatchError(arg) {
        var err = arg.err, subscriber = arg.subscriber;
        if (!subscriber.closed) {
            subscriber.error(err);
        }
    }
    var PromiseObservable_1$1 = {
        PromiseObservable: PromiseObservable_2
    };
    var PromiseObservable_1 = PromiseObservable_1$1;
    var fromPromise_1 = PromiseObservable_1.PromiseObservable.create;
    var __extends$19 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$7 = Subscriber_1$1;
    function map(project, thisArg) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return this.lift(new MapOperator(project, thisArg));
    }
    var map_2 = map;
    var MapOperator = (function () {
        function MapOperator(project, thisArg) {
            this.project = project;
            this.thisArg = thisArg;
        }
        MapOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
        };
        return MapOperator;
    }());
    var MapSubscriber = (function (_super) {
        __extends$19(MapSubscriber, _super);
        function MapSubscriber(destination, project, thisArg) {
            _super.call(this, destination);
            this.project = project;
            this.count = 0;
            this.thisArg = thisArg || this;
        }
        MapSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.project.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        return MapSubscriber;
    }(Subscriber_1$7.Subscriber));
    var __extends$16 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var AbstractControlDirective = (function () {
        function AbstractControlDirective() {
        }
        Object.defineProperty(AbstractControlDirective.prototype, "control", {
            get: function () { throw new Error('unimplemented'); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "value", {
            get: function () { return this.control ? this.control.value : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
            get: function () { return this.control ? this.control.valid : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
            get: function () { return this.control ? this.control.invalid : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
            get: function () { return this.control ? this.control.pending : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
            get: function () { return this.control ? this.control.errors : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
            get: function () { return this.control ? this.control.pristine : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
            get: function () { return this.control ? this.control.dirty : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
            get: function () { return this.control ? this.control.touched : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
            get: function () { return this.control ? this.control.untouched : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
            get: function () { return this.control ? this.control.disabled : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
            get: function () { return this.control ? this.control.enabled : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
            get: function () { return this.control ? this.control.statusChanges : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
            get: function () { return this.control ? this.control.valueChanges : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlDirective.prototype, "path", {
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        AbstractControlDirective.prototype.reset = function (value) {
            if (value === void 0) {
                value = undefined;
            }
            if (this.control)
                this.control.reset(value);
        };
        AbstractControlDirective.prototype.hasError = function (errorCode, path) {
            if (path === void 0) {
                path = null;
            }
            return this.control ? this.control.hasError(errorCode, path) : false;
        };
        AbstractControlDirective.prototype.getError = function (errorCode, path) {
            if (path === void 0) {
                path = null;
            }
            return this.control ? this.control.getError(errorCode, path) : null;
        };
        return AbstractControlDirective;
    }());
    var ControlContainer = (function (_super) {
        __extends$16(ControlContainer, _super);
        function ControlContainer() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ControlContainer.prototype, "formDirective", {
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlContainer.prototype, "path", {
            get: function () { return null; },
            enumerable: true,
            configurable: true
        });
        return ControlContainer;
    }(AbstractControlDirective));
    var __assign$1 = (undefined && undefined.__assign) || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function isEmptyInputValue(value) {
        return value == null || value.length === 0;
    }
    var NG_VALIDATORS = new InjectionToken('NgValidators');
    var NG_ASYNC_VALIDATORS = new InjectionToken('NgAsyncValidators');
    var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;
    var Validators = (function () {
        function Validators() {
        }
        Validators.required = function (control) {
            return isEmptyInputValue(control.value) ? { 'required': true } : null;
        };
        Validators.requiredTrue = function (control) {
            return control.value === true ? null : { 'required': true };
        };
        Validators.email = function (control) {
            return EMAIL_REGEXP.test(control.value) ? null : { 'email': true };
        };
        Validators.minLength = function (minLength) {
            return function (control) {
                if (isEmptyInputValue(control.value)) {
                    return null;
                }
                var length = control.value ? control.value.length : 0;
                return length < minLength ?
                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
                    null;
            };
        };
        Validators.maxLength = function (maxLength) {
            return function (control) {
                var length = control.value ? control.value.length : 0;
                return length > maxLength ?
                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
                    null;
            };
        };
        Validators.pattern = function (pattern) {
            if (!pattern)
                return Validators.nullValidator;
            var regex;
            var regexStr;
            if (typeof pattern === 'string') {
                regexStr = "^" + pattern + "$";
                regex = new RegExp(regexStr);
            }
            else {
                regexStr = pattern.toString();
                regex = pattern;
            }
            return function (control) {
                if (isEmptyInputValue(control.value)) {
                    return null;
                }
                var value = control.value;
                return regex.test(value) ? null :
                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
            };
        };
        Validators.nullValidator = function (c) { return null; };
        Validators.compose = function (validators) {
            if (!validators)
                return null;
            var presentValidators = validators.filter(isPresent);
            if (presentValidators.length == 0)
                return null;
            return function (control) {
                return _mergeErrors(_executeValidators(control, presentValidators));
            };
        };
        Validators.composeAsync = function (validators) {
            if (!validators)
                return null;
            var presentValidators = validators.filter(isPresent);
            if (presentValidators.length == 0)
                return null;
            return function (control) {
                var observables = _executeAsyncValidators(control, presentValidators).map(toObservable);
                return map_2.call(forkJoin_1(observables), _mergeErrors);
            };
        };
        return Validators;
    }());
    function isPresent(o) {
        return o != null;
    }
    function toObservable(r) {
        var obs = isPromise(r) ? fromPromise_1(r) : r;
        if (!(isObservable(obs))) {
            throw new Error("Expected validator to return Promise or Observable.");
        }
        return obs;
    }
    function _executeValidators(control, validators) {
        return validators.map(function (v) { return v(control); });
    }
    function _executeAsyncValidators(control, validators) {
        return validators.map(function (v) { return v(control); });
    }
    function _mergeErrors(arrayOfErrors) {
        var res = arrayOfErrors.reduce(function (res, errors) {
            return errors != null ? __assign$1({}, res, errors) : res;
        }, {});
        return Object.keys(res).length === 0 ? null : res;
    }
    var NG_VALUE_ACCESSOR = new InjectionToken('NgValueAccessor');
    var CHECKBOX_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return CheckboxControlValueAccessor; }),
        multi: true,
    };
    var CheckboxControlValueAccessor = (function () {
        function CheckboxControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
        };
        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        return CheckboxControlValueAccessor;
    }());
    CheckboxControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
                    host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
                    providers: [CHECKBOX_VALUE_ACCESSOR]
                },] },
    ];
    CheckboxControlValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
        ];
    };
    var DEFAULT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return DefaultValueAccessor; }),
        multi: true
    };
    function _isAndroid() {
        var userAgent = getDOM() ? getDOM().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    var COMPOSITION_BUFFER_MODE = new InjectionToken('CompositionEventMode');
    var DefaultValueAccessor = (function () {
        function DefaultValueAccessor(_renderer, _elementRef, _compositionMode) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._composing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        DefaultValueAccessor.prototype.writeValue = function (value) {
            var normalizedValue = value == null ? '' : value;
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        DefaultValueAccessor.prototype._handleInput = function (value) {
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this.onChange(value);
            }
        };
        DefaultValueAccessor.prototype._compositionStart = function () { this._composing = true; };
        DefaultValueAccessor.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this.onChange(value);
        };
        return DefaultValueAccessor;
    }());
    DefaultValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
                    host: {
                        '(input)': '_handleInput($event.target.value)',
                        '(blur)': 'onTouched()',
                        '(compositionstart)': '_compositionStart()',
                        '(compositionend)': '_compositionEnd($event.target.value)'
                    },
                    providers: [DEFAULT_VALUE_ACCESSOR]
                },] },
    ];
    DefaultValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
            { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] },] },
        ];
    };
    function normalizeValidator(validator) {
        if (((validator)).validate) {
            return function (c) { return ((validator)).validate(c); };
        }
        else {
            return (validator);
        }
    }
    function normalizeAsyncValidator(validator) {
        if (((validator)).validate) {
            return function (c) { return ((validator)).validate(c); };
        }
        else {
            return (validator);
        }
    }
    var NUMBER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NumberValueAccessor; }),
        multi: true
    };
    var NumberValueAccessor = (function () {
        function NumberValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        NumberValueAccessor.prototype.writeValue = function (value) {
            var normalizedValue = value == null ? '' : value;
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
        };
        NumberValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
        };
        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        return NumberValueAccessor;
    }());
    NumberValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    providers: [NUMBER_VALUE_ACCESSOR]
                },] },
    ];
    NumberValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
        ];
    };
    function unimplemented() {
        throw new Error('unimplemented');
    }
    var NgControl = (function (_super) {
        __extends$16(NgControl, _super);
        function NgControl() {
            var _this = _super.apply(this, arguments) || this;
            _this._parent = null;
            _this.name = null;
            _this.valueAccessor = null;
            _this._rawValidators = [];
            _this._rawAsyncValidators = [];
            return _this;
        }
        Object.defineProperty(NgControl.prototype, "validator", {
            get: function () { return (unimplemented()); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgControl.prototype, "asyncValidator", {
            get: function () { return (unimplemented()); },
            enumerable: true,
            configurable: true
        });
        NgControl.prototype.viewToModelUpdate = function (newValue) { };
        return NgControl;
    }(AbstractControlDirective));
    var RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return RadioControlValueAccessor; }),
        multi: true
    };
    var RadioControlRegistry = (function () {
        function RadioControlRegistry() {
            this._accessors = [];
        }
        RadioControlRegistry.prototype.add = function (control, accessor) {
            this._accessors.push([control, accessor]);
        };
        RadioControlRegistry.prototype.remove = function (accessor) {
            for (var i = this._accessors.length - 1; i >= 0; --i) {
                if (this._accessors[i][1] === accessor) {
                    this._accessors.splice(i, 1);
                    return;
                }
            }
        };
        RadioControlRegistry.prototype.select = function (accessor) {
            var _this = this;
            this._accessors.forEach(function (c) {
                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
                    c[1].fireUncheck(accessor.value);
                }
            });
        };
        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
            if (!controlPair[0].control)
                return false;
            return controlPair[0]._parent === accessor._control._parent &&
                controlPair[1].name === accessor.name;
        };
        return RadioControlRegistry;
    }());
    RadioControlRegistry.decorators = [
        { type: Injectable },
    ];
    RadioControlRegistry.ctorParameters = function () { return []; };
    var RadioControlValueAccessor = (function () {
        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._registry = _registry;
            this._injector = _injector;
            this.onChange = function () { };
            this.onTouched = function () { };
        }
        RadioControlValueAccessor.prototype.ngOnInit = function () {
            this._control = this._injector.get(NgControl);
            this._checkName();
            this._registry.add(this._control, this);
        };
        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
        RadioControlValueAccessor.prototype.writeValue = function (value) {
            this._state = value === this.value;
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
        };
        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this._fn = fn;
            this.onChange = function () {
                fn(_this.value);
                _this._registry.select(_this);
            };
        };
        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        RadioControlValueAccessor.prototype._checkName = function () {
            if (this.name && this.formControlName && this.name !== this.formControlName) {
                this._throwNameError();
            }
            if (!this.name && this.formControlName)
                this.name = this.formControlName;
        };
        RadioControlValueAccessor.prototype._throwNameError = function () {
            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
        };
        return RadioControlValueAccessor;
    }());
    RadioControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
                    host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
                    providers: [RADIO_VALUE_ACCESSOR]
                },] },
    ];
    RadioControlValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
            { type: RadioControlRegistry, },
            { type: Injector, },
        ];
    };
    RadioControlValueAccessor.propDecorators = {
        'name': [{ type: Input },],
        'formControlName': [{ type: Input },],
        'value': [{ type: Input },],
    };
    var RANGE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return RangeValueAccessor; }),
        multi: true
    };
    var RangeValueAccessor = (function () {
        function RangeValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        RangeValueAccessor.prototype.writeValue = function (value) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
        };
        RangeValueAccessor.prototype.registerOnChange = function (fn) {
            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
        };
        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        return RangeValueAccessor;
    }());
    RangeValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
                    host: {
                        '(change)': 'onChange($event.target.value)',
                        '(input)': 'onChange($event.target.value)',
                        '(blur)': 'onTouched()'
                    },
                    providers: [RANGE_VALUE_ACCESSOR]
                },] },
    ];
    RangeValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
        ];
    };
    var SELECT_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return SelectControlValueAccessor; }),
        multi: true
    };
    function _buildValueString(id, value) {
        if (id == null)
            return "" + value;
        if (value && typeof value === 'object')
            value = 'Object';
        return (id + ": " + value).slice(0, 50);
    }
    function _extractId(valueString) {
        return valueString.split(':')[0];
    }
    var SelectControlValueAccessor = (function () {
        function SelectControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._optionMap = new Map();
            this._idCounter = 0;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._compareWith = looseIdentical;
        }
        Object.defineProperty(SelectControlValueAccessor.prototype, "compareWith", {
            set: function (fn) {
                if (typeof fn !== 'function') {
                    throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                }
                this._compareWith = fn;
            },
            enumerable: true,
            configurable: true
        });
        SelectControlValueAccessor.prototype.writeValue = function (value) {
            this.value = value;
            var id = this._getOptionId(value);
            if (id == null) {
                this._renderer.setElementProperty(this._elementRef.nativeElement, 'selectedIndex', -1);
            }
            var valueString = _buildValueString(id, value);
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
        };
        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (valueString) {
                _this.value = valueString;
                fn(_this._getOptionValue(valueString));
            };
        };
        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
        SelectControlValueAccessor.prototype._getOptionId = function (value) {
            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
                var id = _a[_i];
                if (this._compareWith(this._optionMap.get(id), value))
                    return id;
            }
            return null;
        };
        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var id = _extractId(valueString);
            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
        };
        return SelectControlValueAccessor;
    }());
    SelectControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
                    host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
                    providers: [SELECT_VALUE_ACCESSOR]
                },] },
    ];
    SelectControlValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
        ];
    };
    SelectControlValueAccessor.propDecorators = {
        'compareWith': [{ type: Input },],
    };
    var NgSelectOption = (function () {
        function NgSelectOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (this._select)
                this.id = this._select._registerOption();
        }
        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
            set: function (value) {
                if (this._select == null)
                    return;
                this._select._optionMap.set(this.id, value);
                this._setElementValue(_buildValueString(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectOption.prototype, "value", {
            set: function (value) {
                this._setElementValue(value);
                if (this._select)
                    this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        NgSelectOption.prototype._setElementValue = function (value) {
            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectOption.prototype.ngOnDestroy = function () {
            if (this._select) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        return NgSelectOption;
    }());
    NgSelectOption.decorators = [
        { type: Directive, args: [{ selector: 'option' },] },
    ];
    NgSelectOption.ctorParameters = function () {
        return [
            { type: ElementRef, },
            { type: Renderer, },
            { type: SelectControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },
        ];
    };
    NgSelectOption.propDecorators = {
        'ngValue': [{ type: Input, args: ['ngValue',] },],
        'value': [{ type: Input, args: ['value',] },],
    };
    var SELECT_MULTIPLE_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return SelectMultipleControlValueAccessor; }),
        multi: true
    };
    function _buildValueString$1(id, value) {
        if (id == null)
            return "" + value;
        if (typeof value === 'string')
            value = "'" + value + "'";
        if (value && typeof value === 'object')
            value = 'Object';
        return (id + ": " + value).slice(0, 50);
    }
    function _extractId$1(valueString) {
        return valueString.split(':')[0];
    }
    var SelectMultipleControlValueAccessor = (function () {
        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._optionMap = new Map();
            this._idCounter = 0;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this._compareWith = looseIdentical;
        }
        Object.defineProperty(SelectMultipleControlValueAccessor.prototype, "compareWith", {
            set: function (fn) {
                if (typeof fn !== 'function') {
                    throw new Error("compareWith must be a function, but received " + JSON.stringify(fn));
                }
                this._compareWith = fn;
            },
            enumerable: true,
            configurable: true
        });
        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
            var _this = this;
            this.value = value;
            var optionSelectedStateSetter;
            if (Array.isArray(value)) {
                var ids_1 = value.map(function (v) { return _this._getOptionId(v); });
                optionSelectedStateSetter = function (opt, o) { opt._setSelected(ids_1.indexOf(o.toString()) > -1); };
            }
            else {
                optionSelectedStateSetter = function (opt, o) { opt._setSelected(false); };
            }
            this._optionMap.forEach(optionSelectedStateSetter);
        };
        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (_) {
                var selected = [];
                if (_.hasOwnProperty('selectedOptions')) {
                    var options = _.selectedOptions;
                    for (var i = 0; i < options.length; i++) {
                        var opt = options.item(i);
                        var val = _this._getOptionValue(opt.value);
                        selected.push(val);
                    }
                }
                else {
                    var options = (_.options);
                    for (var i = 0; i < options.length; i++) {
                        var opt = options.item(i);
                        if (opt.selected) {
                            var val = _this._getOptionValue(opt.value);
                            selected.push(val);
                        }
                    }
                }
                _this.value = selected;
                fn(selected);
            };
        };
        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
            var id = (this._idCounter++).toString();
            this._optionMap.set(id, value);
            return id;
        };
        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
                var id = _a[_i];
                if (this._compareWith(this._optionMap.get(id)._value, value))
                    return id;
            }
            return null;
        };
        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
            var id = _extractId$1(valueString);
            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
        };
        return SelectMultipleControlValueAccessor;
    }());
    SelectMultipleControlValueAccessor.decorators = [
        { type: Directive, args: [{
                    selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
                    host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
                    providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
                },] },
    ];
    SelectMultipleControlValueAccessor.ctorParameters = function () {
        return [
            { type: Renderer, },
            { type: ElementRef, },
        ];
    };
    SelectMultipleControlValueAccessor.propDecorators = {
        'compareWith': [{ type: Input },],
    };
    var NgSelectMultipleOption = (function () {
        function NgSelectMultipleOption(_element, _renderer, _select) {
            this._element = _element;
            this._renderer = _renderer;
            this._select = _select;
            if (this._select) {
                this.id = this._select._registerOption(this);
            }
        }
        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
            set: function (value) {
                if (this._select == null)
                    return;
                this._value = value;
                this._setElementValue(_buildValueString$1(this.id, value));
                this._select.writeValue(this._select.value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
            set: function (value) {
                if (this._select) {
                    this._value = value;
                    this._setElementValue(_buildValueString$1(this.id, value));
                    this._select.writeValue(this._select.value);
                }
                else {
                    this._setElementValue(value);
                }
            },
            enumerable: true,
            configurable: true
        });
        NgSelectMultipleOption.prototype._setElementValue = function (value) {
            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
        };
        NgSelectMultipleOption.prototype._setSelected = function (selected) {
            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
        };
        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
            if (this._select) {
                this._select._optionMap.delete(this.id);
                this._select.writeValue(this._select.value);
            }
        };
        return NgSelectMultipleOption;
    }());
    NgSelectMultipleOption.decorators = [
        { type: Directive, args: [{ selector: 'option' },] },
    ];
    NgSelectMultipleOption.ctorParameters = function () {
        return [
            { type: ElementRef, },
            { type: Renderer, },
            { type: SelectMultipleControlValueAccessor, decorators: [{ type: Optional }, { type: Host },] },
        ];
    };
    NgSelectMultipleOption.propDecorators = {
        'ngValue': [{ type: Input, args: ['ngValue',] },],
        'value': [{ type: Input, args: ['value',] },],
    };
    function controlPath(name, parent) {
        return parent.path.concat([name]);
    }
    function setUpControl(control, dir) {
        if (!control)
            _throwError$1(dir, 'Cannot find control with');
        if (!dir.valueAccessor)
            _throwError$1(dir, 'No value accessor for form control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
        dir.valueAccessor.writeValue(control.value);
        dir.valueAccessor.registerOnChange(function (newValue) {
            dir.viewToModelUpdate(newValue);
            control.markAsDirty();
            control.setValue(newValue, { emitModelToViewChange: false });
        });
        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
        control.registerOnChange(function (newValue, emitModelEvent) {
            dir.valueAccessor.writeValue(newValue);
            if (emitModelEvent)
                dir.viewToModelUpdate(newValue);
        });
        if (dir.valueAccessor.setDisabledState) {
            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });
        }
        dir._rawValidators.forEach(function (validator) {
            if (((validator)).registerOnValidatorChange)
                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
        });
        dir._rawAsyncValidators.forEach(function (validator) {
            if (((validator)).registerOnValidatorChange)
                ((validator)).registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
        });
    }
    function cleanUpControl(control, dir) {
        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });
        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });
        dir._rawValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) {
                validator.registerOnValidatorChange(null);
            }
        });
        dir._rawAsyncValidators.forEach(function (validator) {
            if (validator.registerOnValidatorChange) {
                validator.registerOnValidatorChange(null);
            }
        });
        if (control)
            control._clearChangeFns();
    }
    function setUpFormContainer(control, dir) {
        if (control == null)
            _throwError$1(dir, 'Cannot find control with');
        control.validator = Validators.compose([control.validator, dir.validator]);
        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
    }
    function _noControlError(dir) {
        return _throwError$1(dir, 'There is no FormControl instance attached to form control element with');
    }
    function _throwError$1(dir, message) {
        var messageEnd;
        if (dir.path.length > 1) {
            messageEnd = "path: '" + dir.path.join(' -> ') + "'";
        }
        else if (dir.path[0]) {
            messageEnd = "name: '" + dir.path + "'";
        }
        else {
            messageEnd = 'unspecified name attribute';
        }
        throw new Error(message + " " + messageEnd);
    }
    function composeValidators(validators) {
        return validators != null ? Validators.compose(validators.map(normalizeValidator)) : null;
    }
    function composeAsyncValidators(validators) {
        return validators != null ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
            null;
    }
    function isPropertyUpdated(changes, viewModel) {
        if (!changes.hasOwnProperty('model'))
            return false;
        var change = changes['model'];
        if (change.isFirstChange())
            return true;
        return !looseIdentical(viewModel, change.currentValue);
    }
    var BUILTIN_ACCESSORS = [
        CheckboxControlValueAccessor,
        RangeValueAccessor,
        NumberValueAccessor,
        SelectControlValueAccessor,
        SelectMultipleControlValueAccessor,
        RadioControlValueAccessor,
    ];
    function isBuiltInAccessor(valueAccessor) {
        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
    }
    function selectValueAccessor(dir, valueAccessors) {
        if (!valueAccessors)
            return null;
        var defaultAccessor;
        var builtinAccessor;
        var customAccessor;
        valueAccessors.forEach(function (v) {
            if (v.constructor === DefaultValueAccessor) {
                defaultAccessor = v;
            }
            else if (isBuiltInAccessor(v)) {
                if (builtinAccessor)
                    _throwError$1(dir, 'More than one built-in value accessor matches form control with');
                builtinAccessor = v;
            }
            else {
                if (customAccessor)
                    _throwError$1(dir, 'More than one custom value accessor matches form control with');
                customAccessor = v;
            }
        });
        if (customAccessor)
            return customAccessor;
        if (builtinAccessor)
            return builtinAccessor;
        if (defaultAccessor)
            return defaultAccessor;
        _throwError$1(dir, 'No valid value accessor for form control with');
        return null;
    }
    var AbstractFormGroupDirective = (function (_super) {
        __extends$16(AbstractFormGroupDirective, _super);
        function AbstractFormGroupDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractFormGroupDirective.prototype.ngOnInit = function () {
            this._checkParentType();
            this.formDirective.addFormGroup(this);
        };
        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeFormGroup(this);
            }
        };
        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
            get: function () { return this.formDirective.getFormGroup(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
            get: function () { return controlPath(this.name, this._parent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
            get: function () { return this._parent ? this._parent.formDirective : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
            get: function () { return composeValidators(this._validators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
            get: function () { return composeAsyncValidators(this._asyncValidators); },
            enumerable: true,
            configurable: true
        });
        AbstractFormGroupDirective.prototype._checkParentType = function () { };
        return AbstractFormGroupDirective;
    }(ControlContainer));
    var AbstractControlStatus = (function () {
        function AbstractControlStatus(cd) {
            this._cd = cd;
        }
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
            get: function () { return this._cd.control ? this._cd.control.untouched : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
            get: function () { return this._cd.control ? this._cd.control.touched : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
            get: function () { return this._cd.control ? this._cd.control.pristine : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
            get: function () { return this._cd.control ? this._cd.control.dirty : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
            get: function () { return this._cd.control ? this._cd.control.valid : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
            get: function () { return this._cd.control ? this._cd.control.invalid : false; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
            get: function () { return this._cd.control ? this._cd.control.pending : false; },
            enumerable: true,
            configurable: true
        });
        return AbstractControlStatus;
    }());
    var ngControlStatusHost = {
        '[class.ng-untouched]': 'ngClassUntouched',
        '[class.ng-touched]': 'ngClassTouched',
        '[class.ng-pristine]': 'ngClassPristine',
        '[class.ng-dirty]': 'ngClassDirty',
        '[class.ng-valid]': 'ngClassValid',
        '[class.ng-invalid]': 'ngClassInvalid',
        '[class.ng-pending]': 'ngClassPending',
    };
    var NgControlStatus = (function (_super) {
        __extends$16(NgControlStatus, _super);
        function NgControlStatus(cd) {
            return _super.call(this, cd) || this;
        }
        return NgControlStatus;
    }(AbstractControlStatus));
    NgControlStatus.decorators = [
        { type: Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
    ];
    NgControlStatus.ctorParameters = function () {
        return [
            { type: NgControl, decorators: [{ type: Self },] },
        ];
    };
    var NgControlStatusGroup = (function (_super) {
        __extends$16(NgControlStatusGroup, _super);
        function NgControlStatusGroup(cd) {
            return _super.call(this, cd) || this;
        }
        return NgControlStatusGroup;
    }(AbstractControlStatus));
    NgControlStatusGroup.decorators = [
        { type: Directive, args: [{
                    selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
                    host: ngControlStatusHost
                },] },
    ];
    NgControlStatusGroup.ctorParameters = function () {
        return [
            { type: ControlContainer, decorators: [{ type: Self },] },
        ];
    };
    var VALID = 'VALID';
    var INVALID = 'INVALID';
    var PENDING = 'PENDING';
    var DISABLED = 'DISABLED';
    function _find(control, path, delimiter) {
        if (path == null)
            return null;
        if (!(path instanceof Array)) {
            path = ((path)).split(delimiter);
        }
        if (path instanceof Array && (path.length === 0))
            return null;
        return ((path)).reduce(function (v, name) {
            if (v instanceof FormGroup) {
                return v.controls[name] || null;
            }
            if (v instanceof FormArray) {
                return v.at((name)) || null;
            }
            return null;
        }, control);
    }
    function coerceToValidator(validator) {
        return Array.isArray(validator) ? composeValidators(validator) : validator;
    }
    function coerceToAsyncValidator(asyncValidator) {
        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
    }
    var AbstractControl = (function () {
        function AbstractControl(validator, asyncValidator) {
            this.validator = validator;
            this.asyncValidator = asyncValidator;
            this._onCollectionChange = function () { };
            this._pristine = true;
            this._touched = false;
            this._onDisabledChange = [];
        }
        Object.defineProperty(AbstractControl.prototype, "value", {
            get: function () { return this._value; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "parent", {
            get: function () { return this._parent; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "status", {
            get: function () { return this._status; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valid", {
            get: function () { return this._status === VALID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "invalid", {
            get: function () { return this._status === INVALID; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pending", {
            get: function () { return this._status == PENDING; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "disabled", {
            get: function () { return this._status === DISABLED; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "enabled", {
            get: function () { return this._status !== DISABLED; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "errors", {
            get: function () { return this._errors; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "pristine", {
            get: function () { return this._pristine; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "dirty", {
            get: function () { return !this.pristine; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "touched", {
            get: function () { return this._touched; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "untouched", {
            get: function () { return !this._touched; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
            get: function () { return this._valueChanges; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
            get: function () { return this._statusChanges; },
            enumerable: true,
            configurable: true
        });
        AbstractControl.prototype.setValidators = function (newValidator) {
            this.validator = coerceToValidator(newValidator);
        };
        AbstractControl.prototype.setAsyncValidators = function (newValidator) {
            this.asyncValidator = coerceToAsyncValidator(newValidator);
        };
        AbstractControl.prototype.clearValidators = function () { this.validator = null; };
        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
        AbstractControl.prototype.markAsTouched = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._touched = true;
            if (this._parent && !onlySelf) {
                this._parent.markAsTouched({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.markAsUntouched = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._touched = false;
            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
            if (this._parent && !onlySelf) {
                this._parent._updateTouched({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.markAsDirty = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._pristine = false;
            if (this._parent && !onlySelf) {
                this._parent.markAsDirty({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.markAsPristine = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._pristine = true;
            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
            if (this._parent && !onlySelf) {
                this._parent._updatePristine({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.markAsPending = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._status = PENDING;
            if (this._parent && !onlySelf) {
                this._parent.markAsPending({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype.disable = function (_a) {
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._status = DISABLED;
            this._errors = null;
            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
            this._updateValue();
            if (emitEvent !== false) {
                this._valueChanges.emit(this._value);
                this._statusChanges.emit(this._status);
            }
            this._updateAncestors(onlySelf);
            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
        };
        AbstractControl.prototype.enable = function (_a) {
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._status = VALID;
            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
            this._updateAncestors(onlySelf);
            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
        };
        AbstractControl.prototype._updateAncestors = function (onlySelf) {
            if (this._parent && !onlySelf) {
                this._parent.updateValueAndValidity();
                this._parent._updatePristine();
                this._parent._updateTouched();
            }
        };
        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
        AbstractControl.prototype.setValue = function (value, options) { };
        AbstractControl.prototype.patchValue = function (value, options) { };
        AbstractControl.prototype.reset = function (value, options) { };
        AbstractControl.prototype.updateValueAndValidity = function (_a) {
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._setInitialStatus();
            this._updateValue();
            if (this.enabled) {
                this._cancelExistingSubscription();
                this._errors = this._runValidator();
                this._status = this._calculateStatus();
                if (this._status === VALID || this._status === PENDING) {
                    this._runAsyncValidator(emitEvent);
                }
            }
            if (emitEvent !== false) {
                this._valueChanges.emit(this._value);
                this._statusChanges.emit(this._status);
            }
            if (this._parent && !onlySelf) {
                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
            }
        };
        AbstractControl.prototype._updateTreeValidity = function (_a) {
            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;
            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });
            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
        };
        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
        AbstractControl.prototype._runValidator = function () {
            return this.validator ? this.validator(this) : null;
        };
        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
            var _this = this;
            if (this.asyncValidator) {
                this._status = PENDING;
                var obs = toObservable(this.asyncValidator(this));
                this._asyncValidationSubscription =
                    obs.subscribe(function (errors) { return _this.setErrors(errors, { emitEvent: emitEvent }); });
            }
        };
        AbstractControl.prototype._cancelExistingSubscription = function () {
            if (this._asyncValidationSubscription) {
                this._asyncValidationSubscription.unsubscribe();
            }
        };
        AbstractControl.prototype.setErrors = function (errors, _a) {
            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
            this._errors = errors;
            this._updateControlsErrors(emitEvent !== false);
        };
        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
        AbstractControl.prototype.getError = function (errorCode, path) {
            if (path === void 0) {
                path = null;
            }
            var control = path ? this.get(path) : this;
            return control && control._errors ? control._errors[errorCode] : null;
        };
        AbstractControl.prototype.hasError = function (errorCode, path) {
            if (path === void 0) {
                path = null;
            }
            return !!this.getError(errorCode, path);
        };
        Object.defineProperty(AbstractControl.prototype, "root", {
            get: function () {
                var x = this;
                while (x._parent) {
                    x = x._parent;
                }
                return x;
            },
            enumerable: true,
            configurable: true
        });
        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
            this._status = this._calculateStatus();
            if (emitEvent) {
                this._statusChanges.emit(this._status);
            }
            if (this._parent) {
                this._parent._updateControlsErrors(emitEvent);
            }
        };
        AbstractControl.prototype._initObservables = function () {
            this._valueChanges = new EventEmitter();
            this._statusChanges = new EventEmitter();
        };
        AbstractControl.prototype._calculateStatus = function () {
            if (this._allControlsDisabled())
                return DISABLED;
            if (this._errors)
                return INVALID;
            if (this._anyControlsHaveStatus(PENDING))
                return PENDING;
            if (this._anyControlsHaveStatus(INVALID))
                return INVALID;
            return VALID;
        };
        AbstractControl.prototype._updateValue = function () { };
        AbstractControl.prototype._forEachChild = function (cb) { };
        AbstractControl.prototype._anyControls = function (condition) { };
        AbstractControl.prototype._allControlsDisabled = function () { };
        AbstractControl.prototype._anyControlsHaveStatus = function (status) {
            return this._anyControls(function (control) { return control.status === status; });
        };
        AbstractControl.prototype._anyControlsDirty = function () {
            return this._anyControls(function (control) { return control.dirty; });
        };
        AbstractControl.prototype._anyControlsTouched = function () {
            return this._anyControls(function (control) { return control.touched; });
        };
        AbstractControl.prototype._updatePristine = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._pristine = !this._anyControlsDirty();
            if (this._parent && !onlySelf) {
                this._parent._updatePristine({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype._updateTouched = function (_a) {
            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
            this._touched = this._anyControlsTouched();
            if (this._parent && !onlySelf) {
                this._parent._updateTouched({ onlySelf: onlySelf });
            }
        };
        AbstractControl.prototype._isBoxedValue = function (formState) {
            return typeof formState === 'object' && formState !== null &&
                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
        };
        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
        return AbstractControl;
    }());
    var FormControl = (function (_super) {
        __extends$16(FormControl, _super);
        function FormControl(formState, validator, asyncValidator) {
            if (formState === void 0) {
                formState = null;
            }
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            var _this = _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator)) || this;
            _this._onChange = [];
            _this._applyFormState(formState);
            _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            _this._initObservables();
            return _this;
        }
        FormControl.prototype.setValue = function (value, _a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
            this._value = value;
            if (this._onChange.length && emitModelToViewChange !== false) {
                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });
            }
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        };
        FormControl.prototype.patchValue = function (value, options) {
            if (options === void 0) {
                options = {};
            }
            this.setValue(value, options);
        };
        FormControl.prototype.reset = function (formState, _a) {
            if (formState === void 0) {
                formState = null;
            }
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._applyFormState(formState);
            this.markAsPristine({ onlySelf: onlySelf });
            this.markAsUntouched({ onlySelf: onlySelf });
            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });
        };
        FormControl.prototype._updateValue = function () { };
        FormControl.prototype._anyControls = function (condition) { return false; };
        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
        FormControl.prototype._clearChangeFns = function () {
            this._onChange = [];
            this._onDisabledChange = [];
            this._onCollectionChange = function () { };
        };
        FormControl.prototype.registerOnDisabledChange = function (fn) {
            this._onDisabledChange.push(fn);
        };
        FormControl.prototype._forEachChild = function (cb) { };
        FormControl.prototype._applyFormState = function (formState) {
            if (this._isBoxedValue(formState)) {
                this._value = formState.value;
                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
                    this.enable({ onlySelf: true, emitEvent: false });
            }
            else {
                this._value = formState;
            }
        };
        return FormControl;
    }(AbstractControl));
    var FormGroup = (function (_super) {
        __extends$16(FormGroup, _super);
        function FormGroup(controls, validator, asyncValidator) {
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            var _this = _super.call(this, validator, asyncValidator) || this;
            _this.controls = controls;
            _this._initObservables();
            _this._setUpControls();
            _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            return _this;
        }
        FormGroup.prototype.registerControl = function (name, control) {
            if (this.controls[name])
                return this.controls[name];
            this.controls[name] = control;
            control.setParent(this);
            control._registerOnCollectionChange(this._onCollectionChange);
            return control;
        };
        FormGroup.prototype.addControl = function (name, control) {
            this.registerControl(name, control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        FormGroup.prototype.removeControl = function (name) {
            if (this.controls[name])
                this.controls[name]._registerOnCollectionChange(function () { });
            delete (this.controls[name]);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        FormGroup.prototype.setControl = function (name, control) {
            if (this.controls[name])
                this.controls[name]._registerOnCollectionChange(function () { });
            delete (this.controls[name]);
            if (control)
                this.registerControl(name, control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        FormGroup.prototype.contains = function (controlName) {
            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
        };
        FormGroup.prototype.setValue = function (value, _a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._checkAllValuesPresent(value);
            Object.keys(value).forEach(function (name) {
                _this._throwIfControlMissing(name);
                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });
            });
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        };
        FormGroup.prototype.patchValue = function (value, _a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            Object.keys(value).forEach(function (name) {
                if (_this.controls[name]) {
                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });
                }
            });
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        };
        FormGroup.prototype.reset = function (value, _a) {
            if (value === void 0) {
                value = {};
            }
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._forEachChild(function (control, name) {
                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });
            });
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
            this._updatePristine({ onlySelf: onlySelf });
            this._updateTouched({ onlySelf: onlySelf });
        };
        FormGroup.prototype.getRawValue = function () {
            return this._reduceChildren({}, function (acc, control, name) {
                acc[name] = control instanceof FormControl ? control.value : ((control)).getRawValue();
                return acc;
            });
        };
        FormGroup.prototype._throwIfControlMissing = function (name) {
            if (!Object.keys(this.controls).length) {
                throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }
            if (!this.controls[name]) {
                throw new Error("Cannot find form control with name: " + name + ".");
            }
        };
        FormGroup.prototype._forEachChild = function (cb) {
            var _this = this;
            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
        };
        FormGroup.prototype._setUpControls = function () {
            var _this = this;
            this._forEachChild(function (control) {
                control.setParent(_this);
                control._registerOnCollectionChange(_this._onCollectionChange);
            });
        };
        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
        FormGroup.prototype._anyControls = function (condition) {
            var _this = this;
            var res = false;
            this._forEachChild(function (control, name) {
                res = res || (_this.contains(name) && condition(control));
            });
            return res;
        };
        FormGroup.prototype._reduceValue = function () {
            var _this = this;
            return this._reduceChildren({}, function (acc, control, name) {
                if (control.enabled || _this.disabled) {
                    acc[name] = control.value;
                }
                return acc;
            });
        };
        FormGroup.prototype._reduceChildren = function (initValue, fn) {
            var res = initValue;
            this._forEachChild(function (control, name) { res = fn(res, control, name); });
            return res;
        };
        FormGroup.prototype._allControlsDisabled = function () {
            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
                var controlName = _a[_i];
                if (this.controls[controlName].enabled) {
                    return false;
                }
            }
            return Object.keys(this.controls).length > 0 || this.disabled;
        };
        FormGroup.prototype._checkAllValuesPresent = function (value) {
            this._forEachChild(function (control, name) {
                if (value[name] === undefined) {
                    throw new Error("Must supply a value for form control with name: '" + name + "'.");
                }
            });
        };
        return FormGroup;
    }(AbstractControl));
    var FormArray = (function (_super) {
        __extends$16(FormArray, _super);
        function FormArray(controls, validator, asyncValidator) {
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            var _this = _super.call(this, validator, asyncValidator) || this;
            _this.controls = controls;
            _this._initObservables();
            _this._setUpControls();
            _this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
            return _this;
        }
        FormArray.prototype.at = function (index) { return this.controls[index]; };
        FormArray.prototype.push = function (control) {
            this.controls.push(control);
            this._registerControl(control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        FormArray.prototype.insert = function (index, control) {
            this.controls.splice(index, 0, control);
            this._registerControl(control);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        FormArray.prototype.removeAt = function (index) {
            if (this.controls[index])
                this.controls[index]._registerOnCollectionChange(function () { });
            this.controls.splice(index, 1);
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        FormArray.prototype.setControl = function (index, control) {
            if (this.controls[index])
                this.controls[index]._registerOnCollectionChange(function () { });
            this.controls.splice(index, 1);
            if (control) {
                this.controls.splice(index, 0, control);
                this._registerControl(control);
            }
            this.updateValueAndValidity();
            this._onCollectionChange();
        };
        Object.defineProperty(FormArray.prototype, "length", {
            get: function () { return this.controls.length; },
            enumerable: true,
            configurable: true
        });
        FormArray.prototype.setValue = function (value, _a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._checkAllValuesPresent(value);
            value.forEach(function (newValue, index) {
                _this._throwIfControlMissing(index);
                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });
            });
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        };
        FormArray.prototype.patchValue = function (value, _a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            value.forEach(function (newValue, index) {
                if (_this.at(index)) {
                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });
                }
            });
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
        };
        FormArray.prototype.reset = function (value, _a) {
            if (value === void 0) {
                value = [];
            }
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
            this._forEachChild(function (control, index) {
                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });
            });
            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
            this._updatePristine({ onlySelf: onlySelf });
            this._updateTouched({ onlySelf: onlySelf });
        };
        FormArray.prototype.getRawValue = function () {
            return this.controls.map(function (control) {
                return control instanceof FormControl ? control.value : ((control)).getRawValue();
            });
        };
        FormArray.prototype._throwIfControlMissing = function (index) {
            if (!this.controls.length) {
                throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
            }
            if (!this.at(index)) {
                throw new Error("Cannot find form control at index " + index);
            }
        };
        FormArray.prototype._forEachChild = function (cb) {
            this.controls.forEach(function (control, index) { cb(control, index); });
        };
        FormArray.prototype._updateValue = function () {
            var _this = this;
            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
                .map(function (control) { return control.value; });
        };
        FormArray.prototype._anyControls = function (condition) {
            return this.controls.some(function (control) { return control.enabled && condition(control); });
        };
        FormArray.prototype._setUpControls = function () {
            var _this = this;
            this._forEachChild(function (control) { return _this._registerControl(control); });
        };
        FormArray.prototype._checkAllValuesPresent = function (value) {
            this._forEachChild(function (control, i) {
                if (value[i] === undefined) {
                    throw new Error("Must supply a value for form control at index: " + i + ".");
                }
            });
        };
        FormArray.prototype._allControlsDisabled = function () {
            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
                var control = _a[_i];
                if (control.enabled)
                    return false;
            }
            return this.controls.length > 0 || this.disabled;
        };
        FormArray.prototype._registerControl = function (control) {
            control.setParent(this);
            control._registerOnCollectionChange(this._onCollectionChange);
        };
        return FormArray;
    }(AbstractControl));
    var formDirectiveProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return NgForm; })
    };
    var resolvedPromise = Promise.resolve(null);
    var NgForm = (function (_super) {
        __extends$16(NgForm, _super);
        function NgForm(validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._submitted = false;
            _this.ngSubmit = new EventEmitter();
            _this.form =
                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
            return _this;
        }
        Object.defineProperty(NgForm.prototype, "submitted", {
            get: function () { return this._submitted; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "formDirective", {
            get: function () { return this; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "control", {
            get: function () { return this.form; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "path", {
            get: function () { return []; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgForm.prototype, "controls", {
            get: function () { return this.form.controls; },
            enumerable: true,
            configurable: true
        });
        NgForm.prototype.addControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                dir._control = (container.registerControl(dir.name, dir.control));
                setUpControl(dir.control, dir);
                dir.control.updateValueAndValidity({ emitEvent: false });
            });
        };
        NgForm.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
        NgForm.prototype.removeControl = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                if (container) {
                    container.removeControl(dir.name);
                }
            });
        };
        NgForm.prototype.addFormGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                var group$$1 = new FormGroup({});
                setUpFormContainer(group$$1, dir);
                container.registerControl(dir.name, group$$1);
                group$$1.updateValueAndValidity({ emitEvent: false });
            });
        };
        NgForm.prototype.removeFormGroup = function (dir) {
            var _this = this;
            resolvedPromise.then(function () {
                var container = _this._findContainer(dir.path);
                if (container) {
                    container.removeControl(dir.name);
                }
            });
        };
        NgForm.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
        NgForm.prototype.updateModel = function (dir, value) {
            var _this = this;
            resolvedPromise.then(function () {
                var ctrl = (_this.form.get(dir.path));
                ctrl.setValue(value);
            });
        };
        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
        NgForm.prototype.onSubmit = function ($event) {
            this._submitted = true;
            this.ngSubmit.emit($event);
            return false;
        };
        NgForm.prototype.onReset = function () { this.resetForm(); };
        NgForm.prototype.resetForm = function (value) {
            if (value === void 0) {
                value = undefined;
            }
            this.form.reset(value);
            this._submitted = false;
        };
        NgForm.prototype._findContainer = function (path) {
            path.pop();
            return path.length ? (this.form.get(path)) : this.form;
        };
        return NgForm;
    }(ControlContainer));
    NgForm.decorators = [
        { type: Directive, args: [{
                    selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
                    providers: [formDirectiveProvider],
                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                    outputs: ['ngSubmit'],
                    exportAs: 'ngForm'
                },] },
    ];
    NgForm.ctorParameters = function () {
        return [
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        ];
    };
    var FormErrorExamples = {
        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; index as i\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
    };
    var TemplateDrivenErrors = (function () {
        function TemplateDrivenErrors() {
        }
        TemplateDrivenErrors.modelParentException = function () {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + FormErrorExamples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + FormErrorExamples.ngModelWithFormGroup);
        };
        TemplateDrivenErrors.formGroupNameException = function () {
            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
        };
        TemplateDrivenErrors.missingNameException = function () {
            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
        };
        TemplateDrivenErrors.modelGroupParentException = function () {
            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + FormErrorExamples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + FormErrorExamples.ngModelGroup);
        };
        return TemplateDrivenErrors;
    }());
    var modelGroupProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return NgModelGroup; })
    };
    var NgModelGroup = (function (_super) {
        __extends$16(NgModelGroup, _super);
        function NgModelGroup(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        NgModelGroup.prototype._checkParentType = function () {
            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                TemplateDrivenErrors.modelGroupParentException();
            }
        };
        return NgModelGroup;
    }(AbstractFormGroupDirective));
    NgModelGroup.decorators = [
        { type: Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
    ];
    NgModelGroup.ctorParameters = function () {
        return [
            { type: ControlContainer, decorators: [{ type: Host }, { type: SkipSelf },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        ];
    };
    NgModelGroup.propDecorators = {
        'name': [{ type: Input, args: ['ngModelGroup',] },],
    };
    var formControlBinding = {
        provide: NgControl,
        useExisting: forwardRef(function () { return NgModel; })
    };
    var resolvedPromise$1 = Promise.resolve(null);
    var NgModel = (function (_super) {
        __extends$16(NgModel, _super);
        function NgModel(parent, validators, asyncValidators, valueAccessors) {
            var _this = _super.call(this) || this;
            _this._control = new FormControl();
            _this._registered = false;
            _this.update = new EventEmitter();
            _this._parent = parent;
            _this._rawValidators = validators || [];
            _this._rawAsyncValidators = asyncValidators || [];
            _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
            return _this;
        }
        NgModel.prototype.ngOnChanges = function (changes) {
            this._checkForErrors();
            if (!this._registered)
                this._setUpControl();
            if ('isDisabled' in changes) {
                this._updateDisabled(changes);
            }
            if (isPropertyUpdated(changes, this.viewModel)) {
                this._updateValue(this.model);
                this.viewModel = this.model;
            }
        };
        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
        Object.defineProperty(NgModel.prototype, "control", {
            get: function () { return this._control; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "path", {
            get: function () {
                return this._parent ? controlPath(this.name, this._parent) : [this.name];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "formDirective", {
            get: function () { return this._parent ? this._parent.formDirective : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "validator", {
            get: function () { return composeValidators(this._rawValidators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgModel.prototype, "asyncValidator", {
            get: function () {
                return composeAsyncValidators(this._rawAsyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        NgModel.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        NgModel.prototype._setUpControl = function () {
            this._isStandalone() ? this._setUpStandalone() :
                this.formDirective.addControl(this);
            this._registered = true;
        };
        NgModel.prototype._isStandalone = function () {
            return !this._parent || (this.options && this.options.standalone);
        };
        NgModel.prototype._setUpStandalone = function () {
            setUpControl(this._control, this);
            this._control.updateValueAndValidity({ emitEvent: false });
        };
        NgModel.prototype._checkForErrors = function () {
            if (!this._isStandalone()) {
                this._checkParentType();
            }
            this._checkName();
        };
        NgModel.prototype._checkParentType = function () {
            if (!(this._parent instanceof NgModelGroup) &&
                this._parent instanceof AbstractFormGroupDirective) {
                TemplateDrivenErrors.formGroupNameException();
            }
            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
                TemplateDrivenErrors.modelParentException();
            }
        };
        NgModel.prototype._checkName = function () {
            if (this.options && this.options.name)
                this.name = this.options.name;
            if (!this._isStandalone() && !this.name) {
                TemplateDrivenErrors.missingNameException();
            }
        };
        NgModel.prototype._updateValue = function (value) {
            var _this = this;
            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
        };
        NgModel.prototype._updateDisabled = function (changes) {
            var _this = this;
            var disabledValue = changes['isDisabled'].currentValue;
            var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
            resolvedPromise$1.then(function () {
                if (isDisabled && !_this.control.disabled) {
                    _this.control.disable();
                }
                else if (!isDisabled && _this.control.disabled) {
                    _this.control.enable();
                }
            });
        };
        return NgModel;
    }(NgControl));
    NgModel.decorators = [
        { type: Directive, args: [{
                    selector: '[ngModel]:not([formControlName]):not([formControl])',
                    providers: [formControlBinding],
                    exportAs: 'ngModel'
                },] },
    ];
    NgModel.ctorParameters = function () {
        return [
            { type: ControlContainer, decorators: [{ type: Optional }, { type: Host },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
        ];
    };
    NgModel.propDecorators = {
        'name': [{ type: Input },],
        'isDisabled': [{ type: Input, args: ['disabled',] },],
        'model': [{ type: Input, args: ['ngModel',] },],
        'options': [{ type: Input, args: ['ngModelOptions',] },],
        'update': [{ type: Output, args: ['ngModelChange',] },],
    };
    var ReactiveErrors = (function () {
        function ReactiveErrors() {
        }
        ReactiveErrors.controlParentException = function () {
            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formControlName);
        };
        ReactiveErrors.ngModelGroupException = function () {
            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + FormErrorExamples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + FormErrorExamples.ngModelGroup);
        };
        ReactiveErrors.missingFormException = function () {
            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + FormErrorExamples.formControlName);
        };
        ReactiveErrors.groupParentException = function () {
            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + FormErrorExamples.formGroupName);
        };
        ReactiveErrors.arrayParentException = function () {
            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + FormErrorExamples.formArrayName);
        };
        ReactiveErrors.disabledAttrWarning = function () {
            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
        };
        return ReactiveErrors;
    }());
    var formControlBinding$1 = {
        provide: NgControl,
        useExisting: forwardRef(function () { return FormControlDirective; })
    };
    var FormControlDirective = (function (_super) {
        __extends$16(FormControlDirective, _super);
        function FormControlDirective(validators, asyncValidators, valueAccessors) {
            var _this = _super.call(this) || this;
            _this.update = new EventEmitter();
            _this._rawValidators = validators || [];
            _this._rawAsyncValidators = asyncValidators || [];
            _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
            return _this;
        }
        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
            enumerable: true,
            configurable: true
        });
        FormControlDirective.prototype.ngOnChanges = function (changes) {
            if (this._isControlChanged(changes)) {
                setUpControl(this.form, this);
                if (this.control.disabled && this.valueAccessor.setDisabledState) {
                    this.valueAccessor.setDisabledState(true);
                }
                this.form.updateValueAndValidity({ emitEvent: false });
            }
            if (isPropertyUpdated(changes, this.viewModel)) {
                this.form.setValue(this.model);
                this.viewModel = this.model;
            }
        };
        Object.defineProperty(FormControlDirective.prototype, "path", {
            get: function () { return []; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "validator", {
            get: function () { return composeValidators(this._rawValidators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
            get: function () {
                return composeAsyncValidators(this._rawAsyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlDirective.prototype, "control", {
            get: function () { return this.form; },
            enumerable: true,
            configurable: true
        });
        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        FormControlDirective.prototype._isControlChanged = function (changes) {
            return changes.hasOwnProperty('form');
        };
        return FormControlDirective;
    }(NgControl));
    FormControlDirective.decorators = [
        { type: Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
    ];
    FormControlDirective.ctorParameters = function () {
        return [
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
        ];
    };
    FormControlDirective.propDecorators = {
        'form': [{ type: Input, args: ['formControl',] },],
        'model': [{ type: Input, args: ['ngModel',] },],
        'update': [{ type: Output, args: ['ngModelChange',] },],
        'isDisabled': [{ type: Input, args: ['disabled',] },],
    };
    var formDirectiveProvider$1 = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return FormGroupDirective; })
    };
    var FormGroupDirective = (function (_super) {
        __extends$16(FormGroupDirective, _super);
        function FormGroupDirective(_validators, _asyncValidators) {
            var _this = _super.call(this) || this;
            _this._validators = _validators;
            _this._asyncValidators = _asyncValidators;
            _this._submitted = false;
            _this.directives = [];
            _this.form = null;
            _this.ngSubmit = new EventEmitter();
            return _this;
        }
        FormGroupDirective.prototype.ngOnChanges = function (changes) {
            this._checkFormPresent();
            if (changes.hasOwnProperty('form')) {
                this._updateValidators();
                this._updateDomValue();
                this._updateRegistrations();
            }
        };
        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
            get: function () { return this._submitted; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
            get: function () { return this; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "control", {
            get: function () { return this.form; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormGroupDirective.prototype, "path", {
            get: function () { return []; },
            enumerable: true,
            configurable: true
        });
        FormGroupDirective.prototype.addControl = function (dir) {
            var ctrl = this.form.get(dir.path);
            setUpControl(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
            this.directives.push(dir);
            return ctrl;
        };
        FormGroupDirective.prototype.getControl = function (dir) { return (this.form.get(dir.path)); };
        FormGroupDirective.prototype.removeControl = function (dir) { remove$1(this.directives, dir); };
        FormGroupDirective.prototype.addFormGroup = function (dir) {
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype.removeFormGroup = function (dir) { };
        FormGroupDirective.prototype.getFormGroup = function (dir) { return (this.form.get(dir.path)); };
        FormGroupDirective.prototype.addFormArray = function (dir) {
            var ctrl = this.form.get(dir.path);
            setUpFormContainer(ctrl, dir);
            ctrl.updateValueAndValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype.removeFormArray = function (dir) { };
        FormGroupDirective.prototype.getFormArray = function (dir) { return (this.form.get(dir.path)); };
        FormGroupDirective.prototype.updateModel = function (dir, value) {
            var ctrl = (this.form.get(dir.path));
            ctrl.setValue(value);
        };
        FormGroupDirective.prototype.onSubmit = function ($event) {
            this._submitted = true;
            this.ngSubmit.emit($event);
            return false;
        };
        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
        FormGroupDirective.prototype.resetForm = function (value) {
            if (value === void 0) {
                value = undefined;
            }
            this.form.reset(value);
            this._submitted = false;
        };
        FormGroupDirective.prototype._updateDomValue = function () {
            var _this = this;
            this.directives.forEach(function (dir) {
                var newCtrl = _this.form.get(dir.path);
                if (dir._control !== newCtrl) {
                    cleanUpControl(dir._control, dir);
                    if (newCtrl)
                        setUpControl(newCtrl, dir);
                    dir._control = newCtrl;
                }
            });
            this.form._updateTreeValidity({ emitEvent: false });
        };
        FormGroupDirective.prototype._updateRegistrations = function () {
            var _this = this;
            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
            if (this._oldForm)
                this._oldForm._registerOnCollectionChange(function () { });
            this._oldForm = this.form;
        };
        FormGroupDirective.prototype._updateValidators = function () {
            var sync = composeValidators(this._validators);
            this.form.validator = Validators.compose([this.form.validator, sync]);
            var async = composeAsyncValidators(this._asyncValidators);
            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
        };
        FormGroupDirective.prototype._checkFormPresent = function () {
            if (!this.form) {
                ReactiveErrors.missingFormException();
            }
        };
        return FormGroupDirective;
    }(ControlContainer));
    FormGroupDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[formGroup]',
                    providers: [formDirectiveProvider$1],
                    host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
                    exportAs: 'ngForm'
                },] },
    ];
    FormGroupDirective.ctorParameters = function () {
        return [
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        ];
    };
    FormGroupDirective.propDecorators = {
        'form': [{ type: Input, args: ['formGroup',] },],
        'ngSubmit': [{ type: Output },],
    };
    function remove$1(list, el) {
        var index = list.indexOf(el);
        if (index > -1) {
            list.splice(index, 1);
        }
    }
    var formGroupNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return FormGroupName; })
    };
    var FormGroupName = (function (_super) {
        __extends$16(FormGroupName, _super);
        function FormGroupName(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        FormGroupName.prototype._checkParentType = function () {
            if (_hasInvalidParent(this._parent)) {
                ReactiveErrors.groupParentException();
            }
        };
        return FormGroupName;
    }(AbstractFormGroupDirective));
    FormGroupName.decorators = [
        { type: Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
    ];
    FormGroupName.ctorParameters = function () {
        return [
            { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        ];
    };
    FormGroupName.propDecorators = {
        'name': [{ type: Input, args: ['formGroupName',] },],
    };
    var formArrayNameProvider = {
        provide: ControlContainer,
        useExisting: forwardRef(function () { return FormArrayName; })
    };
    var FormArrayName = (function (_super) {
        __extends$16(FormArrayName, _super);
        function FormArrayName(parent, validators, asyncValidators) {
            var _this = _super.call(this) || this;
            _this._parent = parent;
            _this._validators = validators;
            _this._asyncValidators = asyncValidators;
            return _this;
        }
        FormArrayName.prototype.ngOnInit = function () {
            this._checkParentType();
            this.formDirective.addFormArray(this);
        };
        FormArrayName.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeFormArray(this);
            }
        };
        Object.defineProperty(FormArrayName.prototype, "control", {
            get: function () { return this.formDirective.getFormArray(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "formDirective", {
            get: function () {
                return this._parent ? (this._parent.formDirective) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "path", {
            get: function () { return controlPath(this.name, this._parent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "validator", {
            get: function () { return composeValidators(this._validators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
            get: function () { return composeAsyncValidators(this._asyncValidators); },
            enumerable: true,
            configurable: true
        });
        FormArrayName.prototype._checkParentType = function () {
            if (_hasInvalidParent(this._parent)) {
                ReactiveErrors.arrayParentException();
            }
        };
        return FormArrayName;
    }(ControlContainer));
    FormArrayName.decorators = [
        { type: Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
    ];
    FormArrayName.ctorParameters = function () {
        return [
            { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
        ];
    };
    FormArrayName.propDecorators = {
        'name': [{ type: Input, args: ['formArrayName',] },],
    };
    function _hasInvalidParent(parent) {
        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
            !(parent instanceof FormArrayName);
    }
    var controlNameBinding = {
        provide: NgControl,
        useExisting: forwardRef(function () { return FormControlName; })
    };
    var FormControlName = (function (_super) {
        __extends$16(FormControlName, _super);
        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
            var _this = _super.call(this) || this;
            _this._added = false;
            _this.update = new EventEmitter();
            _this._parent = parent;
            _this._rawValidators = validators || [];
            _this._rawAsyncValidators = asyncValidators || [];
            _this.valueAccessor = selectValueAccessor(_this, valueAccessors);
            return _this;
        }
        Object.defineProperty(FormControlName.prototype, "isDisabled", {
            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
            enumerable: true,
            configurable: true
        });
        FormControlName.prototype.ngOnChanges = function (changes) {
            if (!this._added)
                this._setUpControl();
            if (isPropertyUpdated(changes, this.viewModel)) {
                this.viewModel = this.model;
                this.formDirective.updateModel(this, this.model);
            }
        };
        FormControlName.prototype.ngOnDestroy = function () {
            if (this.formDirective) {
                this.formDirective.removeControl(this);
            }
        };
        FormControlName.prototype.viewToModelUpdate = function (newValue) {
            this.viewModel = newValue;
            this.update.emit(newValue);
        };
        Object.defineProperty(FormControlName.prototype, "path", {
            get: function () { return controlPath(this.name, this._parent); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "formDirective", {
            get: function () { return this._parent ? this._parent.formDirective : null; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "validator", {
            get: function () { return composeValidators(this._rawValidators); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
            get: function () {
                return composeAsyncValidators(this._rawAsyncValidators);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlName.prototype, "control", {
            get: function () { return this._control; },
            enumerable: true,
            configurable: true
        });
        FormControlName.prototype._checkParentType = function () {
            if (!(this._parent instanceof FormGroupName) &&
                this._parent instanceof AbstractFormGroupDirective) {
                ReactiveErrors.ngModelGroupException();
            }
            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
                !(this._parent instanceof FormArrayName)) {
                ReactiveErrors.controlParentException();
            }
        };
        FormControlName.prototype._setUpControl = function () {
            this._checkParentType();
            this._control = this.formDirective.addControl(this);
            if (this.control.disabled && this.valueAccessor.setDisabledState) {
                this.valueAccessor.setDisabledState(true);
            }
            this._added = true;
        };
        return FormControlName;
    }(NgControl));
    FormControlName.decorators = [
        { type: Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
    ];
    FormControlName.ctorParameters = function () {
        return [
            { type: ControlContainer, decorators: [{ type: Optional }, { type: Host }, { type: SkipSelf },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS,] },] },
            { type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR,] },] },
        ];
    };
    FormControlName.propDecorators = {
        'name': [{ type: Input, args: ['formControlName',] },],
        'model': [{ type: Input, args: ['ngModel',] },],
        'update': [{ type: Output, args: ['ngModelChange',] },],
        'isDisabled': [{ type: Input, args: ['disabled',] },],
    };
    var REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return RequiredValidator; }),
        multi: true
    };
    var CHECKBOX_REQUIRED_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return CheckboxRequiredValidator; }),
        multi: true
    };
    var RequiredValidator = (function () {
        function RequiredValidator() {
        }
        Object.defineProperty(RequiredValidator.prototype, "required", {
            get: function () { return this._required; },
            set: function (value) {
                this._required = value != null && value !== false && "" + value !== 'false';
                if (this._onChange)
                    this._onChange();
            },
            enumerable: true,
            configurable: true
        });
        RequiredValidator.prototype.validate = function (c) {
            return this.required ? Validators.required(c) : null;
        };
        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        return RequiredValidator;
    }());
    RequiredValidator.decorators = [
        { type: Directive, args: [{
                    selector: ':not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]',
                    providers: [REQUIRED_VALIDATOR],
                    host: { '[attr.required]': 'required ? "" : null' }
                },] },
    ];
    RequiredValidator.ctorParameters = function () { return []; };
    RequiredValidator.propDecorators = {
        'required': [{ type: Input },],
    };
    var CheckboxRequiredValidator = (function (_super) {
        __extends$16(CheckboxRequiredValidator, _super);
        function CheckboxRequiredValidator() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CheckboxRequiredValidator.prototype.validate = function (c) {
            return this.required ? Validators.requiredTrue(c) : null;
        };
        return CheckboxRequiredValidator;
    }(RequiredValidator));
    CheckboxRequiredValidator.decorators = [
        { type: Directive, args: [{
                    selector: 'input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]',
                    providers: [CHECKBOX_REQUIRED_VALIDATOR],
                    host: { '[attr.required]': 'required ? "" : null' }
                },] },
    ];
    CheckboxRequiredValidator.ctorParameters = function () { return []; };
    var EMAIL_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return EmailValidator; }),
        multi: true
    };
    var EmailValidator = (function () {
        function EmailValidator() {
        }
        Object.defineProperty(EmailValidator.prototype, "email", {
            set: function (value) {
                this._enabled = value === '' || value === true || value === 'true';
                if (this._onChange)
                    this._onChange();
            },
            enumerable: true,
            configurable: true
        });
        EmailValidator.prototype.validate = function (c) {
            return this._enabled ? Validators.email(c) : null;
        };
        EmailValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        return EmailValidator;
    }());
    EmailValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[email][formControlName],[email][formControl],[email][ngModel]',
                    providers: [EMAIL_VALIDATOR]
                },] },
    ];
    EmailValidator.ctorParameters = function () { return []; };
    EmailValidator.propDecorators = {
        'email': [{ type: Input },],
    };
    var MIN_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return MinLengthValidator; }),
        multi: true
    };
    var MinLengthValidator = (function () {
        function MinLengthValidator() {
        }
        MinLengthValidator.prototype.ngOnChanges = function (changes) {
            if ('minlength' in changes) {
                this._createValidator();
                if (this._onChange)
                    this._onChange();
            }
        };
        MinLengthValidator.prototype.validate = function (c) {
            return this.minlength == null ? null : this._validator(c);
        };
        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        MinLengthValidator.prototype._createValidator = function () {
            this._validator = Validators.minLength(parseInt(this.minlength, 10));
        };
        return MinLengthValidator;
    }());
    MinLengthValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
                    providers: [MIN_LENGTH_VALIDATOR],
                    host: { '[attr.minlength]': 'minlength ? minlength : null' }
                },] },
    ];
    MinLengthValidator.ctorParameters = function () { return []; };
    MinLengthValidator.propDecorators = {
        'minlength': [{ type: Input },],
    };
    var MAX_LENGTH_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return MaxLengthValidator; }),
        multi: true
    };
    var MaxLengthValidator = (function () {
        function MaxLengthValidator() {
        }
        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
            if ('maxlength' in changes) {
                this._createValidator();
                if (this._onChange)
                    this._onChange();
            }
        };
        MaxLengthValidator.prototype.validate = function (c) {
            return this.maxlength != null ? this._validator(c) : null;
        };
        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        MaxLengthValidator.prototype._createValidator = function () {
            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
        };
        return MaxLengthValidator;
    }());
    MaxLengthValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
                    providers: [MAX_LENGTH_VALIDATOR],
                    host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
                },] },
    ];
    MaxLengthValidator.ctorParameters = function () { return []; };
    MaxLengthValidator.propDecorators = {
        'maxlength': [{ type: Input },],
    };
    var PATTERN_VALIDATOR = {
        provide: NG_VALIDATORS,
        useExisting: forwardRef(function () { return PatternValidator; }),
        multi: true
    };
    var PatternValidator = (function () {
        function PatternValidator() {
        }
        PatternValidator.prototype.ngOnChanges = function (changes) {
            if ('pattern' in changes) {
                this._createValidator();
                if (this._onChange)
                    this._onChange();
            }
        };
        PatternValidator.prototype.validate = function (c) { return this._validator(c); };
        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
        return PatternValidator;
    }());
    PatternValidator.decorators = [
        { type: Directive, args: [{
                    selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
                    providers: [PATTERN_VALIDATOR],
                    host: { '[attr.pattern]': 'pattern ? pattern : null' }
                },] },
    ];
    PatternValidator.ctorParameters = function () { return []; };
    PatternValidator.propDecorators = {
        'pattern': [{ type: Input },],
    };
    var FormBuilder = (function () {
        function FormBuilder() {
        }
        FormBuilder.prototype.group = function (controlsConfig, extra) {
            if (extra === void 0) {
                extra = null;
            }
            var controls = this._reduceControls(controlsConfig);
            var validator = extra != null ? extra['validator'] : null;
            var asyncValidator = extra != null ? extra['asyncValidator'] : null;
            return new FormGroup(controls, validator, asyncValidator);
        };
        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            return new FormControl(formState, validator, asyncValidator);
        };
        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
            var _this = this;
            if (validator === void 0) {
                validator = null;
            }
            if (asyncValidator === void 0) {
                asyncValidator = null;
            }
            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
            return new FormArray(controls, validator, asyncValidator);
        };
        FormBuilder.prototype._reduceControls = function (controlsConfig) {
            var _this = this;
            var controls = {};
            Object.keys(controlsConfig).forEach(function (controlName) {
                controls[controlName] = _this._createControl(controlsConfig[controlName]);
            });
            return controls;
        };
        FormBuilder.prototype._createControl = function (controlConfig) {
            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
                controlConfig instanceof FormArray) {
                return controlConfig;
            }
            else if (Array.isArray(controlConfig)) {
                var value = controlConfig[0];
                var validator = controlConfig.length > 1 ? controlConfig[1] : null;
                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
                return this.control(value, validator, asyncValidator);
            }
            else {
                return this.control(controlConfig);
            }
        };
        return FormBuilder;
    }());
    FormBuilder.decorators = [
        { type: Injectable },
    ];
    FormBuilder.ctorParameters = function () { return []; };
    var VERSION$3 = new Version('4.0.1');
    var NgNoValidate = (function () {
        function NgNoValidate() {
        }
        return NgNoValidate;
    }());
    NgNoValidate.decorators = [
        { type: Directive, args: [{
                    selector: 'form:not([ngNoForm]):not([ngNativeValidate])',
                    host: { 'novalidate': '' },
                },] },
    ];
    NgNoValidate.ctorParameters = function () { return []; };
    var SHARED_FORM_DIRECTIVES = [
        NgNoValidate,
        NgSelectOption,
        NgSelectMultipleOption,
        DefaultValueAccessor,
        NumberValueAccessor,
        RangeValueAccessor,
        CheckboxControlValueAccessor,
        SelectControlValueAccessor,
        SelectMultipleControlValueAccessor,
        RadioControlValueAccessor,
        NgControlStatus,
        NgControlStatusGroup,
        RequiredValidator,
        MinLengthValidator,
        MaxLengthValidator,
        PatternValidator,
        CheckboxRequiredValidator,
        EmailValidator,
    ];
    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
    var InternalFormsSharedModule = (function () {
        function InternalFormsSharedModule() {
        }
        return InternalFormsSharedModule;
    }());
    InternalFormsSharedModule.decorators = [
        { type: NgModule, args: [{
                    declarations: SHARED_FORM_DIRECTIVES,
                    exports: SHARED_FORM_DIRECTIVES,
                },] },
    ];
    InternalFormsSharedModule.ctorParameters = function () { return []; };
    var FormsModule = (function () {
        function FormsModule() {
        }
        return FormsModule;
    }());
    FormsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: TEMPLATE_DRIVEN_DIRECTIVES,
                    providers: [RadioControlRegistry],
                    exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
                },] },
    ];
    FormsModule.ctorParameters = function () { return []; };
    var ReactiveFormsModule = (function () {
        function ReactiveFormsModule() {
        }
        return ReactiveFormsModule;
    }());
    ReactiveFormsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [REACTIVE_DRIVEN_DIRECTIVES],
                    providers: [FormBuilder, RadioControlRegistry],
                    exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
                },] },
    ];
    ReactiveFormsModule.ctorParameters = function () { return []; };
    var __extends$20 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var BrowserXhr = (function () {
        function BrowserXhr() {
        }
        BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };
        return BrowserXhr;
    }());
    BrowserXhr.decorators = [
        { type: Injectable },
    ];
    BrowserXhr.ctorParameters = function () { return []; };
    var RequestMethod = {};
    RequestMethod.Get = 0;
    RequestMethod.Post = 1;
    RequestMethod.Put = 2;
    RequestMethod.Delete = 3;
    RequestMethod.Options = 4;
    RequestMethod.Head = 5;
    RequestMethod.Patch = 6;
    RequestMethod[RequestMethod.Get] = "Get";
    RequestMethod[RequestMethod.Post] = "Post";
    RequestMethod[RequestMethod.Put] = "Put";
    RequestMethod[RequestMethod.Delete] = "Delete";
    RequestMethod[RequestMethod.Options] = "Options";
    RequestMethod[RequestMethod.Head] = "Head";
    RequestMethod[RequestMethod.Patch] = "Patch";
    var ReadyState = {};
    ReadyState.Unsent = 0;
    ReadyState.Open = 1;
    ReadyState.HeadersReceived = 2;
    ReadyState.Loading = 3;
    ReadyState.Done = 4;
    ReadyState.Cancelled = 5;
    ReadyState[ReadyState.Unsent] = "Unsent";
    ReadyState[ReadyState.Open] = "Open";
    ReadyState[ReadyState.HeadersReceived] = "HeadersReceived";
    ReadyState[ReadyState.Loading] = "Loading";
    ReadyState[ReadyState.Done] = "Done";
    ReadyState[ReadyState.Cancelled] = "Cancelled";
    var ResponseType = {};
    ResponseType.Basic = 0;
    ResponseType.Cors = 1;
    ResponseType.Default = 2;
    ResponseType.Error = 3;
    ResponseType.Opaque = 4;
    ResponseType[ResponseType.Basic] = "Basic";
    ResponseType[ResponseType.Cors] = "Cors";
    ResponseType[ResponseType.Default] = "Default";
    ResponseType[ResponseType.Error] = "Error";
    ResponseType[ResponseType.Opaque] = "Opaque";
    var ContentType = {};
    ContentType.NONE = 0;
    ContentType.JSON = 1;
    ContentType.FORM = 2;
    ContentType.FORM_DATA = 3;
    ContentType.TEXT = 4;
    ContentType.BLOB = 5;
    ContentType.ARRAY_BUFFER = 6;
    ContentType[ContentType.NONE] = "NONE";
    ContentType[ContentType.JSON] = "JSON";
    ContentType[ContentType.FORM] = "FORM";
    ContentType[ContentType.FORM_DATA] = "FORM_DATA";
    ContentType[ContentType.TEXT] = "TEXT";
    ContentType[ContentType.BLOB] = "BLOB";
    ContentType[ContentType.ARRAY_BUFFER] = "ARRAY_BUFFER";
    var ResponseContentType = {};
    ResponseContentType.Text = 0;
    ResponseContentType.Json = 1;
    ResponseContentType.ArrayBuffer = 2;
    ResponseContentType.Blob = 3;
    ResponseContentType[ResponseContentType.Text] = "Text";
    ResponseContentType[ResponseContentType.Json] = "Json";
    ResponseContentType[ResponseContentType.ArrayBuffer] = "ArrayBuffer";
    ResponseContentType[ResponseContentType.Blob] = "Blob";
    var Headers = (function () {
        function Headers(headers) {
            var _this = this;
            this._headers = new Map();
            this._normalizedNames = new Map();
            if (!headers) {
                return;
            }
            if (headers instanceof Headers) {
                headers.forEach(function (values, name) {
                    values.forEach(function (value) { return _this.append(name, value); });
                });
                return;
            }
            Object.keys(headers).forEach(function (name) {
                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];
                _this.delete(name);
                values.forEach(function (value) { return _this.append(name, value); });
            });
        }
        Headers.fromResponseHeaderString = function (headersString) {
            var headers = new Headers();
            headersString.split('\n').forEach(function (line) {
                var index = line.indexOf(':');
                if (index > 0) {
                    var name = line.slice(0, index);
                    var value = line.slice(index + 1).trim();
                    headers.set(name, value);
                }
            });
            return headers;
        };
        Headers.prototype.append = function (name, value) {
            var values = this.getAll(name);
            if (values === null) {
                this.set(name, value);
            }
            else {
                values.push(value);
            }
        };
        Headers.prototype.delete = function (name) {
            var lcName = name.toLowerCase();
            this._normalizedNames.delete(lcName);
            this._headers.delete(lcName);
        };
        Headers.prototype.forEach = function (fn) {
            var _this = this;
            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
        };
        Headers.prototype.get = function (name) {
            var values = this.getAll(name);
            if (values === null) {
                return null;
            }
            return values.length > 0 ? values[0] : null;
        };
        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
        Headers.prototype.set = function (name, value) {
            if (Array.isArray(value)) {
                if (value.length) {
                    this._headers.set(name.toLowerCase(), [value.join(',')]);
                }
            }
            else {
                this._headers.set(name.toLowerCase(), [value]);
            }
            this.mayBeSetNormalizedName(name);
        };
        Headers.prototype.values = function () { return Array.from(this._headers.values()); };
        Headers.prototype.toJSON = function () {
            var _this = this;
            var serialized = {};
            this._headers.forEach(function (values, name) {
                var split = [];
                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
                serialized[_this._normalizedNames.get(name)] = split;
            });
            return serialized;
        };
        Headers.prototype.getAll = function (name) {
            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
        };
        Headers.prototype.entries = function () { throw new Error('"entries" method is not implemented on Headers class'); };
        Headers.prototype.mayBeSetNormalizedName = function (name) {
            var lcName = name.toLowerCase();
            if (!this._normalizedNames.has(lcName)) {
                this._normalizedNames.set(lcName, name);
            }
        };
        return Headers;
    }());
    var ResponseOptions = (function () {
        function ResponseOptions(_a) {
            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;
            this.body = body != null ? body : null;
            this.status = status != null ? status : null;
            this.headers = headers != null ? headers : null;
            this.statusText = statusText != null ? statusText : null;
            this.type = type != null ? type : null;
            this.url = url != null ? url : null;
        }
        ResponseOptions.prototype.merge = function (options) {
            return new ResponseOptions({
                body: options && options.body != null ? options.body : this.body,
                status: options && options.status != null ? options.status : this.status,
                headers: options && options.headers != null ? options.headers : this.headers,
                statusText: options && options.statusText != null ? options.statusText : this.statusText,
                type: options && options.type != null ? options.type : this.type,
                url: options && options.url != null ? options.url : this.url,
            });
        };
        return ResponseOptions;
    }());
    var BaseResponseOptions = (function (_super) {
        __extends$20(BaseResponseOptions, _super);
        function BaseResponseOptions() {
            return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;
        }
        return BaseResponseOptions;
    }(ResponseOptions));
    BaseResponseOptions.decorators = [
        { type: Injectable },
    ];
    BaseResponseOptions.ctorParameters = function () { return []; };
    var ConnectionBackend = (function () {
        function ConnectionBackend() {
        }
        ConnectionBackend.prototype.createConnection = function (request) { };
        return ConnectionBackend;
    }());
    var XSRFStrategy = (function () {
        function XSRFStrategy() {
        }
        XSRFStrategy.prototype.configureRequest = function (req) { };
        return XSRFStrategy;
    }());
    function normalizeMethodName(method) {
        if (typeof method !== 'string')
            return method;
        switch (method.toUpperCase()) {
            case 'GET':
                return RequestMethod.Get;
            case 'POST':
                return RequestMethod.Post;
            case 'PUT':
                return RequestMethod.Put;
            case 'DELETE':
                return RequestMethod.Delete;
            case 'OPTIONS':
                return RequestMethod.Options;
            case 'HEAD':
                return RequestMethod.Head;
            case 'PATCH':
                return RequestMethod.Patch;
        }
        throw new Error("Invalid request method. The method \"" + method + "\" is not supported.");
    }
    var isSuccess = function (status) { return (status >= 200 && status < 300); };
    function getResponseURL(xhr) {
        if ('responseURL' in xhr) {
            return xhr.responseURL;
        }
        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
            return xhr.getResponseHeader('X-Request-URL');
        }
        return;
    }
    function stringToArrayBuffer(input) {
        var view = new Uint16Array(input.length);
        for (var i = 0, strLen = input.length; i < strLen; i++) {
            view[i] = input.charCodeAt(i);
        }
        return view.buffer;
    }
    function paramParser(rawParams) {
        if (rawParams === void 0) {
            rawParams = '';
        }
        var map = new Map();
        if (rawParams.length > 0) {
            var params = rawParams.split('&');
            params.forEach(function (param) {
                var eqIdx = param.indexOf('=');
                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];
                var list = map.get(key) || [];
                list.push(val);
                map.set(key, list);
            });
        }
        return map;
    }
    var QueryEncoder = (function () {
        function QueryEncoder() {
        }
        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };
        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };
        return QueryEncoder;
    }());
    function standardEncoding(v) {
        return encodeURIComponent(v)
            .replace(/%40/gi, '@')
            .replace(/%3A/gi, ':')
            .replace(/%24/gi, '$')
            .replace(/%2C/gi, ',')
            .replace(/%3B/gi, ';')
            .replace(/%2B/gi, '+')
            .replace(/%3D/gi, '=')
            .replace(/%3F/gi, '?')
            .replace(/%2F/gi, '/');
    }
    var URLSearchParams = (function () {
        function URLSearchParams(rawParams, queryEncoder) {
            if (rawParams === void 0) {
                rawParams = '';
            }
            if (queryEncoder === void 0) {
                queryEncoder = new QueryEncoder();
            }
            this.rawParams = rawParams;
            this.queryEncoder = queryEncoder;
            this.paramsMap = paramParser(rawParams);
        }
        URLSearchParams.prototype.clone = function () {
            var clone = new URLSearchParams('', this.queryEncoder);
            clone.appendAll(this);
            return clone;
        };
        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };
        URLSearchParams.prototype.get = function (param) {
            var storedParam = this.paramsMap.get(param);
            return Array.isArray(storedParam) ? storedParam[0] : null;
        };
        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };
        URLSearchParams.prototype.set = function (param, val) {
            if (val === void 0 || val === null) {
                this.delete(param);
                return;
            }
            var list = this.paramsMap.get(param) || [];
            list.length = 0;
            list.push(val);
            this.paramsMap.set(param, list);
        };
        URLSearchParams.prototype.setAll = function (searchParams) {
            var _this = this;
            searchParams.paramsMap.forEach(function (value, param) {
                var list = _this.paramsMap.get(param) || [];
                list.length = 0;
                list.push(value[0]);
                _this.paramsMap.set(param, list);
            });
        };
        URLSearchParams.prototype.append = function (param, val) {
            if (val === void 0 || val === null)
                return;
            var list = this.paramsMap.get(param) || [];
            list.push(val);
            this.paramsMap.set(param, list);
        };
        URLSearchParams.prototype.appendAll = function (searchParams) {
            var _this = this;
            searchParams.paramsMap.forEach(function (value, param) {
                var list = _this.paramsMap.get(param) || [];
                for (var i = 0; i < value.length; ++i) {
                    list.push(value[i]);
                }
                _this.paramsMap.set(param, list);
            });
        };
        URLSearchParams.prototype.replaceAll = function (searchParams) {
            var _this = this;
            searchParams.paramsMap.forEach(function (value, param) {
                var list = _this.paramsMap.get(param) || [];
                list.length = 0;
                for (var i = 0; i < value.length; ++i) {
                    list.push(value[i]);
                }
                _this.paramsMap.set(param, list);
            });
        };
        URLSearchParams.prototype.toString = function () {
            var _this = this;
            var paramsList = [];
            this.paramsMap.forEach(function (values, k) {
                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });
            });
            return paramsList.join('&');
        };
        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };
        return URLSearchParams;
    }());
    var Body = (function () {
        function Body() {
        }
        Body.prototype.json = function () {
            if (typeof this._body === 'string') {
                return JSON.parse((this._body));
            }
            if (this._body instanceof ArrayBuffer) {
                return JSON.parse(this.text());
            }
            return this._body;
        };
        Body.prototype.text = function () {
            if (this._body instanceof URLSearchParams) {
                return this._body.toString();
            }
            if (this._body instanceof ArrayBuffer) {
                return String.fromCharCode.apply(null, new Uint16Array((this._body)));
            }
            if (this._body == null) {
                return '';
            }
            if (typeof this._body === 'object') {
                return JSON.stringify(this._body, null, 2);
            }
            return this._body.toString();
        };
        Body.prototype.arrayBuffer = function () {
            if (this._body instanceof ArrayBuffer) {
                return (this._body);
            }
            return stringToArrayBuffer(this.text());
        };
        Body.prototype.blob = function () {
            if (this._body instanceof Blob) {
                return (this._body);
            }
            if (this._body instanceof ArrayBuffer) {
                return new Blob([this._body]);
            }
            throw new Error('The request body isn\'t either a blob or an array buffer');
        };
        return Body;
    }());
    var Response = (function (_super) {
        __extends$20(Response, _super);
        function Response(responseOptions) {
            var _this = _super.call(this) || this;
            _this._body = responseOptions.body;
            _this.status = responseOptions.status;
            _this.ok = (_this.status >= 200 && _this.status <= 299);
            _this.statusText = responseOptions.statusText;
            _this.headers = responseOptions.headers;
            _this.type = responseOptions.type;
            _this.url = responseOptions.url;
            return _this;
        }
        Response.prototype.toString = function () {
            return "Response with status: " + this.status + " " + this.statusText + " for URL: " + this.url;
        };
        return Response;
    }(Body));
    var _nextRequestId = 0;
    var JSONP_HOME = '__ng_jsonp__';
    var _jsonpConnections = null;
    function _getJsonpConnections() {
        var w = typeof window == 'object' ? window : {};
        if (_jsonpConnections === null) {
            _jsonpConnections = w[JSONP_HOME] = {};
        }
        return _jsonpConnections;
    }
    var BrowserJsonp = (function () {
        function BrowserJsonp() {
        }
        BrowserJsonp.prototype.build = function (url) {
            var node = document.createElement('script');
            node.src = url;
            return node;
        };
        BrowserJsonp.prototype.nextRequestID = function () { return "__req" + _nextRequestId++; };
        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + "." + id + ".finished"; };
        BrowserJsonp.prototype.exposeConnection = function (id, connection) {
            var connections = _getJsonpConnections();
            connections[id] = connection;
        };
        BrowserJsonp.prototype.removeConnection = function (id) {
            var connections = _getJsonpConnections();
            connections[id] = null;
        };
        BrowserJsonp.prototype.send = function (node) { document.body.appendChild(((node))); };
        BrowserJsonp.prototype.cleanup = function (node) {
            if (node.parentNode) {
                node.parentNode.removeChild(((node)));
            }
        };
        return BrowserJsonp;
    }());
    BrowserJsonp.decorators = [
        { type: Injectable },
    ];
    BrowserJsonp.ctorParameters = function () { return []; };
    var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
    var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';
    var JSONPConnection = (function () {
        function JSONPConnection() {
        }
        JSONPConnection.prototype.finished = function (data) { };
        return JSONPConnection;
    }());
    var JSONPConnection_ = (function (_super) {
        __extends$20(JSONPConnection_, _super);
        function JSONPConnection_(req, _dom, baseResponseOptions) {
            var _this = _super.call(this) || this;
            _this._dom = _dom;
            _this.baseResponseOptions = baseResponseOptions;
            _this._finished = false;
            if (req.method !== RequestMethod.Get) {
                throw new TypeError(JSONP_ERR_WRONG_METHOD);
            }
            _this.request = req;
            _this.response = new Observable_2(function (responseObserver) {
                _this.readyState = ReadyState.Loading;
                var id = _this._id = _dom.nextRequestID();
                _dom.exposeConnection(id, _this);
                var callback = _dom.requestCallback(_this._id);
                var url = req.url;
                if (url.indexOf('=JSONP_CALLBACK&') > -1) {
                    url = url.replace('=JSONP_CALLBACK&', "=" + callback + "&");
                }
                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {
                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + ("=" + callback);
                }
                var script = _this._script = _dom.build(url);
                var onLoad = function (event) {
                    if (_this.readyState === ReadyState.Cancelled)
                        return;
                    _this.readyState = ReadyState.Done;
                    _dom.cleanup(script);
                    if (!_this._finished) {
                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });
                        if (baseResponseOptions) {
                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);
                        }
                        responseObserver.error(new Response(responseOptions_1));
                        return;
                    }
                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });
                    if (_this.baseResponseOptions) {
                        responseOptions = _this.baseResponseOptions.merge(responseOptions);
                    }
                    responseObserver.next(new Response(responseOptions));
                    responseObserver.complete();
                };
                var onError = function (error) {
                    if (_this.readyState === ReadyState.Cancelled)
                        return;
                    _this.readyState = ReadyState.Done;
                    _dom.cleanup(script);
                    var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });
                    if (baseResponseOptions) {
                        responseOptions = baseResponseOptions.merge(responseOptions);
                    }
                    responseObserver.error(new Response(responseOptions));
                };
                script.addEventListener('load', onLoad);
                script.addEventListener('error', onError);
                _dom.send(script);
                return function () {
                    _this.readyState = ReadyState.Cancelled;
                    script.removeEventListener('load', onLoad);
                    script.removeEventListener('error', onError);
                    _this._dom.cleanup(script);
                };
            });
            return _this;
        }
        JSONPConnection_.prototype.finished = function (data) {
            this._finished = true;
            this._dom.removeConnection(this._id);
            if (this.readyState === ReadyState.Cancelled)
                return;
            this._responseData = data;
        };
        return JSONPConnection_;
    }(JSONPConnection));
    var JSONPBackend = (function (_super) {
        __extends$20(JSONPBackend, _super);
        function JSONPBackend() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return JSONPBackend;
    }(ConnectionBackend));
    var JSONPBackend_ = (function (_super) {
        __extends$20(JSONPBackend_, _super);
        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {
            var _this = _super.call(this) || this;
            _this._browserJSONP = _browserJSONP;
            _this._baseResponseOptions = _baseResponseOptions;
            return _this;
        }
        JSONPBackend_.prototype.createConnection = function (request) {
            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);
        };
        return JSONPBackend_;
    }(JSONPBackend));
    JSONPBackend_.decorators = [
        { type: Injectable },
    ];
    JSONPBackend_.ctorParameters = function () {
        return [
            { type: BrowserJsonp, },
            { type: ResponseOptions, },
        ];
    };
    var XSSI_PREFIX = /^\)\]\}',?\n/;
    var XHRConnection = (function () {
        function XHRConnection(req, browserXHR, baseResponseOptions) {
            var _this = this;
            this.request = req;
            this.response = new Observable_2(function (responseObserver) {
                var _xhr = browserXHR.build();
                _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);
                if (req.withCredentials != null) {
                    _xhr.withCredentials = req.withCredentials;
                }
                var onLoad = function () {
                    var status = _xhr.status === 1223 ? 204 : _xhr.status;
                    var body = null;
                    if (status !== 204) {
                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;
                        if (typeof body === 'string') {
                            body = body.replace(XSSI_PREFIX, '');
                        }
                    }
                    if (status === 0) {
                        status = body ? 200 : 0;
                    }
                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());
                    var url = getResponseURL(_xhr) || req.url;
                    var statusText = _xhr.statusText || 'OK';
                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });
                    if (baseResponseOptions != null) {
                        responseOptions = baseResponseOptions.merge(responseOptions);
                    }
                    var response = new Response(responseOptions);
                    response.ok = isSuccess(status);
                    if (response.ok) {
                        responseObserver.next(response);
                        responseObserver.complete();
                        return;
                    }
                    responseObserver.error(response);
                };
                var onError = function (err) {
                    var responseOptions = new ResponseOptions({
                        body: err,
                        type: ResponseType.Error,
                        status: _xhr.status,
                        statusText: _xhr.statusText,
                    });
                    if (baseResponseOptions != null) {
                        responseOptions = baseResponseOptions.merge(responseOptions);
                    }
                    responseObserver.error(new Response(responseOptions));
                };
                _this.setDetectedContentType(req, _xhr);
                if (req.headers == null) {
                    req.headers = new Headers();
                }
                if (!req.headers.has('Accept')) {
                    req.headers.append('Accept', 'application/json, text/plain, */*');
                }
                req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });
                if (req.responseType != null && _xhr.responseType != null) {
                    switch (req.responseType) {
                        case ResponseContentType.ArrayBuffer:
                            _xhr.responseType = 'arraybuffer';
                            break;
                        case ResponseContentType.Json:
                            _xhr.responseType = 'json';
                            break;
                        case ResponseContentType.Text:
                            _xhr.responseType = 'text';
                            break;
                        case ResponseContentType.Blob:
                            _xhr.responseType = 'blob';
                            break;
                        default:
                            throw new Error('The selected responseType is not supported');
                    }
                }
                _xhr.addEventListener('load', onLoad);
                _xhr.addEventListener('error', onError);
                _xhr.send(_this.request.getBody());
                return function () {
                    _xhr.removeEventListener('load', onLoad);
                    _xhr.removeEventListener('error', onError);
                    _xhr.abort();
                };
            });
        }
        XHRConnection.prototype.setDetectedContentType = function (req, _xhr) {
            if (req.headers != null && req.headers.get('Content-Type') != null) {
                return;
            }
            switch (req.contentType) {
                case ContentType.NONE:
                    break;
                case ContentType.JSON:
                    _xhr.setRequestHeader('content-type', 'application/json');
                    break;
                case ContentType.FORM:
                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                    break;
                case ContentType.TEXT:
                    _xhr.setRequestHeader('content-type', 'text/plain');
                    break;
                case ContentType.BLOB:
                    var blob = req.blob();
                    if (blob.type) {
                        _xhr.setRequestHeader('content-type', blob.type);
                    }
                    break;
            }
        };
        return XHRConnection;
    }());
    var CookieXSRFStrategy = (function () {
        function CookieXSRFStrategy(_cookieName, _headerName) {
            if (_cookieName === void 0) {
                _cookieName = 'XSRF-TOKEN';
            }
            if (_headerName === void 0) {
                _headerName = 'X-XSRF-TOKEN';
            }
            this._cookieName = _cookieName;
            this._headerName = _headerName;
        }
        CookieXSRFStrategy.prototype.configureRequest = function (req) {
            var xsrfToken = getDOM().getCookie(this._cookieName);
            if (xsrfToken) {
                req.headers.set(this._headerName, xsrfToken);
            }
        };
        return CookieXSRFStrategy;
    }());
    var XHRBackend = (function () {
        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {
            this._browserXHR = _browserXHR;
            this._baseResponseOptions = _baseResponseOptions;
            this._xsrfStrategy = _xsrfStrategy;
        }
        XHRBackend.prototype.createConnection = function (request) {
            this._xsrfStrategy.configureRequest(request);
            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);
        };
        return XHRBackend;
    }());
    XHRBackend.decorators = [
        { type: Injectable },
    ];
    XHRBackend.ctorParameters = function () {
        return [
            { type: BrowserXhr, },
            { type: ResponseOptions, },
            { type: XSRFStrategy, },
        ];
    };
    var RequestOptions = (function () {
        function RequestOptions(_a) {
            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, params = _b.params, withCredentials = _b.withCredentials, responseType = _b.responseType;
            this.method = method != null ? normalizeMethodName(method) : null;
            this.headers = headers != null ? headers : null;
            this.body = body != null ? body : null;
            this.url = url != null ? url : null;
            this.params = this._mergeSearchParams(params || search);
            this.withCredentials = withCredentials != null ? withCredentials : null;
            this.responseType = responseType != null ? responseType : null;
        }
        Object.defineProperty(RequestOptions.prototype, "search", {
            get: function () { return this.params; },
            set: function (params) { this.params = params; },
            enumerable: true,
            configurable: true
        });
        RequestOptions.prototype.merge = function (options) {
            return new RequestOptions({
                method: options && options.method != null ? options.method : this.method,
                headers: options && options.headers != null ? options.headers : new Headers(this.headers),
                body: options && options.body != null ? options.body : this.body,
                url: options && options.url != null ? options.url : this.url,
                params: options && this._mergeSearchParams(options.params || options.search),
                withCredentials: options && options.withCredentials != null ? options.withCredentials :
                    this.withCredentials,
                responseType: options && options.responseType != null ? options.responseType :
                    this.responseType
            });
        };
        RequestOptions.prototype._mergeSearchParams = function (params) {
            if (!params)
                return this.params;
            if (params instanceof URLSearchParams) {
                return params.clone();
            }
            if (typeof params === 'string') {
                return new URLSearchParams(params);
            }
            return this._parseParams(params);
        };
        RequestOptions.prototype._parseParams = function (objParams) {
            var _this = this;
            if (objParams === void 0) {
                objParams = {};
            }
            var params = new URLSearchParams();
            Object.keys(objParams).forEach(function (key) {
                var value = objParams[key];
                if (Array.isArray(value)) {
                    value.forEach(function (item) { return _this._appendParam(key, item, params); });
                }
                else {
                    _this._appendParam(key, value, params);
                }
            });
            return params;
        };
        RequestOptions.prototype._appendParam = function (key, value, params) {
            if (typeof value !== 'string') {
                value = JSON.stringify(value);
            }
            params.append(key, value);
        };
        return RequestOptions;
    }());
    var BaseRequestOptions = (function (_super) {
        __extends$20(BaseRequestOptions, _super);
        function BaseRequestOptions() {
            return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;
        }
        return BaseRequestOptions;
    }(RequestOptions));
    BaseRequestOptions.decorators = [
        { type: Injectable },
    ];
    BaseRequestOptions.ctorParameters = function () { return []; };
    var Request = (function (_super) {
        __extends$20(Request, _super);
        function Request(requestOptions) {
            var _this = _super.call(this) || this;
            var url = requestOptions.url;
            _this.url = requestOptions.url;
            if (requestOptions.params) {
                var params = requestOptions.params.toString();
                if (params.length > 0) {
                    var prefix = '?';
                    if (_this.url.indexOf('?') != -1) {
                        prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';
                    }
                    _this.url = url + prefix + params;
                }
            }
            _this._body = requestOptions.body;
            _this.method = normalizeMethodName(requestOptions.method);
            _this.headers = new Headers(requestOptions.headers);
            _this.contentType = _this.detectContentType();
            _this.withCredentials = requestOptions.withCredentials;
            _this.responseType = requestOptions.responseType;
            return _this;
        }
        Request.prototype.detectContentType = function () {
            switch (this.headers.get('content-type')) {
                case 'application/json':
                    return ContentType.JSON;
                case 'application/x-www-form-urlencoded':
                    return ContentType.FORM;
                case 'multipart/form-data':
                    return ContentType.FORM_DATA;
                case 'text/plain':
                case 'text/html':
                    return ContentType.TEXT;
                case 'application/octet-stream':
                    return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;
                default:
                    return this.detectContentTypeFromBody();
            }
        };
        Request.prototype.detectContentTypeFromBody = function () {
            if (this._body == null) {
                return ContentType.NONE;
            }
            else if (this._body instanceof URLSearchParams) {
                return ContentType.FORM;
            }
            else if (this._body instanceof FormData) {
                return ContentType.FORM_DATA;
            }
            else if (this._body instanceof Blob$1) {
                return ContentType.BLOB;
            }
            else if (this._body instanceof ArrayBuffer$1) {
                return ContentType.ARRAY_BUFFER;
            }
            else if (this._body && typeof this._body === 'object') {
                return ContentType.JSON;
            }
            else {
                return ContentType.TEXT;
            }
        };
        Request.prototype.getBody = function () {
            switch (this.contentType) {
                case ContentType.JSON:
                    return this.text();
                case ContentType.FORM:
                    return this.text();
                case ContentType.FORM_DATA:
                    return this._body;
                case ContentType.TEXT:
                    return this.text();
                case ContentType.BLOB:
                    return this.blob();
                case ContentType.ARRAY_BUFFER:
                    return this.arrayBuffer();
                default:
                    return null;
            }
        };
        return Request;
    }(Body));
    var noop = function () { };
    var w = typeof window == 'object' ? window : noop;
    var FormData = ((w))['FormData'] || noop;
    var Blob$1 = ((w))['Blob'] || noop;
    var ArrayBuffer$1 = ((w))['ArrayBuffer'] || noop;
    function httpRequest(backend, request) {
        return backend.createConnection(request).response;
    }
    function mergeOptions(defaultOpts, providedOpts, method, url) {
        var newOptions = defaultOpts;
        if (providedOpts) {
            return newOptions.merge(new RequestOptions({
                method: providedOpts.method || method,
                url: providedOpts.url || url,
                search: providedOpts.search,
                params: providedOpts.params,
                headers: providedOpts.headers,
                body: providedOpts.body,
                withCredentials: providedOpts.withCredentials,
                responseType: providedOpts.responseType
            }));
        }
        return newOptions.merge(new RequestOptions({ method: method, url: url }));
    }
    var Http = (function () {
        function Http(_backend, _defaultOptions) {
            this._backend = _backend;
            this._defaultOptions = _defaultOptions;
        }
        Http.prototype.request = function (url, options) {
            var responseObservable;
            if (typeof url === 'string') {
                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (url))));
            }
            else if (url instanceof Request) {
                responseObservable = httpRequest(this._backend, url);
            }
            else {
                throw new Error('First argument must be a url string or Request instance.');
            }
            return responseObservable;
        };
        Http.prototype.get = function (url, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));
        };
        Http.prototype.post = function (url, body, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));
        };
        Http.prototype.put = function (url, body, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));
        };
        Http.prototype.delete = function (url, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));
        };
        Http.prototype.patch = function (url, body, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));
        };
        Http.prototype.head = function (url, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));
        };
        Http.prototype.options = function (url, options) {
            return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));
        };
        return Http;
    }());
    Http.decorators = [
        { type: Injectable },
    ];
    Http.ctorParameters = function () {
        return [
            { type: ConnectionBackend, },
            { type: RequestOptions, },
        ];
    };
    var Jsonp = (function (_super) {
        __extends$20(Jsonp, _super);
        function Jsonp(backend, defaultOptions) {
            return _super.call(this, backend, defaultOptions) || this;
        }
        Jsonp.prototype.request = function (url, options) {
            var responseObservable;
            if (typeof url === 'string') {
                url =
                    new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, (url)));
            }
            if (url instanceof Request) {
                if (url.method !== RequestMethod.Get) {
                    throw new Error('JSONP requests must use GET request method.');
                }
                responseObservable = httpRequest(this._backend, url);
            }
            else {
                throw new Error('First argument must be a url string or Request instance.');
            }
            return responseObservable;
        };
        return Jsonp;
    }(Http));
    Jsonp.decorators = [
        { type: Injectable },
    ];
    Jsonp.ctorParameters = function () {
        return [
            { type: ConnectionBackend, },
            { type: RequestOptions, },
        ];
    };
    function _createDefaultCookieXSRFStrategy() {
        return new CookieXSRFStrategy();
    }
    function httpFactory(xhrBackend, requestOptions) {
        return new Http(xhrBackend, requestOptions);
    }
    function jsonpFactory(jsonpBackend, requestOptions) {
        return new Jsonp(jsonpBackend, requestOptions);
    }
    var HttpModule = (function () {
        function HttpModule() {
        }
        return HttpModule;
    }());
    HttpModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },
                        BrowserXhr,
                        { provide: RequestOptions, useClass: BaseRequestOptions },
                        { provide: ResponseOptions, useClass: BaseResponseOptions },
                        XHRBackend,
                        { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },
                    ],
                },] },
    ];
    HttpModule.ctorParameters = function () { return []; };
    var JsonpModule = (function () {
        function JsonpModule() {
        }
        return JsonpModule;
    }());
    JsonpModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },
                        BrowserJsonp,
                        { provide: RequestOptions, useClass: BaseRequestOptions },
                        { provide: ResponseOptions, useClass: BaseResponseOptions },
                        { provide: JSONPBackend, useClass: JSONPBackend_ },
                    ],
                },] },
    ];
    JsonpModule.ctorParameters = function () { return []; };
    var VERSION$4 = new Version('4.0.1');
    function toInteger(value) {
        return parseInt("" + value, 10);
    }
    function toString(value) {
        return (value !== undefined && value !== null) ? "" + value : '';
    }
    function getValueInRange(value, max, min) {
        if (min === void 0) {
            min = 0;
        }
        return Math.max(Math.min(value, max), min);
    }
    function isString(value) {
        return typeof value === 'string';
    }
    function isNumber(value) {
        return !isNaN(toInteger(value));
    }
    function isDefined(value) {
        return value !== undefined && value !== null;
    }
    function padNumber(value) {
        if (isNumber(value)) {
            return ("0" + value).slice(-2);
        }
        else {
            return '';
        }
    }
    function regExpEscape(text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    }
    var NgbAccordionConfig = (function () {
        function NgbAccordionConfig() {
            this.closeOthers = false;
        }
        NgbAccordionConfig.decorators = [
            { type: Injectable },
        ];
        NgbAccordionConfig.ctorParameters = [];
        return NgbAccordionConfig;
    }());
    var nextId = 0;
    var NgbPanelTitle = (function () {
        function NgbPanelTitle(templateRef) {
            this.templateRef = templateRef;
        }
        NgbPanelTitle.decorators = [
            { type: Directive, args: [{ selector: 'template[ngbPanelTitle]' },] },
        ];
        NgbPanelTitle.ctorParameters = [
            { type: TemplateRef, },
        ];
        return NgbPanelTitle;
    }());
    var NgbPanelContent = (function () {
        function NgbPanelContent(templateRef) {
            this.templateRef = templateRef;
        }
        NgbPanelContent.decorators = [
            { type: Directive, args: [{ selector: 'template[ngbPanelContent]' },] },
        ];
        NgbPanelContent.ctorParameters = [
            { type: TemplateRef, },
        ];
        return NgbPanelContent;
    }());
    var NgbPanel = (function () {
        function NgbPanel() {
            this.focused = false;
            this.disabled = false;
            this.id = "ngb-panel-" + nextId++;
        }
        NgbPanel.decorators = [
            { type: Directive, args: [{ selector: 'ngb-panel' },] },
        ];
        NgbPanel.ctorParameters = [];
        NgbPanel.propDecorators = {
            'disabled': [{ type: Input },],
            'id': [{ type: Input },],
            'title': [{ type: Input },],
            'type': [{ type: Input },],
            'contentTpl': [{ type: ContentChild, args: [NgbPanelContent,] },],
            'titleTpl': [{ type: ContentChild, args: [NgbPanelTitle,] },],
        };
        return NgbPanel;
    }());
    var NgbAccordion = (function () {
        function NgbAccordion(config) {
            this._states = new Map();
            this._panelRefs = new Map();
            this.activeIds = [];
            this.panelChange = new EventEmitter();
            this.type = config.type;
            this.closeOtherPanels = config.closeOthers;
        }
        NgbAccordion.prototype.toggle = function (panelId) {
            var panel = this._panelRefs.get(panelId);
            if (panel && !panel.disabled) {
                var nextState = !this._states.get(panelId);
                var defaultPrevented_1 = false;
                this.panelChange.emit({ panelId: panelId, nextState: nextState, preventDefault: function () { defaultPrevented_1 = true; } });
                if (!defaultPrevented_1) {
                    this._states.set(panelId, nextState);
                    if (this.closeOtherPanels) {
                        this._closeOthers(panelId);
                    }
                    this._updateActiveIds();
                }
            }
        };
        NgbAccordion.prototype.ngAfterContentChecked = function () {
            if (isString(this.activeIds)) {
                this.activeIds = this.activeIds.split(/\s*,\s*/);
            }
            this._updateStates();
            if (this.activeIds.length > 1 && this.closeOtherPanels) {
                this._closeOthers(this.activeIds[0]);
                this._updateActiveIds();
            }
        };
        NgbAccordion.prototype.isOpen = function (panelId) { return this._states.get(panelId); };
        NgbAccordion.prototype._closeOthers = function (panelId) {
            var _this = this;
            this._states.forEach(function (state$$1, id) {
                if (id !== panelId) {
                    _this._states.set(id, false);
                }
            });
        };
        NgbAccordion.prototype._updateActiveIds = function () {
            var _this = this;
            this.activeIds =
                this.panels.toArray().filter(function (panel) { return _this.isOpen(panel.id) && !panel.disabled; }).map(function (panel) { return panel.id; });
        };
        NgbAccordion.prototype._updateStates = function () {
            var _this = this;
            this._states.clear();
            this._panelRefs.clear();
            this.panels.toArray().forEach(function (panel) {
                _this._states.set(panel.id, _this.activeIds.indexOf(panel.id) > -1 && !panel.disabled);
                _this._panelRefs.set(panel.id, panel);
            });
        };
        NgbAccordion.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-accordion',
                        exportAs: 'ngbAccordion',
                        host: { 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },
                        template: "\n  <div class=\"card\">\n    <template ngFor let-panel [ngForOf]=\"panels\">\n      <div role=\"tab\" id=\"{{panel.id}}-header\" [attr.aria-selected]=\"panel.focused\"\n        [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"isOpen(panel.id)\">\n        <a href (click)=\"!!toggle(panel.id)\" (focus)=\"panel.focused = true\" \n          (blur)=\"panel.focused = false\" [class.text-muted]=\"panel.disabled\" \n          [attr.aria-expanded]=\"isOpen(panel.id)\" [attr.aria-controls]=\"panel.id\">\n          {{panel.title}}<template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></template>\n        </a>\n      </div>\n      <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\" class=\"card-block\" *ngIf=\"isOpen(panel.id)\">\n        <template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></template>\n      </div>\n    </template>\n  </div>\n"
                    },] },
        ];
        NgbAccordion.ctorParameters = [
            { type: NgbAccordionConfig, },
        ];
        NgbAccordion.propDecorators = {
            'panels': [{ type: ContentChildren, args: [NgbPanel,] },],
            'activeIds': [{ type: Input },],
            'closeOtherPanels': [{ type: Input, args: ['closeOthers',] },],
            'type': [{ type: Input },],
            'panelChange': [{ type: Output },],
        };
        return NgbAccordion;
    }());
    var NGB_ACCORDION_DIRECTIVES = [NgbAccordion, NgbPanel, NgbPanelTitle, NgbPanelContent];
    var NgbAccordionModule = (function () {
        function NgbAccordionModule() {
        }
        NgbAccordionModule.forRoot = function () { return { ngModule: NgbAccordionModule, providers: [NgbAccordionConfig] }; };
        NgbAccordionModule.decorators = [
            { type: NgModule, args: [{ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [CommonModule] },] },
        ];
        NgbAccordionModule.ctorParameters = [];
        return NgbAccordionModule;
    }());
    var NgbAlertConfig = (function () {
        function NgbAlertConfig() {
            this.dismissible = true;
            this.type = 'warning';
        }
        NgbAlertConfig.decorators = [
            { type: Injectable },
        ];
        NgbAlertConfig.ctorParameters = [];
        return NgbAlertConfig;
    }());
    var NgbAlert = (function () {
        function NgbAlert(config) {
            this.close = new EventEmitter();
            this.dismissible = config.dismissible;
            this.type = config.type;
        }
        NgbAlert.prototype.closeHandler = function () { this.close.emit(null); };
        NgbAlert.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-alert',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        template: "\n    <div [class]=\"'alert alert-' + type\" role=\"alert\">\n      <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeHandler()\">\n            <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    "
                    },] },
        ];
        NgbAlert.ctorParameters = [
            { type: NgbAlertConfig, },
        ];
        NgbAlert.propDecorators = {
            'dismissible': [{ type: Input },],
            'type': [{ type: Input },],
            'close': [{ type: Output },],
        };
        return NgbAlert;
    }());
    var NgbAlertModule = (function () {
        function NgbAlertModule() {
        }
        NgbAlertModule.forRoot = function () { return { ngModule: NgbAlertModule, providers: [NgbAlertConfig] }; };
        NgbAlertModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbAlert], exports: [NgbAlert], imports: [CommonModule], entryComponents: [NgbAlert] },] },
        ];
        NgbAlertModule.ctorParameters = [];
        return NgbAlertModule;
    }());
    var NGB_RADIO_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NgbRadioGroup; }),
        multi: true
    };
    var NgbRadioGroup = (function () {
        function NgbRadioGroup() {
            this._radios = new Set();
            this._value = null;
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        NgbRadioGroup.prototype.onRadioChange = function (radio) {
            this.writeValue(radio.value);
            this.onChange(radio.value);
        };
        NgbRadioGroup.prototype.onRadioValueUpdate = function () { this._updateRadiosValue(); };
        NgbRadioGroup.prototype.register = function (radio) { this._radios.add(radio); };
        NgbRadioGroup.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        NgbRadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        NgbRadioGroup.prototype.setDisabledState = function (isDisabled) { this._updateRadiosDisabled(isDisabled); };
        NgbRadioGroup.prototype.unregister = function (radio) { this._radios.delete(radio); };
        NgbRadioGroup.prototype.writeValue = function (value) {
            this._value = value;
            this._updateRadiosValue();
        };
        NgbRadioGroup.prototype._updateRadiosValue = function () {
            var _this = this;
            this._radios.forEach(function (radio) { return radio.updateValue(_this._value); });
        };
        NgbRadioGroup.prototype._updateRadiosDisabled = function (isDisabled) { this._radios.forEach(function (radio) { return radio.updateDisabled(isDisabled); }); };
        NgbRadioGroup.decorators = [
            { type: Directive, args: [{
                        selector: '[ngbRadioGroup]',
                        host: { 'data-toggle': 'buttons', 'class': 'btn-group' },
                        providers: [NGB_RADIO_VALUE_ACCESSOR]
                    },] },
        ];
        NgbRadioGroup.ctorParameters = [];
        return NgbRadioGroup;
    }());
    var NgbActiveLabel = (function () {
        function NgbActiveLabel(_renderer, _elRef) {
            this._renderer = _renderer;
            this._elRef = _elRef;
        }
        Object.defineProperty(NgbActiveLabel.prototype, "active", {
            set: function (isActive) { this._renderer.setElementClass(this._elRef.nativeElement, 'active', isActive); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgbActiveLabel.prototype, "disabled", {
            set: function (isDisabled) {
                this._renderer.setElementClass(this._elRef.nativeElement, 'disabled', isDisabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgbActiveLabel.prototype, "focused", {
            set: function (isFocused) { this._renderer.setElementClass(this._elRef.nativeElement, 'focus', isFocused); },
            enumerable: true,
            configurable: true
        });
        NgbActiveLabel.decorators = [
            { type: Directive, args: [{ selector: 'label.btn' },] },
        ];
        NgbActiveLabel.ctorParameters = [
            { type: Renderer, },
            { type: ElementRef, },
        ];
        return NgbActiveLabel;
    }());
    var NgbRadio = (function () {
        function NgbRadio(_group, _label, _renderer, _element) {
            this._group = _group;
            this._label = _label;
            this._renderer = _renderer;
            this._element = _element;
            this._value = null;
            if (this._group) {
                this._group.register(this);
            }
        }
        Object.defineProperty(NgbRadio.prototype, "value", {
            get: function () { return this._value; },
            set: function (value) {
                this._value = value;
                var stringValue = value ? value.toString() : '';
                this._renderer.setElementProperty(this._element.nativeElement, 'value', stringValue);
                if (this._group) {
                    this._group.onRadioValueUpdate();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgbRadio.prototype, "checked", {
            get: function () { return this._checked; },
            set: function (value) {
                this._checked = this._element.nativeElement.hasAttribute('checked') ? true : value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgbRadio.prototype, "disabled", {
            get: function () { return this._disabled; },
            set: function (isDisabled) {
                this.updateDisabled(isDisabled !== false);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgbRadio.prototype, "focused", {
            set: function (isFocused) {
                if (this._label) {
                    this._label.focused = isFocused;
                }
            },
            enumerable: true,
            configurable: true
        });
        NgbRadio.prototype.ngOnDestroy = function () {
            if (this._group) {
                this._group.unregister(this);
            }
        };
        NgbRadio.prototype.onChange = function () {
            if (this._group) {
                this._group.onRadioChange(this);
            }
        };
        NgbRadio.prototype.updateValue = function (value) {
            this._checked = (this.value === value && value !== null);
            this._label.active = this._checked;
        };
        NgbRadio.prototype.updateDisabled = function (isDisabled) {
            this._disabled = isDisabled;
            if (this._label) {
                this._label.disabled = this._disabled;
            }
        };
        NgbRadio.decorators = [
            { type: Directive, args: [{
                        selector: 'input[type=radio]',
                        host: {
                            '[checked]': 'checked',
                            '[disabled]': 'disabled',
                            '(change)': 'onChange()',
                            '(focus)': 'focused = true',
                            '(blur)': 'focused = false'
                        }
                    },] },
        ];
        NgbRadio.ctorParameters = [
            { type: NgbRadioGroup, decorators: [{ type: Optional },] },
            { type: NgbActiveLabel, decorators: [{ type: Optional },] },
            { type: Renderer, },
            { type: ElementRef, },
        ];
        NgbRadio.propDecorators = {
            'value': [{ type: Input, args: ['value',] },],
            'checked': [{ type: Input, args: ['checked',] },],
            'disabled': [{ type: Input, args: ['disabled',] },],
        };
        return NgbRadio;
    }());
    var NGB_RADIO_DIRECTIVES = [NgbRadio, NgbActiveLabel, NgbRadioGroup];
    var NgbButtonsModule = (function () {
        function NgbButtonsModule() {
        }
        NgbButtonsModule.forRoot = function () { return { ngModule: NgbButtonsModule, providers: [] }; };
        NgbButtonsModule.decorators = [
            { type: NgModule, args: [{ declarations: NGB_RADIO_DIRECTIVES, exports: NGB_RADIO_DIRECTIVES },] },
        ];
        NgbButtonsModule.ctorParameters = [];
        return NgbButtonsModule;
    }());
    var NgbCarouselConfig = (function () {
        function NgbCarouselConfig() {
            this.interval = 5000;
            this.wrap = true;
            this.keyboard = true;
        }
        NgbCarouselConfig.decorators = [
            { type: Injectable },
        ];
        NgbCarouselConfig.ctorParameters = [];
        return NgbCarouselConfig;
    }());
    var nextId$1 = 0;
    var NgbSlide = (function () {
        function NgbSlide(tplRef) {
            this.tplRef = tplRef;
            this.id = "ngb-slide-" + nextId$1++;
        }
        NgbSlide.decorators = [
            { type: Directive, args: [{ selector: 'template[ngbSlide]' },] },
        ];
        NgbSlide.ctorParameters = [
            { type: TemplateRef, },
        ];
        NgbSlide.propDecorators = {
            'id': [{ type: Input },],
        };
        return NgbSlide;
    }());
    var NgbCarousel = (function () {
        function NgbCarousel(config) {
            this.interval = config.interval;
            this.wrap = config.wrap;
            this.keyboard = config.keyboard;
        }
        NgbCarousel.prototype.ngAfterContentChecked = function () {
            var activeSlide = this._getSlideById(this.activeId);
            this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);
        };
        NgbCarousel.prototype.ngOnInit = function () { this._startTimer(); };
        NgbCarousel.prototype.ngOnDestroy = function () { clearInterval(this._slideChangeInterval); };
        NgbCarousel.prototype.select = function (slideId) {
            this.cycleToSelected(slideId);
            this._restartTimer();
        };
        NgbCarousel.prototype.prev = function () {
            this.cycleToPrev();
            this._restartTimer();
        };
        NgbCarousel.prototype.next = function () {
            this.cycleToNext();
            this._restartTimer();
        };
        NgbCarousel.prototype.pause = function () { this._stopTimer(); };
        NgbCarousel.prototype.cycle = function () { this._startTimer(); };
        NgbCarousel.prototype.cycleToNext = function () { this.cycleToSelected(this._getNextSlide(this.activeId)); };
        NgbCarousel.prototype.cycleToPrev = function () { this.cycleToSelected(this._getPrevSlide(this.activeId)); };
        NgbCarousel.prototype.cycleToSelected = function (slideIdx) {
            var selectedSlide = this._getSlideById(slideIdx);
            if (selectedSlide) {
                this.activeId = selectedSlide.id;
            }
        };
        NgbCarousel.prototype.keyPrev = function () {
            if (this.keyboard) {
                this.prev();
            }
        };
        NgbCarousel.prototype.keyNext = function () {
            if (this.keyboard) {
                this.next();
            }
        };
        NgbCarousel.prototype._restartTimer = function () {
            this._stopTimer();
            this._startTimer();
        };
        NgbCarousel.prototype._startTimer = function () {
            var _this = this;
            if (this.interval > 0) {
                this._slideChangeInterval = setInterval(function () { _this.cycleToNext(); }, this.interval);
            }
        };
        NgbCarousel.prototype._stopTimer = function () { clearInterval(this._slideChangeInterval); };
        NgbCarousel.prototype._getSlideById = function (slideId) {
            var slideWithId = this.slides.filter(function (slide) { return slide.id === slideId; });
            return slideWithId.length ? slideWithId[0] : null;
        };
        NgbCarousel.prototype._getSlideIdxById = function (slideId) {
            return this.slides.toArray().indexOf(this._getSlideById(slideId));
        };
        NgbCarousel.prototype._getNextSlide = function (currentSlideId) {
            var slideArr = this.slides.toArray();
            var currentSlideIdx = this._getSlideIdxById(currentSlideId);
            var isLastSlide = currentSlideIdx === slideArr.length - 1;
            return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :
                slideArr[currentSlideIdx + 1].id;
        };
        NgbCarousel.prototype._getPrevSlide = function (currentSlideId) {
            var slideArr = this.slides.toArray();
            var currentSlideIdx = this._getSlideIdxById(currentSlideId);
            var isFirstSlide = currentSlideIdx === 0;
            return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :
                slideArr[currentSlideIdx - 1].id;
        };
        NgbCarousel.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-carousel',
                        exportAs: 'ngbCarousel',
                        host: {
                            'class': 'carousel slide',
                            '[style.display]': '"block"',
                            'tabIndex': '0',
                            '(mouseenter)': 'pause()',
                            '(mouseleave)': 'cycle()',
                            '(keydown.arrowLeft)': 'keyPrev()',
                            '(keydown.arrowRight)': 'keyNext()'
                        },
                        template: "\n    <ol class=\"carousel-indicators\">\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"cycleToSelected(slide.id)\"></li>\n    </ol>\n    <div class=\"carousel-inner\" role=\"listbox\">\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\n      </div>\n    </div>\n    <a class=\"left carousel-control\" role=\"button\" (click)=\"cycleToPrev()\">\n      <span class=\"icon-prev\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control\" role=\"button\" (click)=\"cycleToNext()\">\n      <span class=\"icon-next\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Next</span>\n    </a>\n    "
                    },] },
        ];
        NgbCarousel.ctorParameters = [
            { type: NgbCarouselConfig, },
        ];
        NgbCarousel.propDecorators = {
            'slides': [{ type: ContentChildren, args: [NgbSlide,] },],
            'interval': [{ type: Input },],
            'wrap': [{ type: Input },],
            'keyboard': [{ type: Input },],
            'activeId': [{ type: Input },],
        };
        return NgbCarousel;
    }());
    var NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];
    var NgbCarouselModule = (function () {
        function NgbCarouselModule() {
        }
        NgbCarouselModule.forRoot = function () { return { ngModule: NgbCarouselModule, providers: [NgbCarouselConfig] }; };
        NgbCarouselModule.decorators = [
            { type: NgModule, args: [{ declarations: NGB_CAROUSEL_DIRECTIVES, exports: NGB_CAROUSEL_DIRECTIVES, imports: [CommonModule] },] },
        ];
        NgbCarouselModule.ctorParameters = [];
        return NgbCarouselModule;
    }());
    var NgbCollapse = (function () {
        function NgbCollapse() {
            this.collapsed = false;
        }
        NgbCollapse.decorators = [
            { type: Directive, args: [{
                        selector: '[ngbCollapse]',
                        exportAs: 'ngbCollapse',
                        host: { '[class.collapse]': 'true', '[class.in]': '!collapsed', '[attr.aria-expanded]': '!collapsed' }
                    },] },
        ];
        NgbCollapse.ctorParameters = [];
        NgbCollapse.propDecorators = {
            'collapsed': [{ type: Input, args: ['ngbCollapse',] },],
        };
        return NgbCollapse;
    }());
    var NgbCollapseModule = (function () {
        function NgbCollapseModule() {
        }
        NgbCollapseModule.forRoot = function () { return { ngModule: NgbCollapseModule, providers: [] }; };
        NgbCollapseModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbCollapse], exports: [NgbCollapse] },] },
        ];
        NgbCollapseModule.ctorParameters = [];
        return NgbCollapseModule;
    }());
    var NgbDate = (function () {
        function NgbDate(year, month, day) {
            this.year = year;
            this.month = month;
            this.day = day;
        }
        NgbDate.from = function (date) {
            return date ? new NgbDate(date.year, date.month, date.day ? date.day : 1) : null;
        };
        NgbDate.prototype.equals = function (other) {
            return other && this.year === other.year && this.month === other.month && this.day === other.day;
        };
        NgbDate.prototype.before = function (other) {
            if (!other) {
                return false;
            }
            if (this.year === other.year) {
                if (this.month === other.month) {
                    return this.day === other.day ? false : this.day < other.day;
                }
                else {
                    return this.month < other.month;
                }
            }
            else {
                return this.year < other.year;
            }
        };
        NgbDate.prototype.after = function (other) {
            if (!other) {
                return false;
            }
            if (this.year === other.year) {
                if (this.month === other.month) {
                    return this.day === other.day ? false : this.day > other.day;
                }
                else {
                    return this.month > other.month;
                }
            }
            else {
                return this.year > other.year;
            }
        };
        NgbDate.prototype.toString = function () { return this.year + "-" + this.month + "-" + this.day; };
        return NgbDate;
    }());
    var __extends$21 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    function fromJSDate(jsDate) {
        return new NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());
    }
    function toJSDate(date) {
        var jsDate = new Date(date.year, date.month - 1, date.day);
        if (!isNaN(jsDate.getTime())) {
            jsDate.setFullYear(date.year);
        }
        return jsDate;
    }
    var NgbCalendar = (function () {
        function NgbCalendar() {
        }
        NgbCalendar.decorators = [
            { type: Injectable },
        ];
        NgbCalendar.ctorParameters = [];
        return NgbCalendar;
    }());
    var NgbCalendarGregorian = (function (_super) {
        __extends$21(NgbCalendarGregorian, _super);
        function NgbCalendarGregorian() {
            _super.apply(this, arguments);
        }
        NgbCalendarGregorian.prototype.getDaysPerWeek = function () { return 7; };
        NgbCalendarGregorian.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };
        NgbCalendarGregorian.prototype.getWeeksPerMonth = function () { return 6; };
        NgbCalendarGregorian.prototype.getNext = function (date, period, number) {
            if (period === void 0) {
                period = 'd';
            }
            if (number === void 0) {
                number = 1;
            }
            var jsDate = toJSDate(date);
            switch (period) {
                case 'y':
                    return new NgbDate(date.year + number, 1, 1);
                case 'm':
                    jsDate = new Date(date.year, date.month + number - 1, 1);
                    break;
                case 'd':
                    jsDate.setDate(jsDate.getDate() + number);
                    break;
                default:
                    return date;
            }
            return fromJSDate(jsDate);
        };
        NgbCalendarGregorian.prototype.getPrev = function (date, period, number) {
            if (period === void 0) {
                period = 'd';
            }
            if (number === void 0) {
                number = 1;
            }
            return this.getNext(date, period, -number);
        };
        NgbCalendarGregorian.prototype.getWeekday = function (date) {
            var jsDate = toJSDate(date);
            var day = jsDate.getDay();
            return day === 0 ? 7 : day;
        };
        NgbCalendarGregorian.prototype.getWeekNumber = function (week, firstDayOfWeek) {
            if (firstDayOfWeek === 7) {
                firstDayOfWeek = 0;
            }
            var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;
            var date = week[thursdayIndex];
            var jsDate = toJSDate(date);
            jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7));
            var time = jsDate.getTime();
            jsDate.setMonth(0);
            jsDate.setDate(1);
            return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;
        };
        NgbCalendarGregorian.prototype.getToday = function () { return fromJSDate(new Date()); };
        NgbCalendarGregorian.prototype.isValid = function (date) {
            return date && isNumber(date.year) && isNumber(date.month) && isNumber(date.day) &&
                !isNaN(toJSDate(date).getTime());
        };
        NgbCalendarGregorian.decorators = [
            { type: Injectable },
        ];
        NgbCalendarGregorian.ctorParameters = [];
        return NgbCalendarGregorian;
    }(NgbCalendar));
    var NgbDatepickerService = (function () {
        function NgbDatepickerService(_calendar) {
            this._calendar = _calendar;
        }
        NgbDatepickerService.prototype.generateMonthViewModel = function (date, minDate, maxDate, firstDayOfWeek, markDisabled) {
            var month = { firstDate: null, number: date.month, year: date.year, weeks: [], weekdays: [] };
            date = this._getFirstViewDate(date, firstDayOfWeek);
            for (var w = 0; w < this._calendar.getWeeksPerMonth(); w++) {
                var days = [];
                for (var d = 0; d < this._calendar.getDaysPerWeek(); d++) {
                    if (w === 0) {
                        month.weekdays.push(this._calendar.getWeekday(date));
                    }
                    var newDate = new NgbDate(date.year, date.month, date.day);
                    var disabled = (minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate));
                    if (!disabled && markDisabled) {
                        disabled = markDisabled(newDate, { month: month.number, year: month.year });
                    }
                    if (month.firstDate === null && date.month === month.number) {
                        month.firstDate = newDate;
                    }
                    days.push({ date: newDate, disabled: disabled });
                    date = this._calendar.getNext(date);
                }
                month.weeks.push({ number: this._calendar.getWeekNumber(days.map(function (day) { return NgbDate.from(day.date); }), firstDayOfWeek), days: days });
            }
            return month;
        };
        NgbDatepickerService.prototype.toValidDate = function (date, defaultValue) {
            var ngbDate = NgbDate.from(date);
            if (defaultValue === undefined) {
                defaultValue = this._calendar.getToday();
            }
            return this._calendar.isValid(ngbDate) ? ngbDate : defaultValue;
        };
        NgbDatepickerService.prototype._getFirstViewDate = function (date, firstDayOfWeek) {
            var _this = this;
            var currentMonth = date.month;
            var today = new NgbDate(date.year, date.month, date.day);
            var yesterday = this._calendar.getPrev(today);
            var firstDayOfCurrentMonthIsAlsoFirstDayOfWeek = function () { return today.month !== yesterday.month && firstDayOfWeek === _this._calendar.getWeekday(today); };
            var reachedTheFirstDayOfTheLastWeekOfPreviousMonth = function () { return today.month !== currentMonth && firstDayOfWeek === _this._calendar.getWeekday(today); };
            while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {
                today = new NgbDate(yesterday.year, yesterday.month, yesterday.day);
                yesterday = this._calendar.getPrev(yesterday);
            }
            return today;
        };
        NgbDatepickerService.decorators = [
            { type: Injectable },
        ];
        NgbDatepickerService.ctorParameters = [
            { type: NgbCalendar, },
        ];
        return NgbDatepickerService;
    }());
    var NavigationEvent;
    (function (NavigationEvent) {
        NavigationEvent[NavigationEvent["PREV"] = 0] = "PREV";
        NavigationEvent[NavigationEvent["NEXT"] = 1] = "NEXT";
    })(NavigationEvent || (NavigationEvent = {}));
    var NgbDatepickerConfig = (function () {
        function NgbDatepickerConfig() {
            this.displayMonths = 1;
            this.firstDayOfWeek = 1;
            this.navigation = 'select';
            this.outsideDays = 'visible';
            this.showWeekdays = true;
            this.showWeekNumbers = false;
        }
        NgbDatepickerConfig.decorators = [
            { type: Injectable },
        ];
        NgbDatepickerConfig.ctorParameters = [];
        return NgbDatepickerConfig;
    }());
    var __extends$22 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var WEEKDAYS = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
    var MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    var NgbDatepickerI18n = (function () {
        function NgbDatepickerI18n() {
        }
        NgbDatepickerI18n.decorators = [
            { type: Injectable },
        ];
        NgbDatepickerI18n.ctorParameters = [];
        return NgbDatepickerI18n;
    }());
    var NgbDatepickerI18nDefault = (function (_super) {
        __extends$22(NgbDatepickerI18nDefault, _super);
        function NgbDatepickerI18nDefault() {
            _super.apply(this, arguments);
        }
        NgbDatepickerI18nDefault.prototype.getWeekdayName = function (weekday) { return WEEKDAYS[weekday - 1]; };
        NgbDatepickerI18nDefault.prototype.getMonthName = function (month) { return MONTHS[month - 1]; };
        NgbDatepickerI18nDefault.decorators = [
            { type: Injectable },
        ];
        NgbDatepickerI18nDefault.ctorParameters = [];
        return NgbDatepickerI18nDefault;
    }(NgbDatepickerI18n));
    var NGB_DATEPICKER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NgbDatepicker; }),
        multi: true
    };
    var NgbDatepicker = (function () {
        function NgbDatepicker(_service, _calendar, i18n, config) {
            this._service = _service;
            this._calendar = _calendar;
            this.i18n = i18n;
            this.months = [];
            this.navigate = new EventEmitter();
            this.disabled = false;
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this.dayTemplate = config.dayTemplate;
            this.displayMonths = config.displayMonths;
            this.firstDayOfWeek = config.firstDayOfWeek;
            this.markDisabled = config.markDisabled;
            this.minDate = config.minDate;
            this.maxDate = config.maxDate;
            this.navigation = config.navigation;
            this.outsideDays = config.outsideDays;
            this.showWeekdays = config.showWeekdays;
            this.showWeekNumbers = config.showWeekNumbers;
            this.startDate = config.startDate;
        }
        NgbDatepicker.prototype.navigateTo = function (date) {
            this._setViewWithinLimits(this._service.toValidDate(date));
            this._updateData();
        };
        NgbDatepicker.prototype.ngOnInit = function () {
            this._setDates();
            this.navigateTo(this._date);
        };
        NgbDatepicker.prototype.ngOnChanges = function (changes) {
            this._setDates();
            this._setViewWithinLimits(this._date);
            if (changes['displayMonths']) {
                this.displayMonths = toInteger(this.displayMonths);
            }
            if (['startDate', 'minDate', 'maxDate', 'navigation', 'firstDayOfWeek', 'markDisabled', 'displayMonths'].some(function (input) { return !!changes[input]; })) {
                this._updateData(true);
            }
        };
        NgbDatepicker.prototype.onDateSelect = function (date) {
            this._setViewWithinLimits(date);
            this.onTouched();
            this.writeValue(date);
            this.onChange({ year: date.year, month: date.month, day: date.day });
            if (this._date.month !== this.months[0].number && this.displayMonths === 1) {
                this._updateData();
            }
        };
        NgbDatepicker.prototype.onNavigateDateSelect = function (date) {
            this._setViewWithinLimits(date);
            this._updateData();
        };
        NgbDatepicker.prototype.onNavigateEvent = function (event) {
            switch (event) {
                case NavigationEvent.PREV:
                    this._setViewWithinLimits(this._calendar.getPrev(this.months[0].firstDate, 'm'));
                    break;
                case NavigationEvent.NEXT:
                    this._setViewWithinLimits(this._calendar.getNext(this.months[0].firstDate, 'm'));
                    break;
            }
            this._updateData();
        };
        NgbDatepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        NgbDatepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        NgbDatepicker.prototype.writeValue = function (value) { this.model = this._service.toValidDate(value, null); };
        NgbDatepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
        NgbDatepicker.prototype._setDates = function () {
            this._maxDate = NgbDate.from(this.maxDate);
            this._minDate = NgbDate.from(this.minDate);
            this._date = this._service.toValidDate(this.startDate);
            if (!this._calendar.isValid(this._minDate)) {
                this._minDate = this._calendar.getPrev(this._date, 'y', 10);
                this.minDate = { year: this._minDate.year, month: this._minDate.month, day: this._minDate.day };
            }
            if (!this._calendar.isValid(this._maxDate)) {
                this._maxDate = this._calendar.getNext(this._date, 'y', 11);
                this._maxDate = this._calendar.getPrev(this._maxDate);
                this.maxDate = { year: this._maxDate.year, month: this._maxDate.month, day: this._maxDate.day };
            }
            if (this._minDate && this._maxDate && this._maxDate.before(this._minDate)) {
                throw new Error("'maxDate' " + this._maxDate + " should be greater than 'minDate' " + this._minDate);
            }
        };
        NgbDatepicker.prototype._setViewWithinLimits = function (date) {
            if (this._minDate && date.before(this._minDate)) {
                this._date = new NgbDate(this._minDate.year, this._minDate.month, 1);
            }
            else if (this._maxDate && date.after(this._maxDate)) {
                this._date = new NgbDate(this._maxDate.year, this._maxDate.month, 1);
            }
            else {
                this._date = new NgbDate(date.year, date.month, 1);
            }
        };
        NgbDatepicker.prototype._updateData = function (force) {
            if (force === void 0) {
                force = false;
            }
            var newMonths = [];
            var _loop_1 = function (i) {
                var newDate_1 = this_1._calendar.getNext(this_1._date, 'm', i);
                var index = this_1.months.findIndex(function (month) { return month.firstDate.equals(newDate_1); });
                if (force || index === -1) {
                    newMonths.push(this_1._service.generateMonthViewModel(newDate_1, this_1._minDate, this_1._maxDate, toInteger(this_1.firstDayOfWeek), this_1.markDisabled));
                }
                else {
                    newMonths.push(this_1.months[index]);
                }
            };
            var this_1 = this;
            for (var i = 0; i < this.displayMonths; i++) {
                _loop_1(i);
            }
            var newDate = newMonths[0].firstDate;
            var oldDate = this.months[0] ? this.months[0].firstDate : null;
            this.months = newMonths;
            if (!newDate.equals(oldDate)) {
                this.navigate.emit({
                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,
                    next: { year: newDate.year, month: newDate.month }
                });
            }
        };
        NgbDatepicker.decorators = [
            { type: Component, args: [{
                        exportAs: 'ngbDatepicker',
                        selector: 'ngb-datepicker',
                        host: { 'class': 'd-inline-block' },
                        styles: ["\n    .month:first-child {\n      padding-left: 0 !important;\n    }\n  "],
                        template: "\n    <template #dt let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\">\n       <div ngbDatepickerDayView [date]=\"date\" [currentMonth]=\"currentMonth\" [selected]=\"selected\" [disabled]=\"disabled\"></div>\n    </template>\n\n    <ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\"\n      [date]=\"months[0]?.firstDate\"\n      [minDate]=\"_minDate\"\n      [maxDate]=\"_maxDate\"\n      [disabled]=\"disabled\"\n      [showWeekNumbers]=\"showWeekNumbers\"\n      [showSelect]=\"navigation === 'select'\"\n      (navigate)=\"onNavigateEvent($event)\"\n      (select)=\"onNavigateDateSelect($event)\">\n    </ngb-datepicker-navigation>\n\n    <table>\n      <tr *ngIf=\"navigation !== 'select' || displayMonths > 1\">\n        <td *ngFor=\"let month of months\" class=\"text-xs-center font-weight-bold\">\n          {{ i18n.getMonthName(month.number) }} {{ month.year }}\n        </td>\n      </tr>\n      <tr>\n        <td *ngFor=\"let month of months\" class=\"pl-1 month\">\n          <ngb-datepicker-month-view\n            [month]=\"month\"\n            [selectedDate]=\"model\"\n            [dayTemplate]=\"dayTemplate || dt\"\n            [showWeekdays]=\"showWeekdays\"\n            [showWeekNumbers]=\"showWeekNumbers\"\n            [disabled]=\"disabled\"\n            [outsideDays]=\"displayMonths === 1 ? outsideDays : 'hidden'\"\n            (select)=\"onDateSelect($event)\">\n          </ngb-datepicker-month-view>\n        </td>\n      </tr>\n    </table>\n  ",
                        providers: [NGB_DATEPICKER_VALUE_ACCESSOR]
                    },] },
        ];
        NgbDatepicker.ctorParameters = [
            { type: NgbDatepickerService, },
            { type: NgbCalendar, },
            { type: NgbDatepickerI18n, },
            { type: NgbDatepickerConfig, },
        ];
        NgbDatepicker.propDecorators = {
            'dayTemplate': [{ type: Input },],
            'displayMonths': [{ type: Input },],
            'firstDayOfWeek': [{ type: Input },],
            'markDisabled': [{ type: Input },],
            'minDate': [{ type: Input },],
            'maxDate': [{ type: Input },],
            'navigation': [{ type: Input },],
            'outsideDays': [{ type: Input },],
            'showWeekdays': [{ type: Input },],
            'showWeekNumbers': [{ type: Input },],
            'startDate': [{ type: Input },],
            'navigate': [{ type: Output },],
        };
        return NgbDatepicker;
    }());
    var NgbDatepickerMonthView = (function () {
        function NgbDatepickerMonthView(i18n) {
            this.i18n = i18n;
            this.select = new EventEmitter();
        }
        NgbDatepickerMonthView.prototype.doSelect = function (day) {
            if (!this.isDisabled(day) && !this.isCollapsed(day) && !this.isHidden(day)) {
                this.select.emit(NgbDate.from(day.date));
            }
        };
        NgbDatepickerMonthView.prototype.isDisabled = function (day) { return this.disabled || day.disabled; };
        NgbDatepickerMonthView.prototype.isSelected = function (date) { return this.selectedDate && this.selectedDate.equals(date); };
        NgbDatepickerMonthView.prototype.isCollapsed = function (day) { return this.outsideDays === 'collapsed' && this.month.number !== day.date.month; };
        NgbDatepickerMonthView.prototype.isHidden = function (day) { return this.outsideDays === 'hidden' && this.month.number !== day.date.month; };
        NgbDatepickerMonthView.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-datepicker-month-view',
                        styles: ["\n    .weekday {\n    }\n    .weeknumber {\n    }\n    .day {\n      padding: 0;\n      height: 100%;\n      cursor: pointer;\n    }\n    .day.disabled, .day.hidden, .day.collapsed {\n      cursor: default;\n    }\n    :host/deep/.day.collapsed > * {\n      display: none;\n    }\n    :host/deep/.day.hidden > * {\n      visibility: hidden;\n    }\n  "],
                        template: "\n    <table>\n      <tr *ngIf=\"showWeekdays\">\n        <td *ngIf=\"showWeekNumbers\"></td>\n        <td *ngFor=\"let w of month.weekdays\" class=\"weekday text-xs-center font-weight-bold\">{{ i18n.getWeekdayName(w) }}</td>\n      </tr>\n      <tr *ngFor=\"let week of month.weeks\">\n        <td *ngIf=\"showWeekNumbers\" class=\"weeknumber small text-xs-center\">{{ week.number }}</td>\n        <td *ngFor=\"let day of week.days\" (click)=\"doSelect(day)\" class=\"day\" [class.disabled]=\"isDisabled(day)\"\n        [class.collapsed]=\"isCollapsed(day)\" [class.hidden]=\"isHidden(day)\">\n            <template [ngTemplateOutlet]=\"dayTemplate\"\n            [ngOutletContext]=\"{date: {year: day.date.year, month: day.date.month, day: day.date.day},\n              currentMonth: month.number,\n              disabled: isDisabled(day),\n              selected: isSelected(day.date)}\">\n            </template>\n        </td>\n      </tr>\n    </table>\n  "
                    },] },
        ];
        NgbDatepickerMonthView.ctorParameters = [
            { type: NgbDatepickerI18n, },
        ];
        NgbDatepickerMonthView.propDecorators = {
            'dayTemplate': [{ type: Input },],
            'disabled': [{ type: Input },],
            'month': [{ type: Input },],
            'outsideDays': [{ type: Input },],
            'selectedDate': [{ type: Input },],
            'showWeekdays': [{ type: Input },],
            'showWeekNumbers': [{ type: Input },],
            'select': [{ type: Output },],
        };
        return NgbDatepickerMonthView;
    }());
    var NgbDatepickerNavigation = (function () {
        function NgbDatepickerNavigation(i18n, _calendar) {
            this.i18n = i18n;
            this._calendar = _calendar;
            this.navigation = NavigationEvent;
            this.navigate = new EventEmitter();
            this.select = new EventEmitter();
        }
        NgbDatepickerNavigation.prototype.doNavigate = function (event) { this.navigate.emit(event); };
        NgbDatepickerNavigation.prototype.nextDisabled = function () {
            return this.disabled || (this.maxDate && this._calendar.getNext(this.date, 'm').after(this.maxDate));
        };
        NgbDatepickerNavigation.prototype.prevDisabled = function () {
            var prevDate = this._calendar.getPrev(this.date, 'm');
            return this.disabled || (this.minDate && prevDate.year <= this.minDate.year && prevDate.month < this.minDate.month);
        };
        NgbDatepickerNavigation.prototype.selectDate = function (date) { this.select.emit(date); };
        NgbDatepickerNavigation.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-datepicker-navigation',
                        styles: ["\n    .collapsed {\n        margin-bottom: -1.7rem;\n    }\n  "],
                        template: "\n    <table class=\"w-100\" [class.collapsed]=\"!showSelect\">\n      <tr>\n        <td class=\"text-sm-left\">\n          <button type=\"button\" (click)=\"doNavigate(navigation.PREV)\" class=\"btn btn-sm btn-secondary btn-inline\" \n            [disabled]=\"prevDisabled()\">&lt;</button>\n        </td>\n        \n        <td *ngIf=\"showSelect\">\n          <ngb-datepicker-navigation-select\n            [date]=\"date\"\n            [minDate]=\"minDate\"\n            [maxDate]=\"maxDate\"\n            [disabled] = \"disabled\"\n            (select)=\"selectDate($event)\">\n          </ngb-datepicker-navigation-select>\n        </td>        \n        \n        <td class=\"text-sm-right\">\n          <button type=\"button\" (click)=\"doNavigate(navigation.NEXT)\" class=\"next btn btn-sm btn-secondary btn-inline\" \n            [disabled]=\"nextDisabled()\">&gt;</button>\n        </td>\n      </tr>\n    </table>\n  "
                    },] },
        ];
        NgbDatepickerNavigation.ctorParameters = [
            { type: NgbDatepickerI18n, },
            { type: NgbCalendar, },
        ];
        NgbDatepickerNavigation.propDecorators = {
            'date': [{ type: Input },],
            'disabled': [{ type: Input },],
            'maxDate': [{ type: Input },],
            'minDate': [{ type: Input },],
            'showSelect': [{ type: Input },],
            'showWeekNumbers': [{ type: Input },],
            'navigate': [{ type: Output },],
            'select': [{ type: Output },],
        };
        return NgbDatepickerNavigation;
    }());
    var __extends$23 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var NgbDateParserFormatter = (function () {
        function NgbDateParserFormatter() {
        }
        return NgbDateParserFormatter;
    }());
    var NgbDateISOParserFormatter = (function (_super) {
        __extends$23(NgbDateISOParserFormatter, _super);
        function NgbDateISOParserFormatter() {
            _super.apply(this, arguments);
        }
        NgbDateISOParserFormatter.prototype.parse = function (value) {
            if (value) {
                var dateParts = value.trim().split('-');
                if (dateParts.length === 1 && isNumber(dateParts[0])) {
                    return { year: toInteger(dateParts[0]), month: null, day: null };
                }
                else if (dateParts.length === 2 && isNumber(dateParts[0]) && isNumber(dateParts[1])) {
                    return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: null };
                }
                else if (dateParts.length === 3 && isNumber(dateParts[0]) && isNumber(dateParts[1]) && isNumber(dateParts[2])) {
                    return { year: toInteger(dateParts[0]), month: toInteger(dateParts[1]), day: toInteger(dateParts[2]) };
                }
            }
            return null;
        };
        NgbDateISOParserFormatter.prototype.format = function (date) {
            return date ?
                date.year + "-" + (isNumber(date.month) ? padNumber(date.month) : '') + "-" + (isNumber(date.day) ? padNumber(date.day) : '') :
                '';
        };
        return NgbDateISOParserFormatter;
    }(NgbDateParserFormatter));
    var Positioning = (function () {
        function Positioning() {
        }
        Positioning.prototype.getStyle = function (element, prop) { return window.getComputedStyle(element)[prop]; };
        Positioning.prototype.isStaticPositioned = function (element) {
            return (this.getStyle(element, 'position') || 'static') === 'static';
        };
        Positioning.prototype.offsetParent = function (element) {
            var offsetParentEl = element.offsetParent || document.documentElement;
            while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {
                offsetParentEl = offsetParentEl.offsetParent;
            }
            return offsetParentEl || document.documentElement;
        };
        Positioning.prototype.position = function (element, round) {
            if (round === void 0) {
                round = true;
            }
            var elPosition;
            var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
            if (this.getStyle(element, 'position') === 'fixed') {
                elPosition = element.getBoundingClientRect();
            }
            else {
                var offsetParentEl = this.offsetParent(element);
                elPosition = this.offset(element, false);
                if (offsetParentEl !== document.documentElement) {
                    parentOffset = this.offset(offsetParentEl, false);
                }
                parentOffset.top += offsetParentEl.clientTop;
                parentOffset.left += offsetParentEl.clientLeft;
            }
            elPosition.top -= parentOffset.top;
            elPosition.bottom -= parentOffset.top;
            elPosition.left -= parentOffset.left;
            elPosition.right -= parentOffset.left;
            if (round) {
                elPosition.top = Math.round(elPosition.top);
                elPosition.bottom = Math.round(elPosition.bottom);
                elPosition.left = Math.round(elPosition.left);
                elPosition.right = Math.round(elPosition.right);
            }
            return elPosition;
        };
        Positioning.prototype.offset = function (element, round) {
            if (round === void 0) {
                round = true;
            }
            var elBcr = element.getBoundingClientRect();
            var viewportOffset = {
                top: window.pageYOffset - document.documentElement.clientTop,
                left: window.pageXOffset - document.documentElement.clientLeft
            };
            var elOffset = {
                height: elBcr.height || element.offsetHeight,
                width: elBcr.width || element.offsetWidth,
                top: elBcr.top + viewportOffset.top,
                bottom: elBcr.bottom + viewportOffset.top,
                left: elBcr.left + viewportOffset.left,
                right: elBcr.right + viewportOffset.left
            };
            if (round) {
                elOffset.height = Math.round(elOffset.height);
                elOffset.width = Math.round(elOffset.width);
                elOffset.top = Math.round(elOffset.top);
                elOffset.bottom = Math.round(elOffset.bottom);
                elOffset.left = Math.round(elOffset.left);
                elOffset.right = Math.round(elOffset.right);
            }
            return elOffset;
        };
        Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {
            var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);
            var shiftWidth = {
                left: hostElPosition.left,
                center: hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2,
                right: hostElPosition.left + hostElPosition.width
            };
            var shiftHeight = {
                top: hostElPosition.top,
                center: hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2,
                bottom: hostElPosition.top + hostElPosition.height
            };
            var targetElBCR = targetElement.getBoundingClientRect();
            var placementPrimary = placement.split('-')[0] || 'top';
            var placementSecondary = placement.split('-')[1] || 'center';
            var targetElPosition = {
                height: targetElBCR.height || targetElement.offsetHeight,
                width: targetElBCR.width || targetElement.offsetWidth,
                top: 0,
                bottom: targetElBCR.height || targetElement.offsetHeight,
                left: 0,
                right: targetElBCR.width || targetElement.offsetWidth
            };
            switch (placementPrimary) {
                case 'top':
                    targetElPosition.top = hostElPosition.top - targetElement.offsetHeight;
                    targetElPosition.bottom += hostElPosition.top - targetElement.offsetHeight;
                    targetElPosition.left = shiftWidth[placementSecondary];
                    targetElPosition.right += shiftWidth[placementSecondary];
                    break;
                case 'bottom':
                    targetElPosition.top = shiftHeight[placementPrimary];
                    targetElPosition.bottom += shiftHeight[placementPrimary];
                    targetElPosition.left = shiftWidth[placementSecondary];
                    targetElPosition.right += shiftWidth[placementSecondary];
                    break;
                case 'left':
                    targetElPosition.top = shiftHeight[placementSecondary];
                    targetElPosition.bottom += shiftHeight[placementSecondary];
                    targetElPosition.left = hostElPosition.left - targetElement.offsetWidth;
                    targetElPosition.right += hostElPosition.left - targetElement.offsetWidth;
                    break;
                case 'right':
                    targetElPosition.top = shiftHeight[placementSecondary];
                    targetElPosition.bottom += shiftHeight[placementSecondary];
                    targetElPosition.left = shiftWidth[placementPrimary];
                    targetElPosition.right += shiftWidth[placementPrimary];
                    break;
            }
            targetElPosition.top = Math.round(targetElPosition.top);
            targetElPosition.bottom = Math.round(targetElPosition.bottom);
            targetElPosition.left = Math.round(targetElPosition.left);
            targetElPosition.right = Math.round(targetElPosition.right);
            return targetElPosition;
        };
        return Positioning;
    }());
    var positionService = new Positioning();
    function positionElements(hostElement, targetElement, placement, appendToBody) {
        var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);
        targetElement.style.top = pos.top + "px";
        targetElement.style.left = pos.left + "px";
    }
    var NGB_DATEPICKER_VALUE_ACCESSOR$1 = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NgbInputDatepicker; }),
        multi: true
    };
    var NgbInputDatepicker = (function () {
        function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, ngZone, _service) {
            var _this = this;
            this._parserFormatter = _parserFormatter;
            this._elRef = _elRef;
            this._vcRef = _vcRef;
            this._renderer = _renderer;
            this._cfr = _cfr;
            this._service = _service;
            this._cRef = null;
            this.navigate = new EventEmitter();
            this._onChange = function (_) { };
            this._onTouched = function () { };
            this._zoneSubscription = ngZone.onStable.subscribe(function () {
                if (_this._cRef) {
                    positionElements(_this._elRef.nativeElement, _this._cRef.location.nativeElement, 'bottom-left');
                }
            });
        }
        NgbInputDatepicker.prototype.registerOnChange = function (fn) { this._onChange = fn; };
        NgbInputDatepicker.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };
        NgbInputDatepicker.prototype.writeValue = function (value) {
            this._model =
                value ? this._service.toValidDate({ year: value.year, month: value.month, day: value.day }, null) : null;
            this._writeModelValue(this._model);
        };
        NgbInputDatepicker.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elRef.nativeElement, 'disabled', isDisabled);
            if (this.isOpen()) {
                this._cRef.instance.setDisabledState(isDisabled);
            }
        };
        NgbInputDatepicker.prototype.manualDateChange = function (value) {
            this._model = this._service.toValidDate(this._parserFormatter.parse(value), null);
            this._onChange(this._model ? { year: this._model.year, month: this._model.month, day: this._model.day } : null);
            this._writeModelValue(this._model);
        };
        NgbInputDatepicker.prototype.isOpen = function () { return !!this._cRef; };
        NgbInputDatepicker.prototype.open = function () {
            var _this = this;
            if (!this.isOpen()) {
                var cf = this._cfr.resolveComponentFactory(NgbDatepicker);
                this._cRef = this._vcRef.createComponent(cf);
                this._applyPopupStyling(this._cRef.location.nativeElement);
                this._cRef.instance.writeValue(this._model);
                this._applyDatepickerInputs(this._cRef.instance);
                this._subscribeForDatepickerOutputs(this._cRef.instance);
                this._cRef.instance.ngOnInit();
                this._cRef.instance.registerOnChange(function (selectedDate) {
                    _this.writeValue(selectedDate);
                    _this._onChange(selectedDate);
                    _this.close();
                });
            }
        };
        NgbInputDatepicker.prototype.close = function () {
            if (this.isOpen()) {
                this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));
                this._cRef = null;
            }
        };
        NgbInputDatepicker.prototype.toggle = function () {
            if (this.isOpen()) {
                this.close();
            }
            else {
                this.open();
            }
        };
        NgbInputDatepicker.prototype.navigateTo = function (date) {
            if (this.isOpen()) {
                this._cRef.instance.navigateTo(date);
            }
        };
        NgbInputDatepicker.prototype.onBlur = function () { this._onTouched(); };
        NgbInputDatepicker.prototype._applyDatepickerInputs = function (datepickerInstance) {
            var _this = this;
            ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',
                'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']
                .forEach(function (optionName) {
                if (_this[optionName] !== undefined) {
                    datepickerInstance[optionName] = _this[optionName];
                }
            });
            datepickerInstance.startDate = this.startDate || this._model;
        };
        NgbInputDatepicker.prototype._applyPopupStyling = function (nativeElement) {
            this._renderer.setElementClass(nativeElement, 'dropdown-menu', true);
            this._renderer.setElementStyle(nativeElement, 'display', 'block');
            this._renderer.setElementStyle(nativeElement, 'padding', '0.40rem');
        };
        NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = function (datepickerInstance) {
            var _this = this;
            datepickerInstance.navigate.subscribe(function (date) { return _this.navigate.emit(date); });
        };
        NgbInputDatepicker.prototype._writeModelValue = function (model) {
            this._renderer.setElementProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));
            if (this.isOpen()) {
                this._cRef.instance.writeValue(model);
                this._onTouched();
            }
        };
        NgbInputDatepicker.decorators = [
            { type: Directive, args: [{
                        selector: 'input[ngbDatepicker]',
                        exportAs: 'ngbDatepicker',
                        host: { '(change)': 'manualDateChange($event.target.value)', '(keyup.esc)': 'close()', '(blur)': 'onBlur()' },
                        providers: [NGB_DATEPICKER_VALUE_ACCESSOR$1]
                    },] },
        ];
        NgbInputDatepicker.ctorParameters = [
            { type: NgbDateParserFormatter, },
            { type: ElementRef, },
            { type: ViewContainerRef, },
            { type: Renderer, },
            { type: ComponentFactoryResolver, },
            { type: NgZone, },
            { type: NgbDatepickerService, },
        ];
        NgbInputDatepicker.propDecorators = {
            'dayTemplate': [{ type: Input },],
            'displayMonths': [{ type: Input },],
            'firstDayOfWeek': [{ type: Input },],
            'markDisabled': [{ type: Input },],
            'minDate': [{ type: Input },],
            'maxDate': [{ type: Input },],
            'navigation': [{ type: Input },],
            'outsideDays': [{ type: Input },],
            'showWeekdays': [{ type: Input },],
            'showWeekNumbers': [{ type: Input },],
            'startDate': [{ type: Input },],
            'navigate': [{ type: Output },],
        };
        return NgbInputDatepicker;
    }());
    var NgbDatepickerDayView = (function () {
        function NgbDatepickerDayView() {
        }
        NgbDatepickerDayView.prototype.isMuted = function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };
        NgbDatepickerDayView.decorators = [
            { type: Component, args: [{
                        selector: '[ngbDatepickerDayView]',
                        styles: ["\n    :host {      \n      text-align: center;\n      padding: 0.185rem 0.25rem;      \n      border-radius: 0.25rem;\n    }\n  "],
                        host: {
                            '[class.bg-primary]': 'selected',
                            '[class.text-white]': 'selected',
                            '[class.text-muted]': 'isMuted()',
                            '[class.btn-secondary]': '!disabled'
                        },
                        template: "{{ date.day }}"
                    },] },
        ];
        NgbDatepickerDayView.ctorParameters = [];
        NgbDatepickerDayView.propDecorators = {
            'currentMonth': [{ type: Input },],
            'date': [{ type: Input },],
            'disabled': [{ type: Input },],
            'selected': [{ type: Input },],
        };
        return NgbDatepickerDayView;
    }());
    var NgbDatepickerNavigationSelect = (function () {
        function NgbDatepickerNavigationSelect(i18n, calendar) {
            this.i18n = i18n;
            this.calendar = calendar;
            this.years = [];
            this.select = new EventEmitter();
            this.months = calendar.getMonths();
        }
        NgbDatepickerNavigationSelect.prototype.ngOnChanges = function (changes) {
            if (changes['maxDate'] || changes['minDate']) {
                this._generateYears();
                this._generateMonths();
            }
            if (changes['date'] && changes['date'].currentValue.year !== changes['date'].previousValue.year) {
                this._generateMonths();
            }
        };
        NgbDatepickerNavigationSelect.prototype.changeMonth = function (month) { this.select.emit(new NgbDate(this.date.year, toInteger(month), 1)); };
        NgbDatepickerNavigationSelect.prototype.changeYear = function (year) { this.select.emit(new NgbDate(toInteger(year), this.date.month, 1)); };
        NgbDatepickerNavigationSelect.prototype._generateMonths = function () {
            var _this = this;
            this.months = this.calendar.getMonths();
            if (this.date.year === this.minDate.year) {
                var index = this.months.findIndex(function (month) { return month === _this.minDate.month; });
                this.months = this.months.slice(index);
            }
            if (this.date.year === this.maxDate.year) {
                var index = this.months.findIndex(function (month) { return month === _this.maxDate.month; });
                this.months = this.months.slice(0, index + 1);
            }
        };
        NgbDatepickerNavigationSelect.prototype._generateYears = function () {
            var _this = this;
            this.years = Array.from({ length: this.maxDate.year - this.minDate.year + 1 }, function (e, i) { return _this.minDate.year + i; });
        };
        NgbDatepickerNavigationSelect.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-datepicker-navigation-select',
                        styles: ["\n    select {\n      /* to align with btn-sm */\n      padding: 0.25rem 0.5rem;\n      font-size: 0.875rem;      \n      line-height: 1.25;\n      /* to cancel the custom height set by custom-select */\n      height: inherit;\n      width: 50%;\n    }\n  "],
                        template: "\n    <select [disabled]=\"disabled\" class=\"custom-select d-inline-block\" [value]=\"date.month\" (change)=\"changeMonth($event.target.value)\">\n      <option *ngFor=\"let m of months\" [value]=\"m\">{{ i18n.getMonthName(m) }}</option>\n    </select>" +
                            "<select [disabled]=\"disabled\" class=\"custom-select d-inline-block\" [value]=\"date.year\" (change)=\"changeYear($event.target.value)\">\n      <option *ngFor=\"let y of years\" [value]=\"y\">{{ y }}</option>\n    </select> \n  "
                    },] },
        ];
        NgbDatepickerNavigationSelect.ctorParameters = [
            { type: NgbDatepickerI18n, },
            { type: NgbCalendar, },
        ];
        NgbDatepickerNavigationSelect.propDecorators = {
            'date': [{ type: Input },],
            'disabled': [{ type: Input },],
            'maxDate': [{ type: Input },],
            'minDate': [{ type: Input },],
            'select': [{ type: Output },],
        };
        return NgbDatepickerNavigationSelect;
    }());
    var NgbDatepickerModule = (function () {
        function NgbDatepickerModule() {
        }
        NgbDatepickerModule.forRoot = function () {
            return {
                ngModule: NgbDatepickerModule,
                providers: [
                    { provide: NgbCalendar, useClass: NgbCalendarGregorian },
                    { provide: NgbDatepickerI18n, useClass: NgbDatepickerI18nDefault },
                    { provide: NgbDateParserFormatter, useClass: NgbDateISOParserFormatter }, NgbDatepickerService,
                    NgbDatepickerConfig
                ]
            };
        };
        NgbDatepickerModule.decorators = [
            { type: NgModule, args: [{
                        declarations: [
                            NgbDatepicker, NgbDatepickerMonthView, NgbDatepickerNavigation, NgbDatepickerNavigationSelect, NgbDatepickerDayView,
                            NgbInputDatepicker
                        ],
                        exports: [NgbDatepicker, NgbInputDatepicker],
                        imports: [CommonModule, FormsModule],
                        entryComponents: [NgbDatepicker]
                    },] },
        ];
        NgbDatepickerModule.ctorParameters = [];
        return NgbDatepickerModule;
    }());
    var NgbDropdownConfig = (function () {
        function NgbDropdownConfig() {
            this.up = false;
            this.autoClose = true;
        }
        NgbDropdownConfig.decorators = [
            { type: Injectable },
        ];
        NgbDropdownConfig.ctorParameters = [];
        return NgbDropdownConfig;
    }());
    var NgbDropdown = (function () {
        function NgbDropdown(config) {
            this._open = false;
            this.openChange = new EventEmitter();
            this.up = config.up;
            this.autoClose = config.autoClose;
        }
        NgbDropdown.prototype.isOpen = function () { return this._open; };
        NgbDropdown.prototype.open = function () {
            if (!this._open) {
                this._open = true;
                this.openChange.emit(true);
            }
        };
        NgbDropdown.prototype.close = function () {
            if (this._open) {
                this._open = false;
                this.openChange.emit(false);
            }
        };
        NgbDropdown.prototype.toggle = function () {
            if (this.isOpen()) {
                this.close();
            }
            else {
                this.open();
            }
        };
        NgbDropdown.prototype.closeFromOutsideClick = function ($event) {
            if (this.autoClose && !this._isEventFromToggle($event)) {
                this.close();
            }
        };
        NgbDropdown.prototype.closeFromOutsideEsc = function () {
            if (this.autoClose) {
                this.close();
            }
        };
        Object.defineProperty(NgbDropdown.prototype, "toggleElement", {
            set: function (toggleElement) { this._toggleElement = toggleElement; },
            enumerable: true,
            configurable: true
        });
        NgbDropdown.prototype._isEventFromToggle = function ($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); };
        NgbDropdown.decorators = [
            { type: Directive, args: [{
                        selector: '[ngbDropdown]',
                        exportAs: 'ngbDropdown',
                        host: {
                            '[class.dropdown]': '!up',
                            '[class.dropup]': 'up',
                            '[class.open]': 'isOpen()',
                            '(keyup.esc)': 'closeFromOutsideEsc()',
                            '(document:click)': 'closeFromOutsideClick($event)'
                        }
                    },] },
        ];
        NgbDropdown.ctorParameters = [
            { type: NgbDropdownConfig, },
        ];
        NgbDropdown.propDecorators = {
            'up': [{ type: Input },],
            'autoClose': [{ type: Input },],
            '_open': [{ type: Input, args: ['open',] },],
            'openChange': [{ type: Output },],
        };
        return NgbDropdown;
    }());
    var NgbDropdownToggle = (function () {
        function NgbDropdownToggle(dropdown, elementRef) {
            this.dropdown = dropdown;
            dropdown.toggleElement = elementRef.nativeElement;
        }
        NgbDropdownToggle.prototype.toggleOpen = function () { this.dropdown.toggle(); };
        NgbDropdownToggle.decorators = [
            { type: Directive, args: [{
                        selector: '[ngbDropdownToggle]',
                        host: {
                            'class': 'dropdown-toggle',
                            'aria-haspopup': 'true',
                            '[attr.aria-expanded]': 'dropdown.isOpen()',
                            '(click)': 'toggleOpen()'
                        }
                    },] },
        ];
        NgbDropdownToggle.ctorParameters = [
            { type: NgbDropdown, },
            { type: ElementRef, },
        ];
        return NgbDropdownToggle;
    }());
    var NGB_DROPDOWN_DIRECTIVES = [NgbDropdownToggle, NgbDropdown];
    var NgbDropdownModule = (function () {
        function NgbDropdownModule() {
        }
        NgbDropdownModule.forRoot = function () { return { ngModule: NgbDropdownModule, providers: [NgbDropdownConfig] }; };
        NgbDropdownModule.decorators = [
            { type: NgModule, args: [{ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES },] },
        ];
        NgbDropdownModule.ctorParameters = [];
        return NgbDropdownModule;
    }());
    var ContentRef = (function () {
        function ContentRef(nodes, viewRef, componentRef) {
            this.nodes = nodes;
            this.viewRef = viewRef;
            this.componentRef = componentRef;
        }
        return ContentRef;
    }());
    var PopupService = (function () {
        function PopupService(type, _injector, _viewContainerRef, _renderer, componentFactoryResolver) {
            this._injector = _injector;
            this._viewContainerRef = _viewContainerRef;
            this._renderer = _renderer;
            this._windowFactory = componentFactoryResolver.resolveComponentFactory(type);
        }
        PopupService.prototype.open = function (content) {
            if (!this._windowRef) {
                this._contentRef = this._getContentRef(content);
                this._windowRef =
                    this._viewContainerRef.createComponent(this._windowFactory, 0, this._injector, this._contentRef.nodes);
            }
            return this._windowRef;
        };
        PopupService.prototype.close = function () {
            if (this._windowRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));
                this._windowRef = null;
                if (this._contentRef.viewRef) {
                    this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
                    this._contentRef = null;
                }
            }
        };
        PopupService.prototype._getContentRef = function (content) {
            if (!content) {
                return new ContentRef([]);
            }
            else if (content instanceof TemplateRef) {
                var viewRef = this._viewContainerRef.createEmbeddedView(content);
                return new ContentRef([viewRef.rootNodes], viewRef);
            }
            else {
                return new ContentRef([[this._renderer.createText(null, "" + content)]]);
            }
        };
        return PopupService;
    }());
    var NgbModalBackdrop = (function () {
        function NgbModalBackdrop() {
        }
        NgbModalBackdrop.decorators = [
            { type: Component, args: [{ selector: 'ngb-modal-backdrop', template: '', host: { 'class': 'modal-backdrop fade in' } },] },
        ];
        NgbModalBackdrop.ctorParameters = [];
        return NgbModalBackdrop;
    }());
    var ModalDismissReasons;
    (function (ModalDismissReasons) {
        ModalDismissReasons[ModalDismissReasons["BACKDROP_CLICK"] = 0] = "BACKDROP_CLICK";
        ModalDismissReasons[ModalDismissReasons["ESC"] = 1] = "ESC";
    })(ModalDismissReasons || (ModalDismissReasons = {}));
    var NgbModalWindow = (function () {
        function NgbModalWindow(_elRef, _renderer) {
            this._elRef = _elRef;
            this._renderer = _renderer;
            this.backdrop = true;
            this.keyboard = true;
            this.dismissEvent = new EventEmitter();
        }
        NgbModalWindow.prototype.backdropClick = function ($event) {
            if (this.backdrop === true && this._elRef.nativeElement === $event.target) {
                this.dismiss(ModalDismissReasons.BACKDROP_CLICK);
            }
        };
        NgbModalWindow.prototype.escKey = function ($event) {
            if (this.keyboard && !$event.defaultPrevented) {
                this.dismiss(ModalDismissReasons.ESC);
            }
        };
        NgbModalWindow.prototype.dismiss = function (reason) { this.dismissEvent.emit(reason); };
        NgbModalWindow.prototype.ngOnInit = function () {
            this._elWithFocus = document.activeElement;
            this._renderer.setElementClass(document.body, 'modal-open', true);
        };
        NgbModalWindow.prototype.ngAfterViewInit = function () {
            if (!this._elRef.nativeElement.contains(document.activeElement)) {
                this._renderer.invokeElementMethod(this._elRef.nativeElement, 'focus', []);
            }
        };
        NgbModalWindow.prototype.ngOnDestroy = function () {
            if (this._elWithFocus && document.body.contains(this._elWithFocus)) {
                this._renderer.invokeElementMethod(this._elWithFocus, 'focus', []);
            }
            else {
                this._renderer.invokeElementMethod(document.body, 'focus', []);
            }
            this._elWithFocus = null;
            this._renderer.setElementClass(document.body, 'modal-open', false);
        };
        NgbModalWindow.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-modal-window',
                        host: {
                            '[class]': '"modal fade in" + (windowClass ? " " + windowClass : "")',
                            'role': 'dialog',
                            'tabindex': '-1',
                            'style': 'display: block;',
                            '(keyup.esc)': 'escKey($event)',
                            '(click)': 'backdropClick($event)'
                        },
                        template: "\n    <div [class]=\"'modal-dialog' + (size ? ' modal-' + size : '')\" role=\"document\">\n        <div class=\"modal-content\"><ng-content></ng-content></div>\n    </div>\n    "
                    },] },
        ];
        NgbModalWindow.ctorParameters = [
            { type: ElementRef, },
            { type: Renderer, },
        ];
        NgbModalWindow.propDecorators = {
            'backdrop': [{ type: Input },],
            'keyboard': [{ type: Input },],
            'size': [{ type: Input },],
            'windowClass': [{ type: Input },],
            'dismissEvent': [{ type: Output, args: ['dismiss',] },],
        };
        return NgbModalWindow;
    }());
    var NgbModalStack = (function () {
        function NgbModalStack() {
        }
        NgbModalStack.prototype.open = function (moduleCFR, contentInjector, content, options) {
            if (options === void 0) {
                options = {};
            }
            if (!this.modalContainer) {
                throw new Error('Missing modal container, add <template ngbModalContainer></template> to one of your application templates.');
            }
            return this.modalContainer.open(moduleCFR, contentInjector, content, options);
        };
        NgbModalStack.prototype.registerContainer = function (modalContainer) { this.modalContainer = modalContainer; };
        NgbModalStack.decorators = [
            { type: Injectable },
        ];
        NgbModalStack.ctorParameters = [];
        return NgbModalStack;
    }());
    var NgbActiveModal = (function () {
        function NgbActiveModal() {
        }
        NgbActiveModal.prototype.close = function (result) { };
        NgbActiveModal.prototype.dismiss = function (reason) { };
        NgbActiveModal.decorators = [
            { type: Injectable },
        ];
        NgbActiveModal.ctorParameters = [];
        return NgbActiveModal;
    }());
    var NgbModalRef = (function () {
        function NgbModalRef(_viewContainerRef, _windowCmptRef, _contentRef, _backdropCmptRef) {
            var _this = this;
            this._viewContainerRef = _viewContainerRef;
            this._windowCmptRef = _windowCmptRef;
            this._contentRef = _contentRef;
            this._backdropCmptRef = _backdropCmptRef;
            _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });
            this.result = new Promise(function (resolve, reject) {
                _this._resolve = resolve;
                _this._reject = reject;
            });
            this.result.then(null, function () { });
        }
        Object.defineProperty(NgbModalRef.prototype, "componentInstance", {
            get: function () {
                if (this._contentRef.componentRef) {
                    return this._contentRef.componentRef.instance;
                }
            },
            set: function (instance) { },
            enumerable: true,
            configurable: true
        });
        NgbModalRef.prototype.close = function (result) {
            if (this._windowCmptRef) {
                this._resolve(result);
                this._removeModalElements();
            }
        };
        NgbModalRef.prototype.dismiss = function (reason) {
            if (this._windowCmptRef) {
                this._reject(reason);
                this._removeModalElements();
            }
        };
        NgbModalRef.prototype._removeModalElements = function () {
            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowCmptRef.hostView));
            if (this._backdropCmptRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._backdropCmptRef.hostView));
            }
            if (this._contentRef && this._contentRef.viewRef) {
                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
            }
            this._windowCmptRef = null;
            this._backdropCmptRef = null;
            this._contentRef = null;
        };
        NgbModalRef.decorators = [
            { type: Injectable },
        ];
        NgbModalRef.ctorParameters = [
            { type: ViewContainerRef, },
            { type: ComponentRef, },
            { type: ContentRef, },
            { type: ComponentRef, },
        ];
        return NgbModalRef;
    }());
    var NgbModalContainer = (function () {
        function NgbModalContainer(_injector, _renderer, _viewContainerRef, _componentFactoryResolver, ngbModalStack) {
            this._injector = _injector;
            this._renderer = _renderer;
            this._viewContainerRef = _viewContainerRef;
            this._componentFactoryResolver = _componentFactoryResolver;
            this._backdropFactory = _componentFactoryResolver.resolveComponentFactory(NgbModalBackdrop);
            this._windowFactory = _componentFactoryResolver.resolveComponentFactory(NgbModalWindow);
            ngbModalStack.registerContainer(this);
        }
        NgbModalContainer.prototype.open = function (moduleCFR, contentInjector, content, options) {
            var activeModal = new NgbActiveModal();
            var contentRef = this._getContentRef(moduleCFR, contentInjector, content, activeModal);
            var windowCmptRef;
            var backdropCmptRef;
            var ngbModalRef;
            if (options.backdrop !== false) {
                backdropCmptRef = this._viewContainerRef.createComponent(this._backdropFactory, 0, this._injector);
            }
            windowCmptRef = this._viewContainerRef.createComponent(this._windowFactory, this._viewContainerRef.length - 1, this._injector, contentRef.nodes);
            ngbModalRef = new NgbModalRef(this._viewContainerRef, windowCmptRef, contentRef, backdropCmptRef);
            activeModal.close = function (result) { ngbModalRef.close(result); };
            activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };
            this._applyWindowOptions(windowCmptRef.instance, options);
            return ngbModalRef;
        };
        NgbModalContainer.prototype._applyWindowOptions = function (windowInstance, options) {
            ['backdrop', 'keyboard', 'size', 'windowClass'].forEach(function (optionName) {
                if (isDefined(options[optionName])) {
                    windowInstance[optionName] = options[optionName];
                }
            });
        };
        NgbModalContainer.prototype._getContentRef = function (moduleCFR, contentInjector, content, context) {
            if (!content) {
                return new ContentRef([]);
            }
            else if (content instanceof TemplateRef) {
                var viewRef = this._viewContainerRef.createEmbeddedView(content, context);
                return new ContentRef([viewRef.rootNodes], viewRef);
            }
            else if (isString(content)) {
                return new ContentRef([[this._renderer.createText(null, "" + content)]]);
            }
            else {
                var contentCmptFactory = moduleCFR.resolveComponentFactory(content);
                var modalContentInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgbActiveModal, useValue: context }], contentInjector);
                var componentRef = this._viewContainerRef.createComponent(contentCmptFactory, 0, modalContentInjector);
                return new ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);
            }
        };
        NgbModalContainer.decorators = [
            { type: Directive, args: [{ selector: 'template[ngbModalContainer]' },] },
        ];
        NgbModalContainer.ctorParameters = [
            { type: Injector, },
            { type: Renderer, },
            { type: ViewContainerRef, },
            { type: ComponentFactoryResolver, },
            { type: NgbModalStack, },
        ];
        return NgbModalContainer;
    }());
    var NgbModal = (function () {
        function NgbModal(_moduleCFR, _injector, _modalStack) {
            this._moduleCFR = _moduleCFR;
            this._injector = _injector;
            this._modalStack = _modalStack;
        }
        NgbModal.prototype.open = function (content, options) {
            if (options === void 0) {
                options = {};
            }
            return this._modalStack.open(this._moduleCFR, this._injector, content, options);
        };
        NgbModal.decorators = [
            { type: Injectable },
        ];
        NgbModal.ctorParameters = [
            { type: ComponentFactoryResolver, },
            { type: Injector, },
            { type: NgbModalStack, },
        ];
        return NgbModal;
    }());
    var NgbModalModule = (function () {
        function NgbModalModule() {
        }
        NgbModalModule.forRoot = function () { return { ngModule: NgbModalModule, providers: [NgbModal, NgbModalStack] }; };
        NgbModalModule.decorators = [
            { type: NgModule, args: [{
                        declarations: [NgbModalContainer, NgbModalBackdrop, NgbModalWindow],
                        entryComponents: [NgbModalBackdrop, NgbModalWindow],
                        providers: [NgbModal],
                        exports: [NgbModalContainer]
                    },] },
        ];
        NgbModalModule.ctorParameters = [];
        return NgbModalModule;
    }());
    var NgbPaginationConfig = (function () {
        function NgbPaginationConfig() {
            this.boundaryLinks = false;
            this.directionLinks = true;
            this.ellipses = true;
            this.maxSize = 0;
            this.pageSize = 10;
            this.rotate = false;
        }
        NgbPaginationConfig.decorators = [
            { type: Injectable },
        ];
        NgbPaginationConfig.ctorParameters = [];
        return NgbPaginationConfig;
    }());
    var NgbPagination = (function () {
        function NgbPagination(config) {
            this.pageCount = 0;
            this.pages = [];
            this.page = 0;
            this.pageChange = new EventEmitter(true);
            this.boundaryLinks = config.boundaryLinks;
            this.directionLinks = config.directionLinks;
            this.ellipses = config.ellipses;
            this.maxSize = config.maxSize;
            this.pageSize = config.pageSize;
            this.rotate = config.rotate;
            this.size = config.size;
        }
        NgbPagination.prototype.hasPrevious = function () { return this.page > 1; };
        NgbPagination.prototype.hasNext = function () { return this.page < this.pageCount; };
        NgbPagination.prototype.selectPage = function (pageNumber) { this._updatePages(pageNumber); };
        NgbPagination.prototype.ngOnChanges = function (changes) { this._updatePages(this.page); };
        NgbPagination.prototype.isEllipsis = function (pageNumber) { return pageNumber === -1; };
        NgbPagination.prototype._applyEllipses = function (start, end) {
            if (this.ellipses) {
                if (start > 0) {
                    this.pages.unshift(-1);
                    this.pages.unshift(1);
                }
                if (end < this.pageCount) {
                    this.pages.push(-1);
                    this.pages.push(this.pageCount);
                }
            }
        };
        NgbPagination.prototype._applyRotation = function () {
            var start = 0;
            var end = this.pageCount;
            var leftOffset = Math.floor(this.maxSize / 2);
            var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;
            if (this.page <= leftOffset) {
                end = this.maxSize;
            }
            else if (this.pageCount - this.page < leftOffset) {
                start = this.pageCount - this.maxSize;
            }
            else {
                start = this.page - leftOffset - 1;
                end = this.page + rightOffset;
            }
            return [start, end];
        };
        NgbPagination.prototype._applyPagination = function () {
            var page = Math.ceil(this.page / this.maxSize) - 1;
            var start = page * this.maxSize;
            var end = start + this.maxSize;
            return [start, end];
        };
        NgbPagination.prototype._setPageInRange = function (newPageNo) {
            var prevPageNo = this.page;
            this.page = getValueInRange(newPageNo, this.pageCount, 1);
            if (this.page !== prevPageNo) {
                this.pageChange.emit(this.page);
            }
        };
        NgbPagination.prototype._updatePages = function (newPage) {
            this.pageCount = Math.ceil(this.collectionSize / this.pageSize);
            if (!isNumber(this.pageCount)) {
                this.pageCount = 0;
            }
            this.pages.length = 0;
            for (var i = 1; i <= this.pageCount; i++) {
                this.pages.push(i);
            }
            this._setPageInRange(newPage);
            if (this.maxSize > 0 && this.pageCount > this.maxSize) {
                var start = 0;
                var end = this.pageCount;
                if (this.rotate) {
                    _a = this._applyRotation(), start = _a[0], end = _a[1];
                }
                else {
                    _b = this._applyPagination(), start = _b[0], end = _b[1];
                }
                this.pages = this.pages.slice(start, end);
                this._applyEllipses(start, end);
            }
            var _a, _b;
        };
        NgbPagination.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-pagination',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        template: "\n    <nav>\n      <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasPrevious()\">\n          <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>                \n        </li>\n      \n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasPrevious()\">\n          <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n        </li>\n\n        <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\" \n          [class.disabled]=\"isEllipsis(pageNumber)\">\n          <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n          <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">{{pageNumber}}</a>\n        </li>\n\n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext()\">\n          <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext()\">\n          <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>                \n        </li>        \n      </ul>\n    </nav>\n  "
                    },] },
        ];
        NgbPagination.ctorParameters = [
            { type: NgbPaginationConfig, },
        ];
        NgbPagination.propDecorators = {
            'boundaryLinks': [{ type: Input },],
            'directionLinks': [{ type: Input },],
            'ellipses': [{ type: Input },],
            'rotate': [{ type: Input },],
            'collectionSize': [{ type: Input },],
            'maxSize': [{ type: Input },],
            'page': [{ type: Input },],
            'pageSize': [{ type: Input },],
            'pageChange': [{ type: Output },],
            'size': [{ type: Input },],
        };
        return NgbPagination;
    }());
    var NgbPaginationModule = (function () {
        function NgbPaginationModule() {
        }
        NgbPaginationModule.forRoot = function () { return { ngModule: NgbPaginationModule, providers: [NgbPaginationConfig] }; };
        NgbPaginationModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbPagination], exports: [NgbPagination], imports: [CommonModule] },] },
        ];
        NgbPaginationModule.ctorParameters = [];
        return NgbPaginationModule;
    }());
    var Trigger = (function () {
        function Trigger(open, close) {
            this.open = open;
            this.close = close;
            if (!close) {
                this.close = open;
            }
        }
        Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };
        return Trigger;
    }());
    var DEFAULT_ALIASES = {
        hover: ['mouseenter', 'mouseleave']
    };
    function parseTriggers(triggers, aliases) {
        if (aliases === void 0) {
            aliases = DEFAULT_ALIASES;
        }
        var trimmedTriggers = (triggers || '').trim();
        if (trimmedTriggers.length === 0) {
            return [];
        }
        var parsedTriggers = trimmedTriggers.split(/\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {
            var alias = aliases[triggerPair[0]] || triggerPair;
            return new Trigger(alias[0], alias[1]);
        });
        var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });
        if (manualTriggers.length > 1) {
            throw 'Triggers parse error: only one manual trigger is allowed';
        }
        if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
            throw 'Triggers parse error: manual trigger can\'t be mixed with other triggers';
        }
        return parsedTriggers;
    }
    var noopFn = function () { };
    function listenToTriggers(renderer, nativeElement, triggers, openFn, closeFn, toggleFn) {
        var parsedTriggers = parseTriggers(triggers);
        var listeners = [];
        if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
            return noopFn;
        }
        parsedTriggers.forEach(function (trigger) {
            if (trigger.open === trigger.close) {
                listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));
            }
            else {
                listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));
            }
        });
        return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };
    }
    var NgbPopoverConfig = (function () {
        function NgbPopoverConfig() {
            this.placement = 'top';
            this.triggers = 'click';
        }
        NgbPopoverConfig.decorators = [
            { type: Injectable },
        ];
        NgbPopoverConfig.ctorParameters = [];
        return NgbPopoverConfig;
    }());
    var NgbPopoverWindow = (function () {
        function NgbPopoverWindow() {
            this.placement = 'top';
        }
        NgbPopoverWindow.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-popover-window',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        host: { '[class]': '"popover in popover-" + placement', 'role': 'tooltip' },
                        template: "\n    <div class=\"popover-arrow\"></div>\n    <h3 class=\"popover-title\">{{title}}</h3><div class=\"popover-content\"><ng-content></ng-content></div>\n    "
                    },] },
        ];
        NgbPopoverWindow.ctorParameters = [];
        NgbPopoverWindow.propDecorators = {
            'placement': [{ type: Input },],
            'title': [{ type: Input },],
        };
        return NgbPopoverWindow;
    }());
    var NgbPopover = (function () {
        function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
            var _this = this;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this.shown = new EventEmitter();
            this.hidden = new EventEmitter();
            this.placement = config.placement;
            this.triggers = config.triggers;
            this.container = config.container;
            this._popupService = new PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
            this._zoneSubscription = ngZone.onStable.subscribe(function () {
                if (_this._windowRef) {
                    positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
                }
            });
        }
        NgbPopover.prototype.open = function () {
            if (!this._windowRef) {
                this._windowRef = this._popupService.open(this.ngbPopover);
                this._windowRef.instance.placement = this.placement;
                this._windowRef.instance.title = this.popoverTitle;
                if (this.container === 'body') {
                    window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
                }
                this._windowRef.changeDetectorRef.markForCheck();
                this.shown.emit();
            }
        };
        NgbPopover.prototype.close = function () {
            if (this._windowRef) {
                this._popupService.close();
                this._windowRef = null;
                this.hidden.emit();
            }
        };
        NgbPopover.prototype.toggle = function () {
            if (this._windowRef) {
                this.close();
            }
            else {
                this.open();
            }
        };
        NgbPopover.prototype.isOpen = function () { return this._windowRef != null; };
        NgbPopover.prototype.ngOnInit = function () {
            this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
        };
        NgbPopover.prototype.ngOnDestroy = function () {
            this.close();
            this._unregisterListenersFn();
            this._zoneSubscription.unsubscribe();
        };
        NgbPopover.decorators = [
            { type: Directive, args: [{ selector: '[ngbPopover]', exportAs: 'ngbPopover' },] },
        ];
        NgbPopover.ctorParameters = [
            { type: ElementRef, },
            { type: Renderer, },
            { type: Injector, },
            { type: ComponentFactoryResolver, },
            { type: ViewContainerRef, },
            { type: NgbPopoverConfig, },
            { type: NgZone, },
        ];
        NgbPopover.propDecorators = {
            'ngbPopover': [{ type: Input },],
            'popoverTitle': [{ type: Input },],
            'placement': [{ type: Input },],
            'triggers': [{ type: Input },],
            'container': [{ type: Input },],
            'shown': [{ type: Output },],
            'hidden': [{ type: Output },],
        };
        return NgbPopover;
    }());
    var NgbPopoverModule = (function () {
        function NgbPopoverModule() {
        }
        NgbPopoverModule.forRoot = function () { return { ngModule: NgbPopoverModule, providers: [NgbPopoverConfig] }; };
        NgbPopoverModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbPopover, NgbPopoverWindow], exports: [NgbPopover], entryComponents: [NgbPopoverWindow] },] },
        ];
        NgbPopoverModule.ctorParameters = [];
        return NgbPopoverModule;
    }());
    var NgbProgressbarConfig = (function () {
        function NgbProgressbarConfig() {
            this.max = 100;
            this.animated = false;
            this.striped = false;
        }
        NgbProgressbarConfig.decorators = [
            { type: Injectable },
        ];
        NgbProgressbarConfig.ctorParameters = [];
        return NgbProgressbarConfig;
    }());
    var NgbProgressbar = (function () {
        function NgbProgressbar(config) {
            this.value = 0;
            this.max = config.max;
            this.animated = config.animated;
            this.striped = config.striped;
            this.type = config.type;
        }
        NgbProgressbar.prototype.getValue = function () { return getValueInRange(this.value, this.max); };
        NgbProgressbar.prototype.getPercentValue = function () { return 100 * this.getValue() / this.max; };
        NgbProgressbar.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-progressbar',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        template: "\n    <progress class=\"progress{{type ? ' progress-' + type : ''}}{{animated ? ' progress-animated' : ''}}{{striped ? \n    ' progress-striped' : ''}}\" \n      [max]=\"max\" [value]=\"getValue()\">\n      <div class=\"progress\">\n        <span class=\"progress-bar\" [style.width.%]=\"getPercentValue()\"><ng-content></ng-content></span>\n      </div>\n    </progress>\n  "
                    },] },
        ];
        NgbProgressbar.ctorParameters = [
            { type: NgbProgressbarConfig, },
        ];
        NgbProgressbar.propDecorators = {
            'max': [{ type: Input },],
            'animated': [{ type: Input },],
            'striped': [{ type: Input },],
            'type': [{ type: Input },],
            'value': [{ type: Input },],
        };
        return NgbProgressbar;
    }());
    var NgbProgressbarModule = (function () {
        function NgbProgressbarModule() {
        }
        NgbProgressbarModule.forRoot = function () { return { ngModule: NgbProgressbarModule, providers: [NgbProgressbarConfig] }; };
        NgbProgressbarModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbProgressbar], exports: [NgbProgressbar] },] },
        ];
        NgbProgressbarModule.ctorParameters = [];
        return NgbProgressbarModule;
    }());
    var NgbRatingConfig = (function () {
        function NgbRatingConfig() {
            this.max = 10;
            this.readonly = false;
        }
        NgbRatingConfig.decorators = [
            { type: Injectable },
        ];
        NgbRatingConfig.ctorParameters = [];
        return NgbRatingConfig;
    }());
    var Key;
    (function (Key) {
        Key[Key["End"] = 35] = "End";
        Key[Key["Home"] = 36] = "Home";
        Key[Key["ArrowLeft"] = 37] = "ArrowLeft";
        Key[Key["ArrowUp"] = 38] = "ArrowUp";
        Key[Key["ArrowRight"] = 39] = "ArrowRight";
        Key[Key["ArrowDown"] = 40] = "ArrowDown";
    })(Key || (Key = {}));
    var NGB_RATING_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NgbRating; }),
        multi: true
    };
    var NgbRating = (function () {
        function NgbRating(config, _changeDetectorRef) {
            this._changeDetectorRef = _changeDetectorRef;
            this.range = [];
            this.hover = new EventEmitter();
            this.leave = new EventEmitter();
            this.rateChange = new EventEmitter(true);
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this.max = config.max;
            this.readonly = config.readonly;
        }
        NgbRating.prototype.ariaValueText = function () { return this.rate + " out of " + this.max; };
        NgbRating.prototype.enter = function (value) {
            if (!this.readonly) {
                this.rate = value;
            }
            this.hover.emit(value);
        };
        NgbRating.prototype.handleKeyDown = function (event) {
            if (Key[toString(event.which)]) {
                event.preventDefault();
                switch (event.which) {
                    case Key.ArrowDown:
                    case Key.ArrowLeft:
                        this.update(this.rate - 1);
                        break;
                    case Key.ArrowUp:
                    case Key.ArrowRight:
                        this.update(this.rate + 1);
                        break;
                    case Key.Home:
                        this.update(0);
                        break;
                    case Key.End:
                        this.update(this.max);
                        break;
                }
            }
        };
        NgbRating.prototype.getFillValue = function (index) {
            var diff = this.rate - index;
            if (diff >= 1) {
                return 100;
            }
            if (diff < 1 && diff > 0) {
                return Number.parseInt((diff * 100).toFixed(2));
            }
            return 0;
        };
        NgbRating.prototype.ngOnChanges = function (changes) {
            if (changes['rate']) {
                this.update(this.rate);
                this._oldRate = this.rate;
            }
        };
        NgbRating.prototype.ngOnInit = function () { this.range = Array.from({ length: this.max }, function (v, k) { return k + 1; }); };
        NgbRating.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        NgbRating.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        NgbRating.prototype.reset = function () {
            this.leave.emit(this.rate);
            this.rate = this._oldRate;
        };
        NgbRating.prototype.update = function (value, internalChange) {
            if (internalChange === void 0) {
                internalChange = true;
            }
            if (!this.readonly) {
                var newRate = value ? getValueInRange(value, this.max, 0) : 0;
                if (this._oldRate !== newRate) {
                    this._oldRate = newRate;
                    this.rate = newRate;
                    this.rateChange.emit(newRate);
                    if (internalChange) {
                        this.onChange(this.rate);
                    }
                }
            }
        };
        NgbRating.prototype.writeValue = function (value) {
            this.update(value, false);
            this._changeDetectorRef.markForCheck();
        };
        NgbRating.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-rating',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        host: { '(keydown)': 'handleKeyDown($event)' },
                        template: "\n    <template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</template>\n    <span tabindex=\"0\" (mouseleave)=\"reset()\" role=\"slider\" aria-valuemin=\"0\"\n      [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"rate\" [attr.aria-valuetext]=\"ariaValueText()\">\n      <template ngFor [ngForOf]=\"range\" let-index=\"index\">\n        <span class=\"sr-only\">({{ index < rate ? '*' : ' ' }})</span>\n        <span (mouseenter)=\"enter(index + 1)\" (click)=\"update(index + 1)\" \n        [style.cursor]=\"readonly ? 'default' : 'pointer'\">\n          <template [ngTemplateOutlet]=\"starTemplate || t\" [ngOutletContext]=\"{fill: getFillValue(index)}\"></template>\n        </span>\n      </template>\n    </span>\n  ",
                        providers: [NGB_RATING_VALUE_ACCESSOR]
                    },] },
        ];
        NgbRating.ctorParameters = [
            { type: NgbRatingConfig, },
            { type: ChangeDetectorRef, },
        ];
        NgbRating.propDecorators = {
            'max': [{ type: Input },],
            'rate': [{ type: Input },],
            'readonly': [{ type: Input },],
            'starTemplate': [{ type: Input }, { type: ContentChild, args: [TemplateRef,] },],
            'hover': [{ type: Output },],
            'leave': [{ type: Output },],
            'rateChange': [{ type: Output },],
        };
        return NgbRating;
    }());
    var NgbRatingModule = (function () {
        function NgbRatingModule() {
        }
        NgbRatingModule.forRoot = function () { return { ngModule: NgbRatingModule, providers: [NgbRatingConfig] }; };
        NgbRatingModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbRating], exports: [NgbRating], imports: [CommonModule] },] },
        ];
        NgbRatingModule.ctorParameters = [];
        return NgbRatingModule;
    }());
    var NgbTabsetConfig = (function () {
        function NgbTabsetConfig() {
            this.type = 'tabs';
        }
        NgbTabsetConfig.decorators = [
            { type: Injectable },
        ];
        NgbTabsetConfig.ctorParameters = [];
        return NgbTabsetConfig;
    }());
    var nextId$2 = 0;
    var NgbTabTitle = (function () {
        function NgbTabTitle(templateRef) {
            this.templateRef = templateRef;
        }
        NgbTabTitle.decorators = [
            { type: Directive, args: [{ selector: 'template[ngbTabTitle]' },] },
        ];
        NgbTabTitle.ctorParameters = [
            { type: TemplateRef, },
        ];
        return NgbTabTitle;
    }());
    var NgbTabContent = (function () {
        function NgbTabContent(templateRef) {
            this.templateRef = templateRef;
        }
        NgbTabContent.decorators = [
            { type: Directive, args: [{ selector: 'template[ngbTabContent]' },] },
        ];
        NgbTabContent.ctorParameters = [
            { type: TemplateRef, },
        ];
        return NgbTabContent;
    }());
    var NgbTab = (function () {
        function NgbTab() {
            this.id = "ngb-tab-" + nextId$2++;
            this.disabled = false;
        }
        NgbTab.decorators = [
            { type: Directive, args: [{ selector: 'ngb-tab' },] },
        ];
        NgbTab.ctorParameters = [];
        NgbTab.propDecorators = {
            'id': [{ type: Input },],
            'title': [{ type: Input },],
            'disabled': [{ type: Input },],
            'contentTpl': [{ type: ContentChild, args: [NgbTabContent,] },],
            'titleTpl': [{ type: ContentChild, args: [NgbTabTitle,] },],
        };
        return NgbTab;
    }());
    var NgbTabset = (function () {
        function NgbTabset(config) {
            this.tabChange = new EventEmitter();
            this.type = config.type;
        }
        NgbTabset.prototype.select = function (tabId) {
            var selectedTab = this._getTabById(tabId);
            if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
                var defaultPrevented_1 = false;
                this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });
                if (!defaultPrevented_1) {
                    this.activeId = selectedTab.id;
                }
            }
        };
        NgbTabset.prototype.ngAfterContentChecked = function () {
            var activeTab = this._getTabById(this.activeId);
            this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);
        };
        NgbTabset.prototype._getTabById = function (id) {
            var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });
            return tabsWithId.length ? tabsWithId[0] : null;
        };
        NgbTabset.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-tabset',
                        exportAs: 'ngbTabset',
                        template: "\n    <ul [class]=\"'nav nav-' + type\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\"\n          href (click)=\"!!select(tab.id)\" role=\"tab\" [attr.aria-controls]=\"tab.id + '-panel'\" [attr.aria-expanded]=\"tab.id === activeId\">\n          {{tab.title}}<template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"tab-content\">\n      <template ngFor let-tab [ngForOf]=\"tabs\">\n        <div class=\"tab-pane active\" *ngIf=\"tab.id === activeId\" role=\"tabpanel\" [attr.aria-labelledby]=\"tab.id\" id=\"{{tab.id}}-panel\">\n          <template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></template>\n        </div>\n      </template>\n    </div>\n  "
                    },] },
        ];
        NgbTabset.ctorParameters = [
            { type: NgbTabsetConfig, },
        ];
        NgbTabset.propDecorators = {
            'tabs': [{ type: ContentChildren, args: [NgbTab,] },],
            'activeId': [{ type: Input },],
            'type': [{ type: Input },],
            'tabChange': [{ type: Output },],
        };
        return NgbTabset;
    }());
    var NGB_TABSET_DIRECTIVES = [NgbTabset, NgbTab, NgbTabContent, NgbTabTitle];
    var NgbTabsetModule = (function () {
        function NgbTabsetModule() {
        }
        NgbTabsetModule.forRoot = function () { return { ngModule: NgbTabsetModule, providers: [NgbTabsetConfig] }; };
        NgbTabsetModule.decorators = [
            { type: NgModule, args: [{ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [CommonModule] },] },
        ];
        NgbTabsetModule.ctorParameters = [];
        return NgbTabsetModule;
    }());
    var NgbTime = (function () {
        function NgbTime(hour, minute, second) {
            this.hour = toInteger(hour);
            this.minute = toInteger(minute);
            this.second = toInteger(second);
        }
        NgbTime.prototype.changeHour = function (step) {
            if (step === void 0) {
                step = 1;
            }
            this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);
        };
        NgbTime.prototype.updateHour = function (hour) {
            if (isNumber(hour)) {
                this.hour = (hour < 0 ? 24 + hour : hour) % 24;
            }
            else {
                this.hour = NaN;
            }
        };
        NgbTime.prototype.changeMinute = function (step) {
            if (step === void 0) {
                step = 1;
            }
            this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);
        };
        NgbTime.prototype.updateMinute = function (minute) {
            if (isNumber(minute)) {
                this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;
                this.changeHour(Math.floor(minute / 60));
            }
            else {
                this.minute = NaN;
            }
        };
        NgbTime.prototype.changeSecond = function (step) {
            if (step === void 0) {
                step = 1;
            }
            this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);
        };
        NgbTime.prototype.updateSecond = function (second) {
            if (isNumber(second)) {
                this.second = second < 0 ? 60 + second % 60 : second % 60;
                this.changeMinute(Math.floor(second / 60));
            }
            else {
                this.second = NaN;
            }
        };
        NgbTime.prototype.isValid = function (checkSecs) {
            if (checkSecs === void 0) {
                checkSecs = true;
            }
            return isNumber(this.hour) && isNumber(this.minute) && (checkSecs ? isNumber(this.second) : true);
        };
        NgbTime.prototype.toString = function () { return (this.hour || 0) + ":" + (this.minute || 0) + ":" + (this.second || 0); };
        return NgbTime;
    }());
    var NgbTimepickerConfig = (function () {
        function NgbTimepickerConfig() {
            this.meridian = false;
            this.spinners = true;
            this.seconds = false;
            this.hourStep = 1;
            this.minuteStep = 1;
            this.secondStep = 1;
            this.disabled = false;
            this.readonlyInputs = false;
        }
        NgbTimepickerConfig.decorators = [
            { type: Injectable },
        ];
        NgbTimepickerConfig.ctorParameters = [];
        return NgbTimepickerConfig;
    }());
    var NGB_TIMEPICKER_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NgbTimepicker; }),
        multi: true
    };
    var NgbTimepicker = (function () {
        function NgbTimepicker(config) {
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this.meridian = config.meridian;
            this.spinners = config.spinners;
            this.seconds = config.seconds;
            this.hourStep = config.hourStep;
            this.minuteStep = config.minuteStep;
            this.secondStep = config.secondStep;
            this.disabled = config.disabled;
            this.readonlyInputs = config.readonlyInputs;
        }
        NgbTimepicker.prototype.writeValue = function (value) {
            this.model = value ? new NgbTime(value.hour, value.minute, value.second) : new NgbTime();
            if (!this.seconds && (!value || !isNumber(value.second))) {
                this.model.second = 0;
            }
        };
        NgbTimepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
        NgbTimepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
        NgbTimepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
        NgbTimepicker.prototype.changeHour = function (step) {
            this.model.changeHour(step);
            this.propagateModelChange();
        };
        NgbTimepicker.prototype.changeMinute = function (step) {
            this.model.changeMinute(step);
            this.propagateModelChange();
        };
        NgbTimepicker.prototype.changeSecond = function (step) {
            this.model.changeSecond(step);
            this.propagateModelChange();
        };
        NgbTimepicker.prototype.updateHour = function (newVal) {
            this.model.updateHour(toInteger(newVal));
            this.propagateModelChange();
        };
        NgbTimepicker.prototype.updateMinute = function (newVal) {
            this.model.updateMinute(toInteger(newVal));
            this.propagateModelChange();
        };
        NgbTimepicker.prototype.updateSecond = function (newVal) {
            this.model.updateSecond(toInteger(newVal));
            this.propagateModelChange();
        };
        NgbTimepicker.prototype.toggleMeridian = function () {
            if (this.meridian) {
                this.changeHour(12);
            }
        };
        NgbTimepicker.prototype.formatHour = function (value) {
            if (isNumber(value)) {
                if (this.meridian) {
                    return padNumber(value % 12 === 0 ? 12 : value % 12);
                }
                else {
                    return padNumber(value % 24);
                }
            }
            else {
                return padNumber(NaN);
            }
        };
        NgbTimepicker.prototype.formatMinSec = function (value) { return padNumber(value); };
        NgbTimepicker.prototype.ngOnChanges = function (changes) {
            if (changes['seconds'] && !this.seconds && this.model && !isNumber(this.model.second)) {
                this.model.second = 0;
                this.propagateModelChange(false);
            }
        };
        NgbTimepicker.prototype.propagateModelChange = function (touched) {
            if (touched === void 0) {
                touched = true;
            }
            if (touched) {
                this.onTouched();
            }
            if (this.model.isValid(this.seconds)) {
                this.onChange({ hour: this.model.hour, minute: this.model.minute, second: this.model.second });
            }
            else {
                this.onChange(null);
            }
        };
        NgbTimepicker.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-timepicker',
                        styles: ["\n    .chevron::before {\n      border-style: solid;\n      border-width: 0.29em 0.29em 0 0;\n      content: '';\n      display: inline-block;\n      height: 0.69em;\n      left: 0.05em;\n      position: relative;\n      top: 0.15em;\n      transform: rotate(-45deg);\n      -webkit-transform: rotate(-45deg);\n      -ms-transform: rotate(-45deg);\n      vertical-align: middle;\n      width: 0.71em;\n    }\n    \n    .chevron.bottom:before {\n      top: -.3em;\n      -webkit-transform: rotate(135deg);\n      -ms-transform: rotate(135deg);\n      transform: rotate(135deg);\n    }\n    \n    .btn-link {\n      outline: 0;\n    }\n\n    .btn-link.disabled {\n      cursor: not-allowed;\n      opacity: .65;\n    }\n  "],
                        template: "\n     <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n      <table>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(hourStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-xs-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n        <tr>\n          <td>\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"HH\"\n              [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\" \n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <td>&nbsp;:&nbsp;</td>\n          <td>\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"MM\"\n              [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\" \n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;:&nbsp;</td>\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"SS\"\n              [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\" \n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;&nbsp;</td>\n            <td>\n              <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"toggleMeridian()\">{{model.hour >= 12 ? 'PM' : 'AM'}}</button>\n            </td>\n          </template>\n        </tr>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(-hourStep)\" \n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(-minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-xs-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(-secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron bottom\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n      </table>\n    </fieldset>\n  ",
                        providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]
                    },] },
        ];
        NgbTimepicker.ctorParameters = [
            { type: NgbTimepickerConfig, },
        ];
        NgbTimepicker.propDecorators = {
            'meridian': [{ type: Input },],
            'spinners': [{ type: Input },],
            'seconds': [{ type: Input },],
            'hourStep': [{ type: Input },],
            'minuteStep': [{ type: Input },],
            'secondStep': [{ type: Input },],
            'readonlyInputs': [{ type: Input },],
        };
        return NgbTimepicker;
    }());
    var NgbTimepickerModule = (function () {
        function NgbTimepickerModule() {
        }
        NgbTimepickerModule.forRoot = function () { return { ngModule: NgbTimepickerModule, providers: [NgbTimepickerConfig] }; };
        NgbTimepickerModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbTimepicker], exports: [NgbTimepicker], imports: [CommonModule] },] },
        ];
        NgbTimepickerModule.ctorParameters = [];
        return NgbTimepickerModule;
    }());
    var NgbTooltipConfig = (function () {
        function NgbTooltipConfig() {
            this.placement = 'top';
            this.triggers = 'hover';
        }
        NgbTooltipConfig.decorators = [
            { type: Injectable },
        ];
        NgbTooltipConfig.ctorParameters = [];
        return NgbTooltipConfig;
    }());
    var NgbTooltipWindow = (function () {
        function NgbTooltipWindow() {
            this.placement = 'top';
        }
        NgbTooltipWindow.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-tooltip-window',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        host: { '[class]': '"tooltip in tooltip-" + placement', 'role': 'tooltip' },
                        template: "\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    "
                    },] },
        ];
        NgbTooltipWindow.ctorParameters = [];
        NgbTooltipWindow.propDecorators = {
            'placement': [{ type: Input },],
        };
        return NgbTooltipWindow;
    }());
    var NgbTooltip = (function () {
        function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
            var _this = this;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
            this.shown = new EventEmitter();
            this.hidden = new EventEmitter();
            this.placement = config.placement;
            this.triggers = config.triggers;
            this.container = config.container;
            this._popupService = new PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
            this._zoneSubscription = ngZone.onStable.subscribe(function () {
                if (_this._windowRef) {
                    positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
                }
            });
        }
        Object.defineProperty(NgbTooltip.prototype, "ngbTooltip", {
            get: function () { return this._ngbTooltip; },
            set: function (value) {
                this._ngbTooltip = value;
                if (!value && this._windowRef) {
                    this.close();
                }
            },
            enumerable: true,
            configurable: true
        });
        NgbTooltip.prototype.open = function () {
            if (!this._windowRef && this._ngbTooltip) {
                this._windowRef = this._popupService.open(this._ngbTooltip);
                this._windowRef.instance.placement = this.placement;
                if (this.container === 'body') {
                    window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
                }
                this._windowRef.changeDetectorRef.markForCheck();
                this.shown.emit();
            }
        };
        NgbTooltip.prototype.close = function () {
            if (this._windowRef != null) {
                this._popupService.close();
                this._windowRef = null;
                this.hidden.emit();
            }
        };
        NgbTooltip.prototype.toggle = function () {
            if (this._windowRef) {
                this.close();
            }
            else {
                this.open();
            }
        };
        NgbTooltip.prototype.isOpen = function () { return this._windowRef != null; };
        NgbTooltip.prototype.ngOnInit = function () {
            this._unregisterListenersFn = listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
        };
        NgbTooltip.prototype.ngOnDestroy = function () {
            this.close();
            this._unregisterListenersFn();
            this._zoneSubscription.unsubscribe();
        };
        NgbTooltip.decorators = [
            { type: Directive, args: [{ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' },] },
        ];
        NgbTooltip.ctorParameters = [
            { type: ElementRef, },
            { type: Renderer, },
            { type: Injector, },
            { type: ComponentFactoryResolver, },
            { type: ViewContainerRef, },
            { type: NgbTooltipConfig, },
            { type: NgZone, },
        ];
        NgbTooltip.propDecorators = {
            'placement': [{ type: Input },],
            'triggers': [{ type: Input },],
            'container': [{ type: Input },],
            'shown': [{ type: Output },],
            'hidden': [{ type: Output },],
            'ngbTooltip': [{ type: Input },],
        };
        return NgbTooltip;
    }());
    var NgbTooltipModule = (function () {
        function NgbTooltipModule() {
        }
        NgbTooltipModule.forRoot = function () { return { ngModule: NgbTooltipModule, providers: [NgbTooltipConfig] }; };
        NgbTooltipModule.decorators = [
            { type: NgModule, args: [{ declarations: [NgbTooltip, NgbTooltipWindow], exports: [NgbTooltip], entryComponents: [NgbTooltipWindow] },] },
        ];
        NgbTooltipModule.ctorParameters = [];
        return NgbTooltipModule;
    }());
    var NgbHighlight = (function () {
        function NgbHighlight() {
            this.highlightClass = 'ngb-highlight';
        }
        NgbHighlight.prototype.ngOnChanges = function (changes) {
            var resultStr = toString(this.result);
            var resultLC = resultStr.toLowerCase();
            var termLC = toString(this.term).toLowerCase();
            var currentIdx = 0;
            if (termLC.length > 0) {
                this.parts = resultLC.split(new RegExp("(" + regExpEscape(termLC) + ")")).map(function (part) {
                    var originalPart = resultStr.substr(currentIdx, part.length);
                    currentIdx += part.length;
                    return originalPart;
                });
            }
            else {
                this.parts = [resultStr];
            }
        };
        NgbHighlight.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-highlight',
                        changeDetection: ChangeDetectionStrategy.OnPush,
                        template: "<template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">" +
                            "<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>" +
                            "</template>",
                        styles: ["\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  "]
                    },] },
        ];
        NgbHighlight.ctorParameters = [];
        NgbHighlight.propDecorators = {
            'highlightClass': [{ type: Input },],
            'result': [{ type: Input },],
            'term': [{ type: Input },],
        };
        return NgbHighlight;
    }());
    var NgbTypeaheadWindow = (function () {
        function NgbTypeaheadWindow() {
            this.activeIdx = 0;
            this.focusFirst = true;
            this.formatter = toString;
            this.selectEvent = new EventEmitter();
        }
        NgbTypeaheadWindow.prototype.getActive = function () { return this.results[this.activeIdx]; };
        NgbTypeaheadWindow.prototype.markActive = function (activeIdx) { this.activeIdx = activeIdx; };
        NgbTypeaheadWindow.prototype.next = function () {
            if (this.activeIdx === this.results.length - 1) {
                this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;
            }
            else {
                this.activeIdx++;
            }
        };
        NgbTypeaheadWindow.prototype.prev = function () {
            if (this.activeIdx < 0) {
                this.activeIdx = this.results.length - 1;
            }
            else if (this.activeIdx === 0) {
                this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;
            }
            else {
                this.activeIdx--;
            }
        };
        NgbTypeaheadWindow.prototype.select = function (item) { this.selectEvent.emit(item); };
        NgbTypeaheadWindow.prototype.ngOnInit = function () { this.activeIdx = this.focusFirst ? 0 : -1; };
        NgbTypeaheadWindow.decorators = [
            { type: Component, args: [{
                        selector: 'ngb-typeahead-window',
                        exportAs: 'ngbTypeaheadWindow',
                        host: { 'class': 'dropdown-menu', 'style': 'display: block' },
                        template: "\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  "
                    },] },
        ];
        NgbTypeaheadWindow.ctorParameters = [];
        NgbTypeaheadWindow.propDecorators = {
            'focusFirst': [{ type: Input },],
            'results': [{ type: Input },],
            'term': [{ type: Input },],
            'formatter': [{ type: Input },],
            'resultTemplate': [{ type: Input },],
            'selectEvent': [{ type: Output, args: ['select',] },],
        };
        return NgbTypeaheadWindow;
    }());
    var __extends$24 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$11 = Observable_1;
    var tryCatch_1$3 = tryCatch_1$1;
    var isFunction_1$4 = isFunction_1$1;
    var errorObject_1$3 = errorObject;
    var Subscription_1$6 = Subscription_1$1;
    var toString$1 = Object.prototype.toString;
    function isNodeStyleEventEmmitter(sourceObj) {
        return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
    }
    function isJQueryStyleEventEmitter(sourceObj) {
        return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
    }
    function isNodeList(sourceObj) {
        return !!sourceObj && toString$1.call(sourceObj) === '[object NodeList]';
    }
    function isHTMLCollection(sourceObj) {
        return !!sourceObj && toString$1.call(sourceObj) === '[object HTMLCollection]';
    }
    function isEventTarget(sourceObj) {
        return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
    }
    var FromEventObservable = (function (_super) {
        __extends$24(FromEventObservable, _super);
        function FromEventObservable(sourceObj, eventName, selector, options) {
            _super.call(this);
            this.sourceObj = sourceObj;
            this.eventName = eventName;
            this.selector = selector;
            this.options = options;
        }
        FromEventObservable.create = function (target, eventName, options, selector) {
            if (isFunction_1$4.isFunction(options)) {
                selector = options;
                options = undefined;
            }
            return new FromEventObservable(target, eventName, selector, options);
        };
        FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
            var unsubscribe;
            if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
                for (var i = 0, len = sourceObj.length; i < len; i++) {
                    FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
                }
            }
            else if (isEventTarget(sourceObj)) {
                var source_1 = sourceObj;
                sourceObj.addEventListener(eventName, handler, options);
                unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };
            }
            else if (isJQueryStyleEventEmitter(sourceObj)) {
                var source_2 = sourceObj;
                sourceObj.on(eventName, handler);
                unsubscribe = function () { return source_2.off(eventName, handler); };
            }
            else if (isNodeStyleEventEmmitter(sourceObj)) {
                var source_3 = sourceObj;
                sourceObj.addListener(eventName, handler);
                unsubscribe = function () { return source_3.removeListener(eventName, handler); };
            }
            else {
                throw new TypeError('Invalid event target');
            }
            subscriber.add(new Subscription_1$6.Subscription(unsubscribe));
        };
        FromEventObservable.prototype._subscribe = function (subscriber) {
            var sourceObj = this.sourceObj;
            var eventName = this.eventName;
            var options = this.options;
            var selector = this.selector;
            var handler = selector ? function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i - 0] = arguments[_i];
                }
                var result = tryCatch_1$3.tryCatch(selector).apply(void 0, args);
                if (result === errorObject_1$3.errorObject) {
                    subscriber.error(errorObject_1$3.errorObject.e);
                }
                else {
                    subscriber.next(result);
                }
            } : function (e) { return subscriber.next(e); };
            FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
        };
        return FromEventObservable;
    }(Observable_1$11.Observable));
    var FromEventObservable_2 = FromEventObservable;
    var FromEventObservable_1$1 = {
        FromEventObservable: FromEventObservable_2
    };
    var FromEventObservable_1 = FromEventObservable_1$1;
    var fromEvent_1$1 = FromEventObservable_1.FromEventObservable.create;
    var fromEvent$2 = {
        fromEvent: fromEvent_1$1
    };
    var Observable_1$10 = Observable_1;
    var fromEvent_1 = fromEvent$2;
    Observable_1$10.Observable.fromEvent = fromEvent_1.fromEvent;
    var __extends$25 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$8 = Subscriber_1$1;
    function _do$2(nextOrObserver, error, complete) {
        return this.lift(new DoOperator(nextOrObserver, error, complete));
    }
    var _do_2 = _do$2;
    var DoOperator = (function () {
        function DoOperator(nextOrObserver, error, complete) {
            this.nextOrObserver = nextOrObserver;
            this.error = error;
            this.complete = complete;
        }
        DoOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
        };
        return DoOperator;
    }());
    var DoSubscriber = (function (_super) {
        __extends$25(DoSubscriber, _super);
        function DoSubscriber(destination, nextOrObserver, error, complete) {
            _super.call(this, destination);
            var safeSubscriber = new Subscriber_1$8.Subscriber(nextOrObserver, error, complete);
            safeSubscriber.syncErrorThrowable = true;
            this.add(safeSubscriber);
            this.safeSubscriber = safeSubscriber;
        }
        DoSubscriber.prototype._next = function (value) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.next(value);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            }
            else {
                this.destination.next(value);
            }
        };
        DoSubscriber.prototype._error = function (err) {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.error(err);
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            }
            else {
                this.destination.error(err);
            }
        };
        DoSubscriber.prototype._complete = function () {
            var safeSubscriber = this.safeSubscriber;
            safeSubscriber.complete();
            if (safeSubscriber.syncErrorThrown) {
                this.destination.error(safeSubscriber.syncErrorValue);
            }
            else {
                this.destination.complete();
            }
        };
        return DoSubscriber;
    }(Subscriber_1$8.Subscriber));
    var _do_1 = {
        _do: _do_2
    };
    var Observable_1$12 = Observable_1;
    var do_1 = _do_1;
    Observable_1$12.Observable.prototype.do = do_1._do;
    Observable_1$12.Observable.prototype._do = do_1._do;
    function letProto(func) {
        return func(this);
    }
    var letProto_1 = letProto;
    var _let$2 = {
        letProto: letProto_1
    };
    var Observable_1$13 = Observable_1;
    var let_1 = _let$2;
    Observable_1$13.Observable.prototype.let = let_1.letProto;
    Observable_1$13.Observable.prototype.letBind = let_1.letProto;
    var NgbTypeaheadConfig = (function () {
        function NgbTypeaheadConfig() {
            this.editable = true;
            this.focusFirst = true;
            this.showHint = false;
        }
        NgbTypeaheadConfig.decorators = [
            { type: Injectable },
        ];
        NgbTypeaheadConfig.ctorParameters = [];
        return NgbTypeaheadConfig;
    }());
    var Key$1;
    (function (Key) {
        Key[Key["Tab"] = 9] = "Tab";
        Key[Key["Enter"] = 13] = "Enter";
        Key[Key["Escape"] = 27] = "Escape";
        Key[Key["ArrowUp"] = 38] = "ArrowUp";
        Key[Key["ArrowDown"] = 40] = "ArrowDown";
    })(Key$1 || (Key$1 = {}));
    var NGB_TYPEAHEAD_VALUE_ACCESSOR = {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(function () { return NgbTypeahead; }),
        multi: true
    };
    var NgbTypeahead = (function () {
        function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone) {
            var _this = this;
            this._elementRef = _elementRef;
            this._viewContainerRef = _viewContainerRef;
            this._renderer = _renderer;
            this._injector = _injector;
            this.selectItem = new EventEmitter();
            this._onTouched = function () { };
            this._onChange = function (_) { };
            this.editable = config.editable;
            this.focusFirst = config.focusFirst;
            this.showHint = config.showHint;
            this._valueChanges = Observable_2.fromEvent(_elementRef.nativeElement, 'input', function ($event) { return $event.target.value; });
            this._popupService = new PopupService(NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);
            this._zoneSubscription = ngZone.onStable.subscribe(function () {
                if (_this._windowRef) {
                    positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, 'bottom-left');
                }
            });
        }
        NgbTypeahead.prototype.ngOnInit = function () {
            var _this = this;
            this._subscription = this._subscribeToUserInput(this._valueChanges
                .do(function (value) {
                _this._userInput = value;
                if (_this.editable) {
                    _this._onChange(value);
                }
            })
                .let(this.ngbTypeahead)
                .do(function (_) {
                if (!_this.editable) {
                    _this._onChange(undefined);
                }
            }));
        };
        NgbTypeahead.prototype.ngOnDestroy = function () {
            this._unsubscribeFromUserInput();
            this._zoneSubscription.unsubscribe();
        };
        NgbTypeahead.prototype.registerOnChange = function (fn) { this._onChange = fn; };
        NgbTypeahead.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };
        NgbTypeahead.prototype.writeValue = function (value) { this._writeInputValue(this._formatItemForInput(value)); };
        NgbTypeahead.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        NgbTypeahead.prototype.dismissPopup = function () {
            if (this.isPopupOpen()) {
                this._closePopup();
                this._writeInputValue(this._userInput);
            }
        };
        NgbTypeahead.prototype.isPopupOpen = function () { return this._windowRef != null; };
        NgbTypeahead.prototype.handleBlur = function () { this._onTouched(); };
        NgbTypeahead.prototype.handleKeyDown = function (event) {
            if (!this._windowRef) {
                return;
            }
            if (Key$1[toString(event.which)]) {
                switch (event.which) {
                    case Key$1.ArrowDown:
                        event.preventDefault();
                        this._windowRef.instance.next();
                        this._showHint();
                        break;
                    case Key$1.ArrowUp:
                        event.preventDefault();
                        this._windowRef.instance.prev();
                        this._showHint();
                        break;
                    case Key$1.Enter:
                    case Key$1.Tab:
                        var result = this._windowRef.instance.getActive();
                        if (isDefined(result)) {
                            event.preventDefault();
                            event.stopPropagation();
                            this._selectResult(result);
                        }
                        this._closePopup();
                        break;
                    case Key$1.Escape:
                        event.preventDefault();
                        this.dismissPopup();
                        break;
                }
            }
        };
        NgbTypeahead.prototype._openPopup = function () {
            var _this = this;
            if (!this._windowRef) {
                this._windowRef = this._popupService.open();
                this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });
            }
        };
        NgbTypeahead.prototype._closePopup = function () {
            this._popupService.close();
            this._windowRef = null;
        };
        NgbTypeahead.prototype._selectResult = function (result) {
            var defaultPrevented = false;
            this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });
            if (!defaultPrevented) {
                this.writeValue(result);
                this._onChange(result);
            }
        };
        NgbTypeahead.prototype._selectResultClosePopup = function (result) {
            this._selectResult(result);
            this._closePopup();
        };
        NgbTypeahead.prototype._showHint = function () {
            if (this.showHint) {
                var userInputLowerCase = this._userInput.toLowerCase();
                var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());
                if (userInputLowerCase === formattedVal.substr(0, this._userInput.length).toLowerCase()) {
                    this._writeInputValue(this._userInput + formattedVal.substr(this._userInput.length));
                    this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'setSelectionRange', [this._userInput.length, formattedVal.length]);
                }
                else {
                    this.writeValue(this._windowRef.instance.getActive());
                }
            }
        };
        NgbTypeahead.prototype._formatItemForInput = function (item) {
            return item && this.inputFormatter ? this.inputFormatter(item) : toString(item);
        };
        NgbTypeahead.prototype._writeInputValue = function (value) {
            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
        };
        NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {
            var _this = this;
            return userInput$.subscribe(function (results) {
                if (!results || results.length === 0) {
                    _this._closePopup();
                }
                else {
                    _this._openPopup();
                    _this._windowRef.instance.focusFirst = _this.focusFirst;
                    _this._windowRef.instance.results = results;
                    _this._windowRef.instance.term = _this._elementRef.nativeElement.value;
                    if (_this.resultFormatter) {
                        _this._windowRef.instance.formatter = _this.resultFormatter;
                    }
                    if (_this.resultTemplate) {
                        _this._windowRef.instance.resultTemplate = _this.resultTemplate;
                    }
                    _this._showHint();
                    _this._windowRef.changeDetectorRef.detectChanges();
                }
            });
        };
        NgbTypeahead.prototype._unsubscribeFromUserInput = function () {
            if (this._subscription) {
                this._subscription.unsubscribe();
            }
            this._subscription = null;
        };
        NgbTypeahead.decorators = [
            { type: Directive, args: [{
                        selector: 'input[ngbTypeahead]',
                        host: {
                            '(blur)': 'handleBlur()',
                            '[class.open]': 'isPopupOpen()',
                            '(document:click)': 'dismissPopup()',
                            '(keydown)': 'handleKeyDown($event)',
                            'autocomplete': 'off',
                            'autocapitalize': 'off',
                            'autocorrect': 'off'
                        },
                        providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]
                    },] },
        ];
        NgbTypeahead.ctorParameters = [
            { type: ElementRef, },
            { type: ViewContainerRef, },
            { type: Renderer, },
            { type: Injector, },
            { type: ComponentFactoryResolver, },
            { type: NgbTypeaheadConfig, },
            { type: NgZone, },
        ];
        NgbTypeahead.propDecorators = {
            'editable': [{ type: Input },],
            'focusFirst': [{ type: Input },],
            'inputFormatter': [{ type: Input },],
            'ngbTypeahead': [{ type: Input },],
            'resultFormatter': [{ type: Input },],
            'resultTemplate': [{ type: Input },],
            'showHint': [{ type: Input },],
            'selectItem': [{ type: Output },],
        };
        return NgbTypeahead;
    }());
    var NgbTypeaheadModule = (function () {
        function NgbTypeaheadModule() {
        }
        NgbTypeaheadModule.forRoot = function () { return { ngModule: NgbTypeaheadModule, providers: [NgbTypeaheadConfig] }; };
        NgbTypeaheadModule.decorators = [
            { type: NgModule, args: [{
                        declarations: [NgbTypeahead, NgbHighlight, NgbTypeaheadWindow],
                        exports: [NgbTypeahead],
                        imports: [CommonModule],
                        entryComponents: [NgbTypeaheadWindow]
                    },] },
        ];
        NgbTypeaheadModule.ctorParameters = [];
        return NgbTypeaheadModule;
    }());
    var NGB_MODULES = [
        NgbAccordionModule, NgbAlertModule, NgbButtonsModule, NgbCarouselModule, NgbCollapseModule, NgbDatepickerModule,
        NgbDropdownModule, NgbModalModule, NgbPaginationModule, NgbPopoverModule, NgbProgressbarModule, NgbRatingModule,
        NgbTabsetModule, NgbTimepickerModule, NgbTooltipModule, NgbTypeaheadModule
    ];
    var NgbRootModule = (function () {
        function NgbRootModule() {
        }
        NgbRootModule.decorators = [
            { type: NgModule, args: [{
                        imports: [
                            NgbAlertModule.forRoot(), NgbButtonsModule.forRoot(), NgbCollapseModule.forRoot(), NgbProgressbarModule.forRoot(),
                            NgbTooltipModule.forRoot(), NgbTypeaheadModule.forRoot(), NgbAccordionModule.forRoot(), NgbCarouselModule.forRoot(),
                            NgbDatepickerModule.forRoot(), NgbDropdownModule.forRoot(), NgbModalModule.forRoot(), NgbPaginationModule.forRoot(),
                            NgbPopoverModule.forRoot(), NgbProgressbarModule.forRoot(), NgbRatingModule.forRoot(), NgbTabsetModule.forRoot(),
                            NgbTimepickerModule.forRoot(), NgbTooltipModule.forRoot()
                        ],
                        exports: NGB_MODULES
                    },] },
        ];
        NgbRootModule.ctorParameters = [];
        return NgbRootModule;
    }());
    var NgbModule = (function () {
        function NgbModule() {
        }
        NgbModule.forRoot = function () { return { ngModule: NgbRootModule }; };
        NgbModule.decorators = [
            { type: NgModule, args: [{ imports: NGB_MODULES, exports: NGB_MODULES },] },
        ];
        NgbModule.ctorParameters = [];
        return NgbModule;
    }());
    var __extends$27 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subject_1$4 = Subject_1$2;
    var ObjectUnsubscribedError_1$3 = ObjectUnsubscribedError_1$1;
    var BehaviorSubject = (function (_super) {
        __extends$27(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            _super.call(this);
            this._value = _value;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: true,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            if (subscription && !subscription.closed) {
                subscriber.next(this._value);
            }
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            if (this.hasError) {
                throw this.thrownError;
            }
            else if (this.closed) {
                throw new ObjectUnsubscribedError_1$3.ObjectUnsubscribedError();
            }
            else {
                return this._value;
            }
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, this._value = value);
        };
        return BehaviorSubject;
    }(Subject_1$4.Subject));
    var BehaviorSubject_2 = BehaviorSubject;
    var __extends$29 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var root_1$7 = root;
    var Observable_1$15 = Observable_1;
    var iterator_1$2 = iterator;
    var IteratorObservable = (function (_super) {
        __extends$29(IteratorObservable, _super);
        function IteratorObservable(iterator$$1, scheduler) {
            _super.call(this);
            this.scheduler = scheduler;
            if (iterator$$1 == null) {
                throw new Error('iterator cannot be null.');
            }
            this.iterator = getIterator(iterator$$1);
        }
        IteratorObservable.create = function (iterator$$1, scheduler) {
            return new IteratorObservable(iterator$$1, scheduler);
        };
        IteratorObservable.dispatch = function (state) {
            var index = state.index, hasError = state.hasError, iterator$$1 = state.iterator, subscriber = state.subscriber;
            if (hasError) {
                subscriber.error(state.error);
                return;
            }
            var result = iterator$$1.next();
            if (result.done) {
                subscriber.complete();
                return;
            }
            subscriber.next(result.value);
            state.index = index + 1;
            if (subscriber.closed) {
                if (typeof iterator$$1.return === 'function') {
                    iterator$$1.return();
                }
                return;
            }
            this.schedule(state);
        };
        IteratorObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this, iterator$$1 = _a.iterator, scheduler = _a.scheduler;
            if (scheduler) {
                return scheduler.schedule(IteratorObservable.dispatch, 0, {
                    index: index, iterator: iterator$$1, subscriber: subscriber
                });
            }
            else {
                do {
                    var result = iterator$$1.next();
                    if (result.done) {
                        subscriber.complete();
                        break;
                    }
                    else {
                        subscriber.next(result.value);
                    }
                    if (subscriber.closed) {
                        if (typeof iterator$$1.return === 'function') {
                            iterator$$1.return();
                        }
                        break;
                    }
                } while (true);
            }
        };
        return IteratorObservable;
    }(Observable_1$15.Observable));
    var IteratorObservable_2 = IteratorObservable;
    var StringIterator = (function () {
        function StringIterator(str, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = str.length;
            }
            this.str = str;
            this.idx = idx;
            this.len = len;
        }
        StringIterator.prototype[iterator_1$2.$$iterator] = function () { return (this); };
        StringIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.str.charAt(this.idx++)
            } : {
                done: true,
                value: undefined
            };
        };
        return StringIterator;
    }());
    var ArrayIterator = (function () {
        function ArrayIterator(arr, idx, len) {
            if (idx === void 0) {
                idx = 0;
            }
            if (len === void 0) {
                len = toLength(arr);
            }
            this.arr = arr;
            this.idx = idx;
            this.len = len;
        }
        ArrayIterator.prototype[iterator_1$2.$$iterator] = function () { return this; };
        ArrayIterator.prototype.next = function () {
            return this.idx < this.len ? {
                done: false,
                value: this.arr[this.idx++]
            } : {
                done: true,
                value: undefined
            };
        };
        return ArrayIterator;
    }());
    function getIterator(obj) {
        var i = obj[iterator_1$2.$$iterator];
        if (!i && typeof obj === 'string') {
            return new StringIterator(obj);
        }
        if (!i && obj.length !== undefined) {
            return new ArrayIterator(obj);
        }
        if (!i) {
            throw new TypeError('object is not iterable');
        }
        return obj[iterator_1$2.$$iterator]();
    }
    var maxSafeInteger = Math.pow(2, 53) - 1;
    function toLength(o) {
        var len = +o.length;
        if (isNaN(len)) {
            return 0;
        }
        if (len === 0 || !numberIsFinite(len)) {
            return len;
        }
        len = sign(len) * Math.floor(Math.abs(len));
        if (len <= 0) {
            return 0;
        }
        if (len > maxSafeInteger) {
            return maxSafeInteger;
        }
        return len;
    }
    function numberIsFinite(value) {
        return typeof value === 'number' && root_1$7.root.isFinite(value);
    }
    function sign(value) {
        var valueAsNumber = +value;
        if (valueAsNumber === 0) {
            return valueAsNumber;
        }
        if (isNaN(valueAsNumber)) {
            return valueAsNumber;
        }
        return valueAsNumber < 0 ? -1 : 1;
    }
    var IteratorObservable_1$1 = {
        IteratorObservable: IteratorObservable_2
    };
    var __extends$30 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Observable_1$16 = Observable_1;
    var ScalarObservable_1$3 = ScalarObservable_1$1;
    var EmptyObservable_1$4 = EmptyObservable_1$1;
    var ArrayLikeObservable = (function (_super) {
        __extends$30(ArrayLikeObservable, _super);
        function ArrayLikeObservable(arrayLike, scheduler) {
            _super.call(this);
            this.arrayLike = arrayLike;
            this.scheduler = scheduler;
            if (!scheduler && arrayLike.length === 1) {
                this._isScalar = true;
                this.value = arrayLike[0];
            }
        }
        ArrayLikeObservable.create = function (arrayLike, scheduler) {
            var length = arrayLike.length;
            if (length === 0) {
                return new EmptyObservable_1$4.EmptyObservable();
            }
            else if (length === 1) {
                return new ScalarObservable_1$3.ScalarObservable(arrayLike[0], scheduler);
            }
            else {
                return new ArrayLikeObservable(arrayLike, scheduler);
            }
        };
        ArrayLikeObservable.dispatch = function (state) {
            var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
            if (subscriber.closed) {
                return;
            }
            if (index >= length) {
                subscriber.complete();
                return;
            }
            subscriber.next(arrayLike[index]);
            state.index = index + 1;
            this.schedule(state);
        };
        ArrayLikeObservable.prototype._subscribe = function (subscriber) {
            var index = 0;
            var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
            var length = arrayLike.length;
            if (scheduler) {
                return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
                    arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
                });
            }
            else {
                for (var i = 0; i < length && !subscriber.closed; i++) {
                    subscriber.next(arrayLike[i]);
                }
                subscriber.complete();
            }
        };
        return ArrayLikeObservable;
    }(Observable_1$16.Observable));
    var ArrayLikeObservable_2 = ArrayLikeObservable;
    var ArrayLikeObservable_1$1 = {
        ArrayLikeObservable: ArrayLikeObservable_2
    };
    var Observable_1$17 = Observable_1;
    var Notification = (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            switch (this.kind) {
                case 'N':
                    return observer.next && observer.next(this.value);
                case 'E':
                    return observer.error && observer.error(this.error);
                case 'C':
                    return observer.complete && observer.complete();
            }
        };
        Notification.prototype.do = function (next, error, complete) {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return next && next(this.value);
                case 'E':
                    return error && error(this.error);
                case 'C':
                    return complete && complete();
            }
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            if (nextOrObserver && typeof nextOrObserver.next === 'function') {
                return this.observe(nextOrObserver);
            }
            else {
                return this.do(nextOrObserver, error, complete);
            }
        };
        Notification.prototype.toObservable = function () {
            var kind = this.kind;
            switch (kind) {
                case 'N':
                    return Observable_1$17.Observable.of(this.value);
                case 'E':
                    return Observable_1$17.Observable.throw(this.error);
                case 'C':
                    return Observable_1$17.Observable.empty();
            }
            throw new Error('unexpected notification kind value');
        };
        Notification.createNext = function (value) {
            if (typeof value !== 'undefined') {
                return new Notification('N', value);
            }
            return this.undefinedValueNotification;
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return this.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        Notification.undefinedValueNotification = new Notification('N', undefined);
        return Notification;
    }());
    var Notification_2 = Notification;
    var Notification_1$1 = {
        Notification: Notification_2
    };
    var __extends$31 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$9 = Subscriber_1$1;
    var Notification_1 = Notification_1$1;
    function observeOn(scheduler, delay) {
        if (delay === void 0) {
            delay = 0;
        }
        return this.lift(new ObserveOnOperator(scheduler, delay));
    }
    var observeOn_2 = observeOn;
    var ObserveOnOperator = (function () {
        function ObserveOnOperator(scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
        };
        return ObserveOnOperator;
    }());
    var ObserveOnOperator_1 = ObserveOnOperator;
    var ObserveOnSubscriber = (function (_super) {
        __extends$31(ObserveOnSubscriber, _super);
        function ObserveOnSubscriber(destination, scheduler, delay) {
            if (delay === void 0) {
                delay = 0;
            }
            _super.call(this, destination);
            this.scheduler = scheduler;
            this.delay = delay;
        }
        ObserveOnSubscriber.dispatch = function (arg) {
            var notification = arg.notification, destination = arg.destination;
            notification.observe(destination);
        };
        ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
            this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
        };
        ObserveOnSubscriber.prototype._next = function (value) {
            this.scheduleMessage(Notification_1.Notification.createNext(value));
        };
        ObserveOnSubscriber.prototype._error = function (err) {
            this.scheduleMessage(Notification_1.Notification.createError(err));
        };
        ObserveOnSubscriber.prototype._complete = function () {
            this.scheduleMessage(Notification_1.Notification.createComplete());
        };
        return ObserveOnSubscriber;
    }(Subscriber_1$9.Subscriber));
    var ObserveOnSubscriber_1 = ObserveOnSubscriber;
    var ObserveOnMessage = (function () {
        function ObserveOnMessage(notification, destination) {
            this.notification = notification;
            this.destination = destination;
        }
        return ObserveOnMessage;
    }());
    var ObserveOnMessage_1 = ObserveOnMessage;
    var observeOn_1$1 = {
        observeOn: observeOn_2,
        ObserveOnOperator: ObserveOnOperator_1,
        ObserveOnSubscriber: ObserveOnSubscriber_1,
        ObserveOnMessage: ObserveOnMessage_1
    };
    var __extends$28 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var isArray_1$4 = isArray;
    var isPromise_1$3 = isPromise_1$1;
    var PromiseObservable_1$3 = PromiseObservable_1$1;
    var IteratorObservable_1 = IteratorObservable_1$1;
    var ArrayObservable_1$3 = ArrayObservable_1$1;
    var ArrayLikeObservable_1 = ArrayLikeObservable_1$1;
    var iterator_1$1 = iterator;
    var Observable_1$14 = Observable_1;
    var observeOn_1 = observeOn_1$1;
    var observable_1$2 = observable;
    var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
    var FromObservable = (function (_super) {
        __extends$28(FromObservable, _super);
        function FromObservable(ish, scheduler) {
            _super.call(this, null);
            this.ish = ish;
            this.scheduler = scheduler;
        }
        FromObservable.create = function (ish, scheduler) {
            if (ish != null) {
                if (typeof ish[observable_1$2.$$observable] === 'function') {
                    if (ish instanceof Observable_1$14.Observable && !scheduler) {
                        return ish;
                    }
                    return new FromObservable(ish, scheduler);
                }
                else if (isArray_1$4.isArray(ish)) {
                    return new ArrayObservable_1$3.ArrayObservable(ish, scheduler);
                }
                else if (isPromise_1$3.isPromise(ish)) {
                    return new PromiseObservable_1$3.PromiseObservable(ish, scheduler);
                }
                else if (typeof ish[iterator_1$1.$$iterator] === 'function' || typeof ish === 'string') {
                    return new IteratorObservable_1.IteratorObservable(ish, scheduler);
                }
                else if (isArrayLike(ish)) {
                    return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
                }
            }
            throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
        };
        FromObservable.prototype._subscribe = function (subscriber) {
            var ish = this.ish;
            var scheduler = this.scheduler;
            if (scheduler == null) {
                return ish[observable_1$2.$$observable]().subscribe(subscriber);
            }
            else {
                return ish[observable_1$2.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
            }
        };
        return FromObservable;
    }(Observable_1$14.Observable));
    var FromObservable_2 = FromObservable;
    var FromObservable_1$1 = {
        FromObservable: FromObservable_2
    };
    var FromObservable_1 = FromObservable_1$1;
    var from_1 = FromObservable_1.FromObservable.create;
    var ArrayObservable_1$4 = ArrayObservable_1$1;
    var of_1 = ArrayObservable_1$4.ArrayObservable.of;
    var __extends$32 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var subscribeToResult_1$4 = subscribeToResult_1$1;
    var OuterSubscriber_1$4 = OuterSubscriber_1$1;
    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) {
            concurrent = Number.POSITIVE_INFINITY;
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
            resultSelector = null;
        }
        return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
    }
    var mergeMap_2 = mergeMap;
    var MergeMapOperator = (function () {
        function MergeMapOperator(project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
        }
        MergeMapOperator.prototype.call = function (observer, source) {
            return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
        };
        return MergeMapOperator;
    }());
    var MergeMapOperator_1 = MergeMapOperator;
    var MergeMapSubscriber = (function (_super) {
        __extends$32(MergeMapSubscriber, _super);
        function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
            if (concurrent === void 0) {
                concurrent = Number.POSITIVE_INFINITY;
            }
            _super.call(this, destination);
            this.project = project;
            this.resultSelector = resultSelector;
            this.concurrent = concurrent;
            this.hasCompleted = false;
            this.buffer = [];
            this.active = 0;
            this.index = 0;
        }
        MergeMapSubscriber.prototype._next = function (value) {
            if (this.active < this.concurrent) {
                this._tryNext(value);
            }
            else {
                this.buffer.push(value);
            }
        };
        MergeMapSubscriber.prototype._tryNext = function (value) {
            var result;
            var index = this.index++;
            try {
                result = this.project(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.active++;
            this._innerSub(result, value, index);
        };
        MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
            this.add(subscribeToResult_1$4.subscribeToResult(this, ish, value, index));
        };
        MergeMapSubscriber.prototype._complete = function () {
            this.hasCompleted = true;
            if (this.active === 0 && this.buffer.length === 0) {
                this.destination.complete();
            }
        };
        MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
            if (this.resultSelector) {
                this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            else {
                this.destination.next(innerValue);
            }
        };
        MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
            var result;
            try {
                result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.destination.next(result);
        };
        MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
            var buffer = this.buffer;
            this.remove(innerSub);
            this.active--;
            if (buffer.length > 0) {
                this._next(buffer.shift());
            }
            else if (this.active === 0 && this.hasCompleted) {
                this.destination.complete();
            }
        };
        return MergeMapSubscriber;
    }(OuterSubscriber_1$4.OuterSubscriber));
    var MergeMapSubscriber_1 = MergeMapSubscriber;
    var mergeMap_1$1 = {
        mergeMap: mergeMap_2,
        MergeMapOperator: MergeMapOperator_1,
        MergeMapSubscriber: MergeMapSubscriber_1
    };
    var mergeMap_1 = mergeMap_1$1;
    function concatMap(project, resultSelector) {
        return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
    }
    var concatMap_2 = concatMap;
    var __extends$33 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$10 = Subscriber_1$1;
    function every(predicate, thisArg) {
        return this.lift(new EveryOperator(predicate, thisArg, this));
    }
    var every_2 = every;
    var EveryOperator = (function () {
        function EveryOperator(predicate, thisArg, source) {
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
        }
        EveryOperator.prototype.call = function (observer, source) {
            return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
        };
        return EveryOperator;
    }());
    var EverySubscriber = (function (_super) {
        __extends$33(EverySubscriber, _super);
        function EverySubscriber(destination, predicate, thisArg, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.source = source;
            this.index = 0;
            this.thisArg = thisArg || this;
        }
        EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
            this.destination.next(everyValueMatch);
            this.destination.complete();
        };
        EverySubscriber.prototype._next = function (value) {
            var result = false;
            try {
                result = this.predicate.call(this.thisArg, value, this.index++, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (!result) {
                this.notifyComplete(false);
            }
        };
        EverySubscriber.prototype._complete = function () {
            this.notifyComplete(true);
        };
        return EverySubscriber;
    }(Subscriber_1$10.Subscriber));
    var __extends$35 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var EmptyError = (function (_super) {
        __extends$35(EmptyError, _super);
        function EmptyError() {
            var err = _super.call(this, 'no elements in sequence');
            this.name = err.name = 'EmptyError';
            this.stack = err.stack;
            this.message = err.message;
        }
        return EmptyError;
    }(Error));
    var EmptyError_2 = EmptyError;
    var EmptyError_1$1 = {
        EmptyError: EmptyError_2
    };
    var __extends$34 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$11 = Subscriber_1$1;
    var EmptyError_1 = EmptyError_1$1;
    function first(predicate, resultSelector, defaultValue) {
        return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
    }
    var first_2 = first;
    var FirstOperator = (function () {
        function FirstOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        FirstOperator.prototype.call = function (observer, source) {
            return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return FirstOperator;
    }());
    var FirstSubscriber = (function (_super) {
        __extends$34(FirstSubscriber, _super);
        function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.index = 0;
            this.hasCompleted = false;
            this._emitted = false;
        }
        FirstSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            }
            else {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this._emit(value, index);
            }
        };
        FirstSubscriber.prototype._emit = function (value, index) {
            if (this.resultSelector) {
                this._tryResultSelector(value, index);
                return;
            }
            this._emitFinal(value);
        };
        FirstSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this._emitFinal(result);
        };
        FirstSubscriber.prototype._emitFinal = function (value) {
            var destination = this.destination;
            if (!this._emitted) {
                this._emitted = true;
                destination.next(value);
                destination.complete();
                this.hasCompleted = true;
            }
        };
        FirstSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
                destination.next(this.defaultValue);
                destination.complete();
            }
            else if (!this.hasCompleted) {
                destination.error(new EmptyError_1.EmptyError);
            }
        };
        return FirstSubscriber;
    }(Subscriber_1$11.Subscriber));
    var __extends$36 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$12 = Subscriber_1$1;
    function reduce(accumulator, seed) {
        var hasSeed = false;
        if (arguments.length >= 2) {
            hasSeed = true;
        }
        return this.lift(new ReduceOperator(accumulator, seed, hasSeed));
    }
    var reduce_2 = reduce;
    var ReduceOperator = (function () {
        function ReduceOperator(accumulator, seed, hasSeed) {
            if (hasSeed === void 0) {
                hasSeed = false;
            }
            this.accumulator = accumulator;
            this.seed = seed;
            this.hasSeed = hasSeed;
        }
        ReduceOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
        };
        return ReduceOperator;
    }());
    var ReduceSubscriber = (function (_super) {
        __extends$36(ReduceSubscriber, _super);
        function ReduceSubscriber(destination, accumulator, seed, hasSeed) {
            _super.call(this, destination);
            this.accumulator = accumulator;
            this.hasSeed = hasSeed;
            this.hasValue = false;
            this.acc = seed;
        }
        ReduceSubscriber.prototype._next = function (value) {
            if (this.hasValue || (this.hasValue = this.hasSeed)) {
                this._tryReduce(value);
            }
            else {
                this.acc = value;
                this.hasValue = true;
            }
        };
        ReduceSubscriber.prototype._tryReduce = function (value) {
            var result;
            try {
                result = this.accumulator(this.acc, value);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.acc = result;
        };
        ReduceSubscriber.prototype._complete = function () {
            if (this.hasValue || this.hasSeed) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        };
        return ReduceSubscriber;
    }(Subscriber_1$12.Subscriber));
    var __extends$37 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var OuterSubscriber_1$5 = OuterSubscriber_1$1;
    var subscribeToResult_1$5 = subscribeToResult_1$1;
    function _catch(selector) {
        var operator = new CatchOperator(selector);
        var caught = this.lift(operator);
        return (operator.caught = caught);
    }
    var _catch_2 = _catch;
    var CatchOperator = (function () {
        function CatchOperator(selector) {
            this.selector = selector;
        }
        CatchOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
        };
        return CatchOperator;
    }());
    var CatchSubscriber = (function (_super) {
        __extends$37(CatchSubscriber, _super);
        function CatchSubscriber(destination, selector, caught) {
            _super.call(this, destination);
            this.selector = selector;
            this.caught = caught;
        }
        CatchSubscriber.prototype.error = function (err) {
            if (!this.isStopped) {
                var result = void 0;
                try {
                    result = this.selector(err, this.caught);
                }
                catch (err) {
                    this.destination.error(err);
                    return;
                }
                this.unsubscribe();
                this.destination.remove(this);
                subscribeToResult_1$5.subscribeToResult(this, result);
            }
        };
        return CatchSubscriber;
    }(OuterSubscriber_1$5.OuterSubscriber));
    var mergeAll_1$3 = mergeAll_1$1;
    function concatAll() {
        return this.lift(new mergeAll_1$3.MergeAllOperator(1));
    }
    var concatAll_2 = concatAll;
    var __extends$38 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$13 = Subscriber_1$1;
    var EmptyError_1$3 = EmptyError_1$1;
    function last(predicate, resultSelector, defaultValue) {
        return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
    }
    var last_2 = last;
    var LastOperator = (function () {
        function LastOperator(predicate, resultSelector, defaultValue, source) {
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
        }
        LastOperator.prototype.call = function (observer, source) {
            return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
        };
        return LastOperator;
    }());
    var LastSubscriber = (function (_super) {
        __extends$38(LastSubscriber, _super);
        function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.resultSelector = resultSelector;
            this.defaultValue = defaultValue;
            this.source = source;
            this.hasValue = false;
            this.index = 0;
            if (typeof defaultValue !== 'undefined') {
                this.lastValue = defaultValue;
                this.hasValue = true;
            }
        }
        LastSubscriber.prototype._next = function (value) {
            var index = this.index++;
            if (this.predicate) {
                this._tryPredicate(value, index);
            }
            else {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryPredicate = function (value, index) {
            var result;
            try {
                result = this.predicate(value, index, this.source);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                if (this.resultSelector) {
                    this._tryResultSelector(value, index);
                    return;
                }
                this.lastValue = value;
                this.hasValue = true;
            }
        };
        LastSubscriber.prototype._tryResultSelector = function (value, index) {
            var result;
            try {
                result = this.resultSelector(value, index);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            this.lastValue = result;
            this.hasValue = true;
        };
        LastSubscriber.prototype._complete = function () {
            var destination = this.destination;
            if (this.hasValue) {
                destination.next(this.lastValue);
                destination.complete();
            }
            else {
                destination.error(new EmptyError_1$3.EmptyError);
            }
        };
        return LastSubscriber;
    }(Subscriber_1$13.Subscriber));
    var __extends$39 = (commonjsGlobal && commonjsGlobal.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var Subscriber_1$14 = Subscriber_1$1;
    function filter(predicate, thisArg) {
        return this.lift(new FilterOperator(predicate, thisArg));
    }
    var filter_2 = filter;
    var FilterOperator = (function () {
        function FilterOperator(predicate, thisArg) {
            this.predicate = predicate;
            this.thisArg = thisArg;
        }
        FilterOperator.prototype.call = function (subscriber, source) {
            return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
        };
        return FilterOperator;
    }());
    var FilterSubscriber = (function (_super) {
        __extends$39(FilterSubscriber, _super);
        function FilterSubscriber(destination, predicate, thisArg) {
            _super.call(this, destination);
            this.predicate = predicate;
            this.thisArg = thisArg;
            this.count = 0;
            this.predicate = predicate;
        }
        FilterSubscriber.prototype._next = function (value) {
            var result;
            try {
                result = this.predicate.call(this.thisArg, value, this.count++);
            }
            catch (err) {
                this.destination.error(err);
                return;
            }
            if (result) {
                this.destination.next(value);
            }
        };
        return FilterSubscriber;
    }(Subscriber_1$14.Subscriber));
    var __extends$26 = (undefined && undefined.__extends) || function (d, b) {
        for (var p in b)
            if (b.hasOwnProperty(p))
                d[p] = b[p];
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    var NavigationStart = (function () {
        function NavigationStart(id, url) {
            this.id = id;
            this.url = url;
        }
        NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
        return NavigationStart;
    }());
    var NavigationEnd = (function () {
        function NavigationEnd(id, url, urlAfterRedirects) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
        }
        NavigationEnd.prototype.toString = function () {
            return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
        };
        return NavigationEnd;
    }());
    var NavigationCancel = (function () {
        function NavigationCancel(id, url, reason) {
            this.id = id;
            this.url = url;
            this.reason = reason;
        }
        NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
        return NavigationCancel;
    }());
    var NavigationError = (function () {
        function NavigationError(id, url, error) {
            this.id = id;
            this.url = url;
            this.error = error;
        }
        NavigationError.prototype.toString = function () {
            return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
        };
        return NavigationError;
    }());
    var RoutesRecognized = (function () {
        function RoutesRecognized(id, url, urlAfterRedirects, state$$1) {
            this.id = id;
            this.url = url;
            this.urlAfterRedirects = urlAfterRedirects;
            this.state = state$$1;
        }
        RoutesRecognized.prototype.toString = function () {
            return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
        };
        return RoutesRecognized;
    }());
    var RouteConfigLoadStart = (function () {
        function RouteConfigLoadStart(route) {
            this.route = route;
        }
        RouteConfigLoadStart.prototype.toString = function () { return "RouteConfigLoadStart(path: " + this.route.path + ")"; };
        return RouteConfigLoadStart;
    }());
    var RouteConfigLoadEnd = (function () {
        function RouteConfigLoadEnd(route) {
            this.route = route;
        }
        RouteConfigLoadEnd.prototype.toString = function () { return "RouteConfigLoadEnd(path: " + this.route.path + ")"; };
        return RouteConfigLoadEnd;
    }());
    var PRIMARY_OUTLET = 'primary';
    var ParamsAsMap = (function () {
        function ParamsAsMap(params) {
            this.params = params || {};
        }
        ParamsAsMap.prototype.has = function (name) { return this.params.hasOwnProperty(name); };
        ParamsAsMap.prototype.get = function (name) {
            if (this.has(name)) {
                var v = this.params[name];
                return Array.isArray(v) ? v[0] : v;
            }
            return null;
        };
        ParamsAsMap.prototype.getAll = function (name) {
            if (this.has(name)) {
                var v = this.params[name];
                return Array.isArray(v) ? v : [v];
            }
            return [];
        };
        Object.defineProperty(ParamsAsMap.prototype, "keys", {
            get: function () { return Object.keys(this.params); },
            enumerable: true,
            configurable: true
        });
        return ParamsAsMap;
    }());
    function convertToParamMap(params) {
        return new ParamsAsMap(params);
    }
    var NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';
    function navigationCancelingError(message) {
        var error = Error('NavigationCancelingError: ' + message);
        ((error))[NAVIGATION_CANCELING_ERROR] = true;
        return error;
    }
    function isNavigationCancelingError(error) {
        return ((error))[NAVIGATION_CANCELING_ERROR];
    }
    function defaultUrlMatcher(segments, segmentGroup, route) {
        var path = route.path;
        var parts = path.split('/');
        var posParams = {};
        var consumed = [];
        var currentIndex = 0;
        for (var i = 0; i < parts.length; ++i) {
            if (currentIndex >= segments.length)
                return null;
            var current = segments[currentIndex];
            var p = parts[i];
            var isPosParam = p.startsWith(':');
            if (!isPosParam && p !== current.path)
                return null;
            if (isPosParam) {
                posParams[p.substring(1)] = current;
            }
            consumed.push(current);
            currentIndex++;
        }
        if (route.pathMatch === 'full' &&
            (segmentGroup.hasChildren() || currentIndex < segments.length)) {
            return null;
        }
        else {
            return { consumed: consumed, posParams: posParams };
        }
    }
    function shallowEqualArrays(a, b) {
        if (a.length !== b.length)
            return false;
        for (var i = 0; i < a.length; ++i) {
            if (!shallowEqual(a[i], b[i]))
                return false;
        }
        return true;
    }
    function shallowEqual(a, b) {
        var k1 = Object.keys(a);
        var k2 = Object.keys(b);
        if (k1.length != k2.length) {
            return false;
        }
        var key;
        for (var i = 0; i < k1.length; i++) {
            key = k1[i];
            if (a[key] !== b[key]) {
                return false;
            }
        }
        return true;
    }
    function flatten$1(arr) {
        return Array.prototype.concat.apply([], arr);
    }
    function last$1(a) {
        return a.length > 0 ? a[a.length - 1] : null;
    }
    function forEach(map$$1, callback) {
        for (var prop in map$$1) {
            if (map$$1.hasOwnProperty(prop)) {
                callback(map$$1[prop], prop);
            }
        }
    }
    function waitForMap(obj, fn) {
        var waitFor = [];
        var res = {};
        forEach(obj, function (a, k) {
            if (k === PRIMARY_OUTLET) {
                waitFor.push(map_2.call(fn(k, a), function (_) {
                    res[k] = _;
                    return _;
                }));
            }
        });
        forEach(obj, function (a, k) {
            if (k !== PRIMARY_OUTLET) {
                waitFor.push(map_2.call(fn(k, a), function (_) {
                    res[k] = _;
                    return _;
                }));
            }
        });
        if (waitFor.length > 0) {
            var concatted$ = concatAll_2.call(of_1.apply(void 0, waitFor));
            var last$ = last_2.call(concatted$);
            return map_2.call(last$, function () { return res; });
        }
        return of_1(res);
    }
    function andObservables(observables) {
        var merged$ = mergeAll_2.call(observables);
        return every_2.call(merged$, function (result) { return result === true; });
    }
    function wrapIntoObservable(value) {
        if (isObservable(value)) {
            return value;
        }
        if (isPromise(value)) {
            return fromPromise_1(value);
        }
        return of_1(value);
    }
    var ROUTES = new InjectionToken('ROUTES');
    var LoadedRouterConfig = (function () {
        function LoadedRouterConfig(routes, module) {
            this.routes = routes;
            this.module = module;
        }
        return LoadedRouterConfig;
    }());
    var RouterConfigLoader = (function () {
        function RouterConfigLoader(loader, compiler, onLoadStartListener, onLoadEndListener) {
            this.loader = loader;
            this.compiler = compiler;
            this.onLoadStartListener = onLoadStartListener;
            this.onLoadEndListener = onLoadEndListener;
        }
        RouterConfigLoader.prototype.load = function (parentInjector, route) {
            var _this = this;
            if (this.onLoadStartListener) {
                this.onLoadStartListener(route);
            }
            var moduleFactory$ = this.loadModuleFactory(route.loadChildren);
            return map_2.call(moduleFactory$, function (factory) {
                if (_this.onLoadEndListener) {
                    _this.onLoadEndListener(route);
                }
                var module = factory.create(parentInjector);
                return new LoadedRouterConfig(flatten$1(module.injector.get(ROUTES)), module);
            });
        };
        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
            var _this = this;
            if (typeof loadChildren === 'string') {
                return fromPromise_1(this.loader.load(loadChildren));
            }
            else {
                return mergeMap_2.call(wrapIntoObservable(loadChildren()), function (t) {
                    if (t instanceof NgModuleFactory) {
                        return of_1(t);
                    }
                    else {
                        return fromPromise_1(_this.compiler.compileModuleAsync(t));
                    }
                });
            }
        };
        return RouterConfigLoader;
    }());
    function createEmptyUrlTree() {
        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
    }
    function containsTree(container, containee, exact) {
        if (exact) {
            return equalQueryParams(container.queryParams, containee.queryParams) &&
                equalSegmentGroups(container.root, containee.root);
        }
        return containsQueryParams(container.queryParams, containee.queryParams) &&
            containsSegmentGroup(container.root, containee.root);
    }
    function equalQueryParams(container, containee) {
        return shallowEqual(container, containee);
    }
    function equalSegmentGroups(container, containee) {
        if (!equalPath(container.segments, containee.segments))
            return false;
        if (container.numberOfChildren !== containee.numberOfChildren)
            return false;
        for (var c in containee.children) {
            if (!container.children[c])
                return false;
            if (!equalSegmentGroups(container.children[c], containee.children[c]))
                return false;
        }
        return true;
    }
    function containsQueryParams(container, containee) {
        return Object.keys(containee).length <= Object.keys(container).length &&
            Object.keys(containee).every(function (key) { return containee[key] === container[key]; });
    }
    function containsSegmentGroup(container, containee) {
        return containsSegmentGroupHelper(container, containee, containee.segments);
    }
    function containsSegmentGroupHelper(container, containee, containeePaths) {
        if (container.segments.length > containeePaths.length) {
            var current = container.segments.slice(0, containeePaths.length);
            if (!equalPath(current, containeePaths))
                return false;
            if (containee.hasChildren())
                return false;
            return true;
        }
        else if (container.segments.length === containeePaths.length) {
            if (!equalPath(container.segments, containeePaths))
                return false;
            for (var c in containee.children) {
                if (!container.children[c])
                    return false;
                if (!containsSegmentGroup(container.children[c], containee.children[c]))
                    return false;
            }
            return true;
        }
        else {
            var current = containeePaths.slice(0, container.segments.length);
            var next = containeePaths.slice(container.segments.length);
            if (!equalPath(container.segments, current))
                return false;
            if (!container.children[PRIMARY_OUTLET])
                return false;
            return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
        }
    }
    var UrlTree = (function () {
        function UrlTree(root, queryParams, fragment) {
            this.root = root;
            this.queryParams = queryParams;
            this.fragment = fragment;
        }
        Object.defineProperty(UrlTree.prototype, "queryParamMap", {
            get: function () {
                if (!this._queryParamMap) {
                    this._queryParamMap = convertToParamMap(this.queryParams);
                }
                return this._queryParamMap;
            },
            enumerable: true,
            configurable: true
        });
        UrlTree.prototype.toString = function () { return DEFAULT_SERIALIZER.serialize(this); };
        return UrlTree;
    }());
    var UrlSegmentGroup = (function () {
        function UrlSegmentGroup(segments, children) {
            var _this = this;
            this.segments = segments;
            this.children = children;
            this.parent = null;
            forEach(children, function (v, k) { return v.parent = _this; });
        }
        UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };
        Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
            get: function () { return Object.keys(this.children).length; },
            enumerable: true,
            configurable: true
        });
        UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };
        return UrlSegmentGroup;
    }());
    var UrlSegment = (function () {
        function UrlSegment(path, parameters) {
            this.path = path;
            this.parameters = parameters;
        }
        Object.defineProperty(UrlSegment.prototype, "parameterMap", {
            get: function () {
                if (!this._parameterMap) {
                    this._parameterMap = convertToParamMap(this.parameters);
                }
                return this._parameterMap;
            },
            enumerable: true,
            configurable: true
        });
        UrlSegment.prototype.toString = function () { return serializePath(this); };
        return UrlSegment;
    }());
    function equalSegments(a, b) {
        if (a.length !== b.length)
            return false;
        for (var i = 0; i < a.length; ++i) {
            if (a[i].path !== b[i].path)
                return false;
            if (!shallowEqual(a[i].parameters, b[i].parameters))
                return false;
        }
        return true;
    }
    function equalPath(a, b) {
        if (a.length !== b.length)
            return false;
        for (var i = 0; i < a.length; ++i) {
            if (a[i].path !== b[i].path)
                return false;
        }
        return true;
    }
    function mapChildrenIntoArray(segment, fn) {
        var res = [];
        forEach(segment.children, function (child, childOutlet) {
            if (childOutlet === PRIMARY_OUTLET) {
                res = res.concat(fn(child, childOutlet));
            }
        });
        forEach(segment.children, function (child, childOutlet) {
            if (childOutlet !== PRIMARY_OUTLET) {
                res = res.concat(fn(child, childOutlet));
            }
        });
        return res;
    }
    var UrlSerializer = (function () {
        function UrlSerializer() {
        }
        UrlSerializer.prototype.parse = function (url) { };
        UrlSerializer.prototype.serialize = function (tree) { };
        return UrlSerializer;
    }());
    var DefaultUrlSerializer = (function () {
        function DefaultUrlSerializer() {
        }
        DefaultUrlSerializer.prototype.parse = function (url) {
            var p = new UrlParser(url);
            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
        };
        DefaultUrlSerializer.prototype.serialize = function (tree) {
            var segment = "/" + serializeSegment(tree.root, true);
            var query = serializeQueryParams(tree.queryParams);
            var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
            return "" + segment + query + fragment;
        };
        return DefaultUrlSerializer;
    }());
    var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
    function serializePaths(segment) {
        return segment.segments.map(function (p) { return serializePath(p); }).join('/');
    }
    function serializeSegment(segment, root) {
        if (segment.hasChildren() && root) {
            var primary = segment.children[PRIMARY_OUTLET] ?
                serializeSegment(segment.children[PRIMARY_OUTLET], false) :
                '';
            var children_1 = [];
            forEach(segment.children, function (v, k) {
                if (k !== PRIMARY_OUTLET) {
                    children_1.push(k + ":" + serializeSegment(v, false));
                }
            });
            if (children_1.length > 0) {
                return primary + "(" + children_1.join('//') + ")";
            }
            else {
                return "" + primary;
            }
        }
        else if (segment.hasChildren() && !root) {
            var children = mapChildrenIntoArray(segment, function (v, k) {
                if (k === PRIMARY_OUTLET) {
                    return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
                }
                else {
                    return [k + ":" + serializeSegment(v, false)];
                }
            });
            return serializePaths(segment) + "/(" + children.join('//') + ")";
        }
        else {
            return serializePaths(segment);
        }
    }
    function encode(s) {
        return encodeURIComponent(s);
    }
    function decode(s) {
        return decodeURIComponent(s);
    }
    function serializePath(path) {
        return "" + encode(path.path) + serializeParams(path.parameters);
    }
    function serializeParams(params) {
        return Object.keys(params).map(function (key) { return ";" + encode(key) + "=" + encode(params[key]); }).join('');
    }
    function serializeQueryParams(params) {
        var strParams = Object.keys(params).map(function (name) {
            var value = params[name];
            return Array.isArray(value) ? value.map(function (v) { return encode(name) + "=" + encode(v); }).join('&') :
                encode(name) + "=" + encode(value);
        });
        return strParams.length ? "?" + strParams.join("&") : '';
    }
    var SEGMENT_RE = /^[^\/()?;=&#]+/;
    function matchSegments(str) {
        SEGMENT_RE.lastIndex = 0;
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
    }
    var QUERY_PARAM_RE = /^[^=?&#]+/;
    function matchQueryParams(str) {
        QUERY_PARAM_RE.lastIndex = 0;
        var match = str.match(SEGMENT_RE);
        return match ? match[0] : '';
    }
    var QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
    function matchUrlQueryParamValue(str) {
        QUERY_PARAM_VALUE_RE.lastIndex = 0;
        var match = str.match(QUERY_PARAM_VALUE_RE);
        return match ? match[0] : '';
    }
    var UrlParser = (function () {
        function UrlParser(url) {
            this.url = url;
            this.remaining = url;
        }
        UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
        UrlParser.prototype.capture = function (str) {
            if (!this.remaining.startsWith(str)) {
                throw new Error("Expected \"" + str + "\".");
            }
            this.remaining = this.remaining.substring(str.length);
        };
        UrlParser.prototype.parseRootSegment = function () {
            if (this.remaining.startsWith('/')) {
                this.capture('/');
            }
            if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
                return new UrlSegmentGroup([], {});
            }
            return new UrlSegmentGroup([], this.parseChildren());
        };
        UrlParser.prototype.parseChildren = function () {
            if (this.remaining.length == 0) {
                return {};
            }
            if (this.peekStartsWith('/')) {
                this.capture('/');
            }
            var paths = [];
            if (!this.peekStartsWith('(')) {
                paths.push(this.parseSegments());
            }
            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
                this.capture('/');
                paths.push(this.parseSegments());
            }
            var children = {};
            if (this.peekStartsWith('/(')) {
                this.capture('/');
                children = this.parseParens(true);
            }
            var res = {};
            if (this.peekStartsWith('(')) {
                res = this.parseParens(false);
            }
            if (paths.length > 0 || Object.keys(children).length > 0) {
                res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
            }
            return res;
        };
        UrlParser.prototype.parseSegments = function () {
            var path = matchSegments(this.remaining);
            if (path === '' && this.peekStartsWith(';')) {
                throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
            }
            this.capture(path);
            var matrixParams = {};
            if (this.peekStartsWith(';')) {
                matrixParams = this.parseMatrixParams();
            }
            return new UrlSegment(decode(path), matrixParams);
        };
        UrlParser.prototype.parseQueryParams = function () {
            var params = {};
            if (this.peekStartsWith('?')) {
                this.capture('?');
                this.parseQueryParam(params);
                while (this.remaining.length > 0 && this.peekStartsWith('&')) {
                    this.capture('&');
                    this.parseQueryParam(params);
                }
            }
            return params;
        };
        UrlParser.prototype.parseFragment = function () {
            if (this.peekStartsWith('#')) {
                return decodeURI(this.remaining.substring(1));
            }
            return null;
        };
        UrlParser.prototype.parseMatrixParams = function () {
            var params = {};
            while (this.remaining.length > 0 && this.peekStartsWith(';')) {
                this.capture(';');
                this.parseParam(params);
            }
            return params;
        };
        UrlParser.prototype.parseParam = function (params) {
            var key = matchSegments(this.remaining);
            if (!key) {
                return;
            }
            this.capture(key);
            var value = '';
            if (this.peekStartsWith('=')) {
                this.capture('=');
                var valueMatch = matchSegments(this.remaining);
                if (valueMatch) {
                    value = valueMatch;
                    this.capture(value);
                }
            }
            params[decode(key)] = decode(value);
        };
        UrlParser.prototype.parseQueryParam = function (params) {
            var key = matchQueryParams(this.remaining);
            if (!key) {
                return;
            }
            this.capture(key);
            var value = '';
            if (this.peekStartsWith('=')) {
                this.capture('=');
                var valueMatch = matchUrlQueryParamValue(this.remaining);
                if (valueMatch) {
                    value = valueMatch;
                    this.capture(value);
                }
            }
            var decodedKey = decode(key);
            var decodedVal = decode(value);
            if (params.hasOwnProperty(decodedKey)) {
                var currentVal = params[decodedKey];
                if (!Array.isArray(currentVal)) {
                    currentVal = [currentVal];
                    params[decodedKey] = currentVal;
                }
                currentVal.push(decodedVal);
            }
            else {
                params[decodedKey] = decodedVal;
            }
        };
        UrlParser.prototype.parseParens = function (allowPrimary) {
            var segments = {};
            this.capture('(');
            while (!this.peekStartsWith(')') && this.remaining.length > 0) {
                var path = matchSegments(this.remaining);
                var next = this.remaining[path.length];
                if (next !== '/' && next !== ')' && next !== ';') {
                    throw new Error("Cannot parse url '" + this.url + "'");
                }
                var outletName = void 0;
                if (path.indexOf(':') > -1) {
                    outletName = path.substr(0, path.indexOf(':'));
                    this.capture(outletName);
                    this.capture(':');
                }
                else if (allowPrimary) {
                    outletName = PRIMARY_OUTLET;
                }
                var children = this.parseChildren();
                segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :
                    new UrlSegmentGroup([], children);
                if (this.peekStartsWith('//')) {
                    this.capture('//');
                }
            }
            this.capture(')');
            return segments;
        };
        return UrlParser;
    }());
    var __assign$1$1 = (undefined && undefined.__assign) || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    var NoMatch = (function () {
        function NoMatch(segmentGroup) {
            if (segmentGroup === void 0) {
                segmentGroup = null;
            }
            this.segmentGroup = segmentGroup;
        }
        return NoMatch;
    }());
    var AbsoluteRedirect = (function () {
        function AbsoluteRedirect(urlTree) {
            this.urlTree = urlTree;
        }
        return AbsoluteRedirect;
    }());
    function noMatch(segmentGroup) {
        return new Observable_2(function (obs) { return obs.error(new NoMatch(segmentGroup)); });
    }
    function absoluteRedirect(newTree) {
        return new Observable_2(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });
    }
    function namedOutletsRedirect(redirectTo) {
        return new Observable_2(function (obs) { return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'")); });
    }
    function canLoadFails(route) {
        return new Observable_2(function (obs) { return obs.error(navigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false")); });
    }
    function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
        return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
    }
    var ApplyRedirects = (function () {
        function ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
            this.configLoader = configLoader;
            this.urlSerializer = urlSerializer;
            this.urlTree = urlTree;
            this.config = config;
            this.allowRedirects = true;
            this.ngModule = moduleInjector.get(NgModuleRef);
        }
        ApplyRedirects.prototype.apply = function () {
            var _this = this;
            var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);
            var urlTrees$ = map_2.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); });
            return _catch_2.call(urlTrees$, function (e) {
                if (e instanceof AbsoluteRedirect) {
                    _this.allowRedirects = false;
                    return _this.match(e.urlTree);
                }
                if (e instanceof NoMatch) {
                    throw _this.noMatchError(e);
                }
                throw e;
            });
        };
        ApplyRedirects.prototype.match = function (tree) {
            var _this = this;
            var expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
            var mapped$ = map_2.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment); });
            return _catch_2.call(mapped$, function (e) {
                if (e instanceof NoMatch) {
                    throw _this.noMatchError(e);
                }
                throw e;
            });
        };
        ApplyRedirects.prototype.noMatchError = function (e) {
            return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
        };
        ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {
            var root = rootCandidate.segments.length > 0 ?
                new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :
                rootCandidate;
            return new UrlTree(root, queryParams, fragment);
            var _a;
        };
        ApplyRedirects.prototype.expandSegmentGroup = function (ngModule, routes, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
                return map_2.call(this.expandChildren(ngModule, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });
            }
            return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
        };
        ApplyRedirects.prototype.expandChildren = function (ngModule, routes, segmentGroup) {
            var _this = this;
            return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(ngModule, routes, child, childOutlet); });
        };
        ApplyRedirects.prototype.expandSegment = function (ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
            var _this = this;
            var routes$ = of_1.apply(void 0, routes);
            var processedRoutes$ = map_2.call(routes$, function (r) {
                var expanded$ = _this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);
                return _catch_2.call(expanded$, function (e) {
                    if (e instanceof NoMatch) {
                        return of_1(null);
                    }
                    throw e;
                });
            });
            var concattedProcessedRoutes$ = concatAll_2.call(processedRoutes$);
            var first$ = first_2.call(concattedProcessedRoutes$, function (s) { return !!s; });
            return _catch_2.call(first$, function (e, _) {
                if (e instanceof EmptyError_2) {
                    if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                        return of_1(new UrlSegmentGroup([], {}));
                    }
                    throw new NoMatch(segmentGroup);
                }
                throw e;
            });
        };
        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
            return segments.length === 0 && !segmentGroup.children[outlet];
        };
        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
            if (getOutlet$1(route) !== outlet) {
                return noMatch(segmentGroup);
            }
            if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects)) {
                return noMatch(segmentGroup);
            }
            if (route.redirectTo === undefined) {
                return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);
            }
            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
        };
        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
            if (route.path === '**') {
                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
            }
            return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
        };
        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (ngModule, routes, route, outlet) {
            var _this = this;
            var newTree = this.applyRedirectCommands([], route.redirectTo, {});
            if (route.redirectTo.startsWith('/')) {
                return absoluteRedirect(newTree);
            }
            return mergeMap_2.call(this.lineralizeSegments(route, newTree), function (newSegments) {
                var group$$1 = new UrlSegmentGroup(newSegments, {});
                return _this.expandSegment(ngModule, group$$1, routes, newSegments, outlet, false);
            });
        };
        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (ngModule, segmentGroup, routes, route, segments, outlet) {
            var _this = this;
            var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
            if (!matched)
                return noMatch(segmentGroup);
            var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, (positionalParamSegments));
            if (route.redirectTo.startsWith('/')) {
                return absoluteRedirect(newTree);
            }
            return mergeMap_2.call(this.lineralizeSegments(route, newTree), function (newSegments) {
                return _this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
            });
        };
        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (ngModule, rawSegmentGroup, route, segments) {
            var _this = this;
            if (route.path === '**') {
                if (route.loadChildren) {
                    return map_2.call(this.configLoader.load(ngModule.injector, route), function (cfg) {
                        route._loadedConfig = cfg;
                        return new UrlSegmentGroup(segments, {});
                    });
                }
                return of_1(new UrlSegmentGroup(segments, {}));
            }
            var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild;
            if (!matched)
                return noMatch(rawSegmentGroup);
            var rawSlicedSegments = segments.slice(lastChild);
            var childConfig$ = this.getChildConfig(ngModule, route);
            return mergeMap_2.call(childConfig$, function (routerConfig) {
                var childModule = routerConfig.module;
                var childConfig = routerConfig.routes;
                var _a = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
                if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                    var expanded$_1 = _this.expandChildren(childModule, childConfig, segmentGroup);
                    return map_2.call(expanded$_1, function (children) { return new UrlSegmentGroup(consumedSegments, children); });
                }
                if (childConfig.length === 0 && slicedSegments.length === 0) {
                    return of_1(new UrlSegmentGroup(consumedSegments, {}));
                }
                var expanded$ = _this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
                return map_2.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children); });
            });
        };
        ApplyRedirects.prototype.getChildConfig = function (ngModule, route) {
            var _this = this;
            if (route.children) {
                return of_1(new LoadedRouterConfig(route.children, ngModule));
            }
            if (route.loadChildren) {
                if (((route))._loadedConfig !== void 0) {
                    return of_1(((route))._loadedConfig);
                }
                return mergeMap_2.call(runCanLoadGuard(ngModule.injector, route), function (shouldLoad) {
                    if (shouldLoad) {
                        return map_2.call(_this.configLoader.load(ngModule.injector, route), function (cfg) {
                            route._loadedConfig = cfg;
                            return cfg;
                        });
                    }
                    return canLoadFails(route);
                });
            }
            return of_1(new LoadedRouterConfig([], ngModule));
        };
        ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {
            var res = [];
            var c = urlTree.root;
            while (true) {
                res = res.concat(c.segments);
                if (c.numberOfChildren === 0) {
                    return of_1(res);
                }
                if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
                    return namedOutletsRedirect(route.redirectTo);
                }
                c = c.children[PRIMARY_OUTLET];
            }
        };
        ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {
            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
        };
        ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {
            var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
            return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
        };
        ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {
            var res = {};
            forEach(redirectToParams, function (v, k) {
                res[k] = v.startsWith(':') ? actualParams[v.substring(1)] : v;
            });
            return res;
        };
        ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group$$1, segments, posParams) {
            var _this = this;
            var updatedSegments = this.createSegments(redirectTo, group$$1.segments, segments, posParams);
            var children = {};
            forEach(group$$1.children, function (child, name) {
                children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
            });
            return new UrlSegmentGroup(updatedSegments, children);
        };
        ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {
            var _this = this;
            return redirectToSegments.map(function (s) {
                return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :
                    _this.findOrReturn(s, actualSegments);
            });
        };
        ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {
            var pos = posParams[redirectToUrlSegment.path.substring(1)];
            if (!pos)
                throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
            return pos;
        };
        ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {
            var idx = 0;
            for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
                var s = actualSegments_1[_i];
                if (s.path === redirectToUrlSegment.path) {
                    actualSegments.splice(idx);
                    return s;
                }
                idx++;
            }
            return redirectToUrlSegment;
        };
        return ApplyRedirects;
    }());
    function runCanLoadGuard(moduleInjector, route) {
        var canLoad = route.canLoad;
        if (!canLoad || canLoad.length === 0)
            return of_1(true);
        var obs = map_2.call(from_1(canLoad), function (injectionToken) {
            var guard = moduleInjector.get(injectionToken);
            return wrapIntoObservable(guard.canLoad ? guard.canLoad(route) : guard(route));
        });
        return andObservables(obs);
    }
    function match(segmentGroup, route, segments) {
        var noMatch = { matched: false, consumedSegments: ([]), lastChild: 0, positionalParamSegments: {} };
        if (route.path === '') {
            if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
            }
            return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
        var matcher = route.matcher || defaultUrlMatcher;
        var res = matcher(segments, segmentGroup, route);
        if (!res)
            return noMatch;
        return {
            matched: true,
            consumedSegments: res.consumed,
            lastChild: res.consumed.length,
            positionalParamSegments: res.posParams
        };
    }
    function split(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 &&
            containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
            var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
        }
        if (slicedSegments.length === 0 &&
            containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
            var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
        }
        return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
    }
    function mergeTrivialChildren(s) {
        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
            var c = s.children[PRIMARY_OUTLET];
            return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
        }
        return s;
    }
    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var res = {};
        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
            var r = routes_1[_i];
            if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
            }
        }
        return __assign$1$1({}, children, res);
    }
    function createChildrenForEmptySegments(routes, primarySegmentGroup) {
        var res = {};
        res[PRIMARY_OUTLET] = primarySegmentGroup;
        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
            var r = routes_2[_i];
            if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
            }
        }
        return res;
    }
    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes
            .filter(function (r) {
            return emptyPathRedirect(segmentGroup, slicedSegments, r) &&
                getOutlet$1(r) !== PRIMARY_OUTLET;
        })
            .length > 0;
    }
    function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
        return routes.filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r); }).length > 0;
    }
    function emptyPathRedirect(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
            return false;
        }
        return r.path === '' && r.redirectTo !== undefined;
    }
    function getOutlet$1(route) {
        return route.outlet ? route.outlet : PRIMARY_OUTLET;
    }
    function validateConfig(config, parentPath) {
        if (parentPath === void 0) {
            parentPath = '';
        }
        for (var i = 0; i < config.length; i++) {
            var route = config[i];
            var fullPath = getFullPath(parentPath, route);
            validateNode$1(route, fullPath);
        }
    }
    function validateNode$1(route, fullPath) {
        if (!route) {
            throw new Error("\n      Invalid configuration of route '" + fullPath + "': Encountered undefined route.\n      The reason might be an extra comma.\n\n      Example:\n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
        }
        if (Array.isArray(route)) {
            throw new Error("Invalid configuration of route '" + fullPath + "': Array cannot be specified");
        }
        if (!route.component && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
            throw new Error("Invalid configuration of route '" + fullPath + "': a componentless route cannot have a named outlet set");
        }
        if (route.redirectTo && route.children) {
            throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and children cannot be used together");
        }
        if (route.redirectTo && route.loadChildren) {
            throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and loadChildren cannot be used together");
        }
        if (route.children && route.loadChildren) {
            throw new Error("Invalid configuration of route '" + fullPath + "': children and loadChildren cannot be used together");
        }
        if (route.redirectTo && route.component) {
            throw new Error("Invalid configuration of route '" + fullPath + "': redirectTo and component cannot be used together");
        }
        if (route.path && route.matcher) {
            throw new Error("Invalid configuration of route '" + fullPath + "': path and matcher cannot be used together");
        }
        if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
            throw new Error("Invalid configuration of route '" + fullPath + "'. One of the following must be provided: component, redirectTo, children or loadChildren");
        }
        if (route.path === void 0 && route.matcher === void 0) {
            throw new Error("Invalid configuration of route '" + fullPath + "': routes must have either a path or a matcher specified");
        }
        if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
            throw new Error("Invalid configuration of route '" + fullPath + "': path cannot start with a slash");
        }
        if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
            var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
            throw new Error("Invalid configuration of route '{path: \"" + fullPath + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
        }
        if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
            throw new Error("Invalid configuration of route '" + fullPath + "': pathMatch can only be set to 'prefix' or 'full'");
        }
        if (route.children) {
            validateConfig(route.children, fullPath);
        }
    }
    function getFullPath(parentPath, currentRoute) {
        if (!currentRoute) {
            return parentPath;
        }
        if (!parentPath && !currentRoute.path) {
            return '';
        }
        else if (parentPath && !currentRoute.path) {
            return parentPath + "/";
        }
        else if (!parentPath && currentRoute.path) {
            return currentRoute.path;
        }
        else {
            return parentPath + "/" + currentRoute.path;
        }
    }
    var Tree = (function () {
        function Tree(root) {
            this._root = root;
        }
        Object.defineProperty(Tree.prototype, "root", {
            get: function () { return this._root.value; },
            enumerable: true,
            configurable: true
        });
        Tree.prototype.parent = function (t) {
            var p = this.pathFromRoot(t);
            return p.length > 1 ? p[p.length - 2] : null;
        };
        Tree.prototype.children = function (t) {
            var n = findNode(t, this._root);
            return n ? n.children.map(function (t) { return t.value; }) : [];
        };
        Tree.prototype.firstChild = function (t) {
            var n = findNode(t, this._root);
            return n && n.children.length > 0 ? n.children[0].value : null;
        };
        Tree.prototype.siblings = function (t) {
            var p = findPath(t, this._root, []);
            if (p.length < 2)
                return [];
            var c = p[p.length - 2].children.map(function (c) { return c.value; });
            return c.filter(function (cc) { return cc !== t; });
        };
        Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };
        return Tree;
    }());
    function findNode(expected, c) {
        if (expected === c.value)
            return c;
        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
            var cc = _a[_i];
            var r = findNode(expected, cc);
            if (r)
                return r;
        }
        return null;
    }
    function findPath(expected, c, collected) {
        collected.push(c);
        if (expected === c.value)
            return collected;
        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
            var cc = _a[_i];
            var cloned = collected.slice(0);
            var r = findPath(expected, cc, cloned);
            if (r.length > 0)
                return r;
        }
        return [];
    }
    var TreeNode = (function () {
        function TreeNode(value, children) {
            this.value = value;
            this.children = children;
        }
        TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
        return TreeNode;
    }());
    var __assign$2 = (undefined && undefined.__assign) || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    var RouterState = (function (_super) {
        __extends$26(RouterState, _super);
        function RouterState(root, snapshot) {
            var _this = _super.call(this, root) || this;
            _this.snapshot = snapshot;
            setRouterStateSnapshot(_this, root);
            return _this;
        }
        RouterState.prototype.toString = function () { return this.snapshot.toString(); };
        return RouterState;
    }(Tree));
    function createEmptyState(urlTree, rootComponent) {
        var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
        var emptyUrl = new BehaviorSubject_2([new UrlSegment('', {})]);
        var emptyParams = new BehaviorSubject_2({});
        var emptyData = new BehaviorSubject_2({});
        var emptyQueryParams = new BehaviorSubject_2({});
        var fragment = new BehaviorSubject_2('');
        var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
        activated.snapshot = snapshot.root;
        return new RouterState(new TreeNode(activated, []), snapshot);
    }
    function createEmptyStateSnapshot(urlTree, rootComponent) {
        var emptyParams = {};
        var emptyData = {};
        var emptyQueryParams = {};
        var fragment = '';
        var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
        return new RouterStateSnapshot('', new TreeNode(activated, []));
    }
    var ActivatedRoute = (function () {
        function ActivatedRoute(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
            this.url = url;
            this.params = params;
            this.queryParams = queryParams;
            this.fragment = fragment;
            this.data = data;
            this.outlet = outlet;
            this.component = component;
            this._futureSnapshot = futureSnapshot;
        }
        Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
            get: function () { return this._futureSnapshot.routeConfig; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "root", {
            get: function () { return this._routerState.root; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "parent", {
            get: function () { return this._routerState.parent(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
            get: function () { return this._routerState.firstChild(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "children", {
            get: function () { return this._routerState.children(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
            get: function () { return this._routerState.pathFromRoot(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "paramMap", {
            get: function () {
                if (!this._paramMap) {
                    this._paramMap = map_2.call(this.params, function (p) { return convertToParamMap(p); });
                }
                return this._paramMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRoute.prototype, "queryParamMap", {
            get: function () {
                if (!this._queryParamMap) {
                    this._queryParamMap =
                        map_2.call(this.queryParams, function (p) { return convertToParamMap(p); });
                }
                return this._queryParamMap;
            },
            enumerable: true,
            configurable: true
        });
        ActivatedRoute.prototype.toString = function () {
            return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
        };
        return ActivatedRoute;
    }());
    function inheritedParamsDataResolve(route) {
        var pathToRoot = route.pathFromRoot;
        var inhertingStartingFrom = pathToRoot.length - 1;
        while (inhertingStartingFrom >= 1) {
            var current = pathToRoot[inhertingStartingFrom];
            var parent = pathToRoot[inhertingStartingFrom - 1];
            if (current.routeConfig && current.routeConfig.path === '') {
                inhertingStartingFrom--;
            }
            else if (!parent.component) {
                inhertingStartingFrom--;
            }
            else {
                break;
            }
        }
        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
            var params = __assign$2({}, res.params, curr.params);
            var data = __assign$2({}, res.data, curr.data);
            var resolve = __assign$2({}, res.resolve, curr._resolvedData);
            return { params: params, data: data, resolve: resolve };
        }, ({ params: {}, data: {}, resolve: {} }));
    }
    var ActivatedRouteSnapshot = (function () {
        function ActivatedRouteSnapshot(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
            this.url = url;
            this.params = params;
            this.queryParams = queryParams;
            this.fragment = fragment;
            this.data = data;
            this.outlet = outlet;
            this.component = component;
            this._routeConfig = routeConfig;
            this._urlSegment = urlSegment;
            this._lastPathIndex = lastPathIndex;
            this._resolve = resolve;
        }
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
            get: function () { return this._routeConfig; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
            get: function () { return this._routerState.root; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
            get: function () { return this._routerState.parent(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
            get: function () { return this._routerState.firstChild(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
            get: function () { return this._routerState.children(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
            get: function () { return this._routerState.pathFromRoot(this); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "paramMap", {
            get: function () {
                if (!this._paramMap) {
                    this._paramMap = convertToParamMap(this.params);
                }
                return this._paramMap;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ActivatedRouteSnapshot.prototype, "queryParamMap", {
            get: function () {
                if (!this._queryParamMap) {
                    this._queryParamMap = convertToParamMap(this.queryParams);
                }
                return this._queryParamMap;
            },
            enumerable: true,
            configurable: true
        });
        ActivatedRouteSnapshot.prototype.toString = function () {
            var url = this.url.map(function (segment) { return segment.toString(); }).join('/');
            var matched = this._routeConfig ? this._routeConfig.path : '';
            return "Route(url:'" + url + "', path:'" + matched + "')";
        };
        return ActivatedRouteSnapshot;
    }());
    var RouterStateSnapshot = (function (_super) {
        __extends$26(RouterStateSnapshot, _super);
        function RouterStateSnapshot(url, root) {
            var _this = _super.call(this, root) || this;
            _this.url = url;
            setRouterStateSnapshot(_this, root);
            return _this;
        }
        RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
        return RouterStateSnapshot;
    }(Tree));
    function setRouterStateSnapshot(state$$1, node) {
        node.value._routerState = state$$1;
        node.children.forEach(function (c) { return setRouterStateSnapshot(state$$1, c); });
    }
    function serializeNode(node) {
        var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
        return "" + node.value + c;
    }
    function advanceActivatedRoute(route) {
        if (route.snapshot) {
            var currentSnapshot = route.snapshot;
            route.snapshot = route._futureSnapshot;
            if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {
                ((route.queryParams)).next(route._futureSnapshot.queryParams);
            }
            if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {
                ((route.fragment)).next(route._futureSnapshot.fragment);
            }
            if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {
                ((route.params)).next(route._futureSnapshot.params);
            }
            if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {
                ((route.url)).next(route._futureSnapshot.url);
            }
            if (!shallowEqual(currentSnapshot.data, route._futureSnapshot.data)) {
                ((route.data)).next(route._futureSnapshot.data);
            }
        }
        else {
            route.snapshot = route._futureSnapshot;
            ((route.data)).next(route._futureSnapshot.data);
        }
    }
    function equalParamsAndUrlSegments(a, b) {
        var equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
        var parentsMismatch = !a.parent !== !b.parent;
        return equalUrlParams && !parentsMismatch &&
            (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
    }
    function createRouterState(routeReuseStrategy, curr, prevState) {
        var root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
        return new RouterState(root, curr);
    }
    function createNode(routeReuseStrategy, curr, prevState) {
        if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
            var value = prevState.value;
            value._futureSnapshot = curr.value;
            var children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
            return new TreeNode(value, children);
        }
        else if (routeReuseStrategy.retrieve(curr.value)) {
            var tree_1 = ((routeReuseStrategy.retrieve(curr.value))).route;
            setFutureSnapshotsOfActivatedRoutes(curr, tree_1);
            return tree_1;
        }
        else {
            var value = createActivatedRoute(curr.value);
            var children = curr.children.map(function (c) { return createNode(routeReuseStrategy, c); });
            return new TreeNode(value, children);
        }
    }
    function setFutureSnapshotsOfActivatedRoutes(curr, result) {
        if (curr.value.routeConfig !== result.value.routeConfig) {
            throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
        }
        if (curr.children.length !== result.children.length) {
            throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
        }
        result.value._futureSnapshot = curr.value;
        for (var i = 0; i < curr.children.length; ++i) {
            setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
        }
    }
    function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
        return curr.children.map(function (child) {
            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
                var p = _a[_i];
                if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
                    return createNode(routeReuseStrategy, child, p);
                }
            }
            return createNode(routeReuseStrategy, child);
        });
    }
    function createActivatedRoute(c) {
        return new ActivatedRoute(new BehaviorSubject_2(c.url), new BehaviorSubject_2(c.params), new BehaviorSubject_2(c.queryParams), new BehaviorSubject_2(c.fragment), new BehaviorSubject_2(c.data), c.outlet, c.component, c);
    }
    function createUrlTree(route, urlTree, commands, queryParams, fragment) {
        if (commands.length === 0) {
            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
        }
        var nav = computeNavigation(commands);
        if (nav.toRoot()) {
            return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
        }
        var startingPosition = findStartingPosition(nav, urlTree, route);
        var segmentGroup = startingPosition.processChildren ?
            updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :
            updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
    }
    function isMatrixParams(command) {
        return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
    }
    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
        var qp = {};
        if (queryParams) {
            forEach(queryParams, function (value, name) {
                qp[name] = Array.isArray(value) ? value.map(function (v) { return "" + v; }) : "" + value;
            });
        }
        if (urlTree.root === oldSegmentGroup) {
            return new UrlTree(newSegmentGroup, qp, fragment);
        }
        return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
    }
    function replaceSegment(current, oldSegment, newSegment) {
        var children = {};
        forEach(current.children, function (c, outletName) {
            if (c === oldSegment) {
                children[outletName] = newSegment;
            }
            else {
                children[outletName] = replaceSegment(c, oldSegment, newSegment);
            }
        });
        return new UrlSegmentGroup(current.segments, children);
    }
    var Navigation = (function () {
        function Navigation(isAbsolute, numberOfDoubleDots, commands) {
            this.isAbsolute = isAbsolute;
            this.numberOfDoubleDots = numberOfDoubleDots;
            this.commands = commands;
            if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
                throw new Error('Root segment cannot have matrix parameters');
            }
            var cmdWithOutlet = commands.find(function (c) { return typeof c === 'object' && c != null && c.outlets; });
            if (cmdWithOutlet && cmdWithOutlet !== last$1(commands)) {
                throw new Error('{outlets:{}} has to be the last command');
            }
        }
        Navigation.prototype.toRoot = function () {
            return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
        };
        return Navigation;
    }());
    function computeNavigation(commands) {
        if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {
            return new Navigation(true, 0, commands);
        }
        var numberOfDoubleDots = 0;
        var isAbsolute = false;
        var res = commands.reduce(function (res, cmd, cmdIdx) {
            if (typeof cmd === 'object' && cmd != null) {
                if (cmd.outlets) {
                    var outlets_1 = {};
                    forEach(cmd.outlets, function (commands, name) {
                        outlets_1[name] = typeof commands === 'string' ? commands.split('/') : commands;
                    });
                    return res.concat([{ outlets: outlets_1 }]);
                }
                if (cmd.segmentPath) {
                    return res.concat([cmd.segmentPath]);
                }
            }
            if (!(typeof cmd === 'string')) {
                return res.concat([cmd]);
            }
            if (cmdIdx === 0) {
                cmd.split('/').forEach(function (urlPart, partIndex) {
                    if (partIndex == 0 && urlPart === '.') {
                    }
                    else if (partIndex == 0 && urlPart === '') {
                        isAbsolute = true;
                    }
                    else if (urlPart === '..') {
                        numberOfDoubleDots++;
                    }
                    else if (urlPart != '') {
                        res.push(urlPart);
                    }
                });
                return res;
            }
            return res.concat([cmd]);
        }, []);
        return new Navigation(isAbsolute, numberOfDoubleDots, res);
    }
    var Position = (function () {
        function Position(segmentGroup, processChildren, index) {
            this.segmentGroup = segmentGroup;
            this.processChildren = processChildren;
            this.index = index;
        }
        return Position;
    }());
    function findStartingPosition(nav, tree, route) {
        if (nav.isAbsolute) {
            return new Position(tree.root, true, 0);
        }
        if (route.snapshot._lastPathIndex === -1) {
            return new Position(route.snapshot._urlSegment, true, 0);
        }
        var modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
        var index = route.snapshot._lastPathIndex + modifier;
        return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
    }
    function createPositionApplyingDoubleDots(group$$1, index, numberOfDoubleDots) {
        var g = group$$1;
        var ci = index;
        var dd = numberOfDoubleDots;
        while (dd > ci) {
            dd -= ci;
            g = g.parent;
            if (!g) {
                throw new Error('Invalid number of \'../\'');
            }
            ci = g.segments.length;
        }
        return new Position(g, false, ci - dd);
    }
    function getPath(command) {
        if (typeof command === 'object' && command != null && command.outlets) {
            return command.outlets[PRIMARY_OUTLET];
        }
        return "" + command;
    }
    function getOutlets(commands) {
        if (!(typeof commands[0] === 'object'))
            return _a = {}, _a[PRIMARY_OUTLET] = commands, _a;
        if (commands[0].outlets === undefined)
            return _b = {}, _b[PRIMARY_OUTLET] = commands, _b;
        return commands[0].outlets;
        var _a, _b;
    }
    function updateSegmentGroup(segmentGroup, startIndex, commands) {
        if (!segmentGroup) {
            segmentGroup = new UrlSegmentGroup([], {});
        }
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
        }
        var m = prefixedWith(segmentGroup, startIndex, commands);
        var slicedCommands = commands.slice(m.commandIndex);
        if (m.match && m.pathIndex < segmentGroup.segments.length) {
            var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
            g.children[PRIMARY_OUTLET] =
                new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
            return updateSegmentGroupChildren(g, 0, slicedCommands);
        }
        else if (m.match && slicedCommands.length === 0) {
            return new UrlSegmentGroup(segmentGroup.segments, {});
        }
        else if (m.match && !segmentGroup.hasChildren()) {
            return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
        else if (m.match) {
            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
        }
        else {
            return createNewSegmentGroup(segmentGroup, startIndex, commands);
        }
    }
    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
        if (commands.length === 0) {
            return new UrlSegmentGroup(segmentGroup.segments, {});
        }
        else {
            var outlets_2 = getOutlets(commands);
            var children_2 = {};
            forEach(outlets_2, function (commands, outlet) {
                if (commands !== null) {
                    children_2[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
                }
            });
            forEach(segmentGroup.children, function (child, childOutlet) {
                if (outlets_2[childOutlet] === undefined) {
                    children_2[childOutlet] = child;
                }
            });
            return new UrlSegmentGroup(segmentGroup.segments, children_2);
        }
    }
    function prefixedWith(segmentGroup, startIndex, commands) {
        var currentCommandIndex = 0;
        var currentPathIndex = startIndex;
        var noMatch = { match: false, pathIndex: 0, commandIndex: 0 };
        while (currentPathIndex < segmentGroup.segments.length) {
            if (currentCommandIndex >= commands.length)
                return noMatch;
            var path = segmentGroup.segments[currentPathIndex];
            var curr = getPath(commands[currentCommandIndex]);
            var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
            if (currentPathIndex > 0 && curr === undefined)
                break;
            if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
                if (!compare(curr, next, path))
                    return noMatch;
                currentCommandIndex += 2;
            }
            else {
                if (!compare(curr, {}, path))
                    return noMatch;
                currentCommandIndex++;
            }
            currentPathIndex++;
        }
        return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
    }
    function createNewSegmentGroup(segmentGroup, startIndex, commands) {
        var paths = segmentGroup.segments.slice(0, startIndex);
        var i = 0;
        while (i < commands.length) {
            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
                var children = createNewSegmentChildren(commands[i].outlets);
                return new UrlSegmentGroup(paths, children);
            }
            if (i === 0 && isMatrixParams(commands[0])) {
                var p = segmentGroup.segments[startIndex];
                paths.push(new UrlSegment(p.path, commands[0]));
                i++;
                continue;
            }
            var curr = getPath(commands[i]);
            var next = (i < commands.length - 1) ? commands[i + 1] : null;
            if (curr && next && isMatrixParams(next)) {
                paths.push(new UrlSegment(curr, stringify$1(next)));
                i += 2;
            }
            else {
                paths.push(new UrlSegment(curr, {}));
                i++;
            }
        }
        return new UrlSegmentGroup(paths, {});
    }
    function createNewSegmentChildren(outlets) {
        var children = {};
        forEach(outlets, function (commands, outlet) {
            if (commands !== null) {
                children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
            }
        });
        return children;
    }
    function stringify$1(params) {
        var res = {};
        forEach(params, function (v, k) { return res[k] = "" + v; });
        return res;
    }
    function compare(path, params, segment) {
        return path == segment.path && shallowEqual(params, segment.parameters);
    }
    var __assign$3 = (undefined && undefined.__assign) || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    var NoMatch$1 = (function () {
        function NoMatch$1() {
        }
        return NoMatch$1;
    }());
    function recognize(rootComponentType, config, urlTree, url) {
        return new Recognizer(rootComponentType, config, urlTree, url).recognize();
    }
    var Recognizer = (function () {
        function Recognizer(rootComponentType, config, urlTree, url) {
            this.rootComponentType = rootComponentType;
            this.config = config;
            this.urlTree = urlTree;
            this.url = url;
        }
        Recognizer.prototype.recognize = function () {
            try {
                var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
                var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
                var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
                var rootNode = new TreeNode(root, children);
                var routeState = new RouterStateSnapshot(this.url, rootNode);
                this.inheriteParamsAndData(routeState._root);
                return of_1(routeState);
            }
            catch (e) {
                return new Observable_2(function (obs) { return obs.error(e); });
            }
        };
        Recognizer.prototype.inheriteParamsAndData = function (routeNode) {
            var _this = this;
            var route = routeNode.value;
            var i = inheritedParamsDataResolve(route);
            route.params = Object.freeze(i.params);
            route.data = Object.freeze(i.data);
            routeNode.children.forEach(function (n) { return _this.inheriteParamsAndData(n); });
        };
        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
                return this.processChildren(config, segmentGroup);
            }
            return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
        };
        Recognizer.prototype.processChildren = function (config, segmentGroup) {
            var _this = this;
            var children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });
            checkOutletNameUniqueness(children);
            sortActivatedRouteSnapshots(children);
            return children;
        };
        Recognizer.prototype.processSegment = function (config, segmentGroup, segments, outlet) {
            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
                var r = config_1[_i];
                try {
                    return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
                }
                catch (e) {
                    if (!(e instanceof NoMatch$1))
                        throw e;
                }
            }
            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                return [];
            }
            throw new NoMatch$1();
        };
        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
            return segments.length === 0 && !segmentGroup.children[outlet];
        };
        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, segments, outlet) {
            if (route.redirectTo)
                throw new NoMatch$1();
            if ((route.outlet || PRIMARY_OUTLET) !== outlet)
                throw new NoMatch$1();
            if (route.path === '**') {
                var params = segments.length > 0 ? last$1(segments).parameters : {};
                var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
                return [new TreeNode(snapshot_1, [])];
            }
            var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
            var rawSlicedSegments = segments.slice(lastChild);
            var childConfig = getChildConfig(route);
            var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
            var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                var children_3 = this.processChildren(childConfig, segmentGroup);
                return [new TreeNode(snapshot, children_3)];
            }
            if (childConfig.length === 0 && slicedSegments.length === 0) {
                return [new TreeNode(snapshot, [])];
            }
            var children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
            return [new TreeNode(snapshot, children)];
        };
        return Recognizer;
    }());
    function sortActivatedRouteSnapshots(nodes) {
        nodes.sort(function (a, b) {
            if (a.value.outlet === PRIMARY_OUTLET)
                return -1;
            if (b.value.outlet === PRIMARY_OUTLET)
                return 1;
            return a.value.outlet.localeCompare(b.value.outlet);
        });
    }
    function getChildConfig(route) {
        if (route.children) {
            return route.children;
        }
        if (route.loadChildren) {
            return route._loadedConfig.routes;
        }
        return [];
    }
    function match$1(segmentGroup, route, segments) {
        if (route.path === '') {
            if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
                throw new NoMatch$1();
            }
            return { consumedSegments: [], lastChild: 0, parameters: {} };
        }
        var matcher = route.matcher || defaultUrlMatcher;
        var res = matcher(segments, segmentGroup, route);
        if (!res)
            throw new NoMatch$1();
        var posParams = {};
        forEach(res.posParams, function (v, k) { posParams[k] = v.path; });
        var parameters = __assign$3({}, posParams, res.consumed[res.consumed.length - 1].parameters);
        return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };
    }
    function checkOutletNameUniqueness(nodes) {
        var names = {};
        nodes.forEach(function (n) {
            var routeWithSameOutletName = names[n.value.outlet];
            if (routeWithSameOutletName) {
                var p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
                var c = n.value.url.map(function (s) { return s.toString(); }).join('/');
                throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
            }
            names[n.value.outlet] = n.value;
        });
    }
    function getSourceSegmentGroup(segmentGroup) {
        var s = segmentGroup;
        while (s._sourceSegment) {
            s = s._sourceSegment;
        }
        return s;
    }
    function getPathIndexShift(segmentGroup) {
        var s = segmentGroup;
        var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
        while (s._sourceSegment) {
            s = s._sourceSegment;
            res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
        }
        return res - 1;
    }
    function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
        if (slicedSegments.length > 0 &&
            containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
            var s_1 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
            s_1._sourceSegment = segmentGroup;
            s_1._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s_1, slicedSegments: [] };
        }
        if (slicedSegments.length === 0 &&
            containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
            var s_2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
            s_2._sourceSegment = segmentGroup;
            s_2._segmentIndexShift = consumedSegments.length;
            return { segmentGroup: s_2, slicedSegments: slicedSegments };
        }
        var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments: slicedSegments };
    }
    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
        var res = {};
        for (var _i = 0, routes_3 = routes; _i < routes_3.length; _i++) {
            var r = routes_3[_i];
            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
                var s = new UrlSegmentGroup([], {});
                s._sourceSegment = segmentGroup;
                s._segmentIndexShift = segmentGroup.segments.length;
                res[getOutlet$2(r)] = s;
            }
        }
        return __assign$3({}, children, res);
    }
    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
        var res = {};
        res[PRIMARY_OUTLET] = primarySegment;
        primarySegment._sourceSegment = segmentGroup;
        primarySegment._segmentIndexShift = consumedSegments.length;
        for (var _i = 0, routes_4 = routes; _i < routes_4.length; _i++) {
            var r = routes_4[_i];
            if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {
                var s = new UrlSegmentGroup([], {});
                s._sourceSegment = segmentGroup;
                s._segmentIndexShift = consumedSegments.length;
                res[getOutlet$2(r)] = s;
            }
        }
        return res;
    }
    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
        return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$2(r) !== PRIMARY_OUTLET; });
    }
    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
        return routes.some(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); });
    }
    function emptyPathMatch(segmentGroup, slicedSegments, r) {
        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
            return false;
        }
        return r.path === '' && r.redirectTo === undefined;
    }
    function getOutlet$2(route) {
        return route.outlet || PRIMARY_OUTLET;
    }
    function getData(route) {
        return route.data || {};
    }
    function getResolve(route) {
        return route.resolve || {};
    }
    var RouterOutletMap = (function () {
        function RouterOutletMap() {
            this._outlets = {};
        }
        RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };
        RouterOutletMap.prototype.removeOutlet = function (name) { this._outlets[name] = undefined; };
        return RouterOutletMap;
    }());
    var UrlHandlingStrategy = (function () {
        function UrlHandlingStrategy() {
        }
        UrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { };
        UrlHandlingStrategy.prototype.extract = function (url) { };
        UrlHandlingStrategy.prototype.merge = function (newUrlPart, rawUrl) { };
        return UrlHandlingStrategy;
    }());
    var DefaultUrlHandlingStrategy = (function () {
        function DefaultUrlHandlingStrategy() {
        }
        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };
        DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };
        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };
        return DefaultUrlHandlingStrategy;
    }());
    var __assign$2$1 = (undefined && undefined.__assign) || Object.assign || function (t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
        }
        return t;
    };
    function defaultErrorHandler(error) {
        throw error;
    }
    function defaultRouterHook(snapshot) {
        return of_1(null);
    }
    var DefaultRouteReuseStrategy = (function () {
        function DefaultRouteReuseStrategy() {
        }
        DefaultRouteReuseStrategy.prototype.shouldDetach = function (route) { return false; };
        DefaultRouteReuseStrategy.prototype.store = function (route, detachedTree) { };
        DefaultRouteReuseStrategy.prototype.shouldAttach = function (route) { return false; };
        DefaultRouteReuseStrategy.prototype.retrieve = function (route) { return null; };
        DefaultRouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) {
            return future.routeConfig === curr.routeConfig;
        };
        return DefaultRouteReuseStrategy;
    }());
    var Router = (function () {
        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
            var _this = this;
            this.rootComponentType = rootComponentType;
            this.urlSerializer = urlSerializer;
            this.outletMap = outletMap;
            this.location = location;
            this.config = config;
            this.navigations = new BehaviorSubject_2(null);
            this.routerEvents = new Subject_2();
            this.navigationId = 0;
            this.errorHandler = defaultErrorHandler;
            this.navigated = false;
            this.hooks = {
                beforePreactivation: defaultRouterHook,
                afterPreactivation: defaultRouterHook
            };
            this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
            this.routeReuseStrategy = new DefaultRouteReuseStrategy();
            var onLoadStart = function (r) { return _this.triggerEvent(new RouteConfigLoadStart(r)); };
            var onLoadEnd = function (r) { return _this.triggerEvent(new RouteConfigLoadEnd(r)); };
            this.ngModule = injector.get(NgModuleRef);
            this.resetConfig(config);
            this.currentUrlTree = createEmptyUrlTree();
            this.rawUrlTree = this.currentUrlTree;
            this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
            this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
            this.processNavigations();
        }
        Router.prototype.resetRootComponentType = function (rootComponentType) {
            this.rootComponentType = rootComponentType;
            this.currentRouterState.root.component = this.rootComponentType;
        };
        Router.prototype.initialNavigation = function () {
            this.setUpLocationChangeListener();
            if (this.navigationId === 0) {
                this.navigateByUrl(this.location.path(true), { replaceUrl: true });
            }
        };
        Router.prototype.setUpLocationChangeListener = function () {
            var _this = this;
            if (!this.locationSubscription) {
                this.locationSubscription = (this.location.subscribe(Zone.current.wrap(function (change) {
                    var rawUrlTree = _this.urlSerializer.parse(change['url']);
                    var source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';
                    setTimeout(function () { _this.scheduleNavigation(rawUrlTree, source, { replaceUrl: true }); }, 0);
                })));
            }
        };
        Object.defineProperty(Router.prototype, "routerState", {
            get: function () { return this.currentRouterState; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "url", {
            get: function () { return this.serializeUrl(this.currentUrlTree); },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Router.prototype, "events", {
            get: function () { return this.routerEvents; },
            enumerable: true,
            configurable: true
        });
        Router.prototype.triggerEvent = function (e) { this.routerEvents.next(e); };
        Router.prototype.resetConfig = function (config) {
            validateConfig(config);
            this.config = config;
        };
        Router.prototype.ngOnDestroy = function () { this.dispose(); };
        Router.prototype.dispose = function () {
            if (this.locationSubscription) {
                this.locationSubscription.unsubscribe();
                this.locationSubscription = null;
            }
        };
        Router.prototype.createUrlTree = function (commands, _a) {
            var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, queryParamsHandling = _b.queryParamsHandling, preserveFragment = _b.preserveFragment;
            if (isDevMode() && preserveQueryParams && (console) && (console.warn)) {
                console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
            }
            var a = relativeTo || this.routerState.root;
            var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
            var q = null;
            if (queryParamsHandling) {
                switch (queryParamsHandling) {
                    case 'merge':
                        q = __assign$2$1({}, this.currentUrlTree.queryParams, queryParams);
                        break;
                    case 'preserve':
                        q = this.currentUrlTree.queryParams;
                        break;
                    default:
                        q = queryParams;
                }
            }
            else {
                q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
            }
            return createUrlTree(a, this.currentUrlTree, commands, q, f);
        };
        Router.prototype.navigateByUrl = function (url, extras) {
            if (extras === void 0) {
                extras = { skipLocationChange: false };
            }
            var urlTree = url instanceof UrlTree ? url : this.parseUrl(url);
            var mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
            return this.scheduleNavigation(mergedTree, 'imperative', extras);
        };
        Router.prototype.navigate = function (commands, extras) {
            if (extras === void 0) {
                extras = { skipLocationChange: false };
            }
            validateCommands(commands);
            if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
                extras.queryParams = this.removeEmptyProps(extras.queryParams);
            }
            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
        };
        Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
        Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
        Router.prototype.isActive = function (url, exact) {
            if (url instanceof UrlTree) {
                return containsTree(this.currentUrlTree, url, exact);
            }
            else {
                var urlTree = this.urlSerializer.parse(url);
                return containsTree(this.currentUrlTree, urlTree, exact);
            }
        };
        Router.prototype.removeEmptyProps = function (params) {
            return Object.keys(params).reduce(function (result, key) {
                var value = params[key];
                if (value !== null && value !== undefined) {
                    result[key] = value;
                }
                return result;
            }, {});
        };
        Router.prototype.processNavigations = function () {
            var _this = this;
            concatMap_2
                .call(this.navigations, function (nav) {
                if (nav) {
                    _this.executeScheduledNavigation(nav);
                    return nav.promise.catch(function () { });
                }
                else {
                    return (of_1(null));
                }
            })
                .subscribe(function () { });
        };
        Router.prototype.scheduleNavigation = function (rawUrl, source, extras) {
            var lastNavigation = this.navigations.value;
            if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&
                lastNavigation.rawUrl.toString() === rawUrl.toString()) {
                return null;
            }
            if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&
                lastNavigation.rawUrl.toString() === rawUrl.toString()) {
                return null;
            }
            var resolve = null;
            var reject = null;
            var promise = new Promise(function (res, rej) {
                resolve = res;
                reject = rej;
            });
            var id = ++this.navigationId;
            this.navigations.next({ id: id, source: source, rawUrl: rawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });
            return promise.catch(function (e) { return Promise.reject(e); });
        };
        Router.prototype.executeScheduledNavigation = function (_a) {
            var _this = this;
            var id = _a.id, rawUrl = _a.rawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
            var url = this.urlHandlingStrategy.extract(rawUrl);
            var urlTransition = !this.navigated || url.toString() !== this.currentUrlTree.toString();
            if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
                Promise.resolve()
                    .then(function (_) { return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null); })
                    .then(resolve, reject);
            }
            else if (urlTransition && this.rawUrlTree &&
                this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)) {
                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
                Promise.resolve()
                    .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })
                    .then(resolve, reject);
            }
            else {
                this.rawUrlTree = rawUrl;
                resolve(null);
            }
        };
        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
            var _this = this;
            if (id !== this.navigationId) {
                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
                return Promise.resolve(false);
            }
            return new Promise(function (resolvePromise, rejectPromise) {
                var urlAndSnapshot$;
                if (!precreatedState) {
                    var moduleInjector = _this.ngModule.injector;
                    var redirectsApplied$ = applyRedirects(moduleInjector, _this.configLoader, _this.urlSerializer, url, _this.config);
                    urlAndSnapshot$ = mergeMap_2.call(redirectsApplied$, function (appliedUrl) {
                        return map_2.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
                            _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
                            return { appliedUrl: appliedUrl, snapshot: snapshot };
                        });
                    });
                }
                else {
                    urlAndSnapshot$ = of_1({ appliedUrl: url, snapshot: precreatedState });
                }
                var beforePreactivationDone$ = mergeMap_2.call(urlAndSnapshot$, function (p) {
                    return map_2.call(_this.hooks.beforePreactivation(p.snapshot), function () { return p; });
                });
                var preActivation;
                var preactivationTraverse$ = map_2.call(beforePreactivationDone$, function (_a) {
                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                    var moduleInjector = _this.ngModule.injector;
                    preActivation =
                        new PreActivation(snapshot, _this.currentRouterState.snapshot, moduleInjector);
                    preActivation.traverse(_this.outletMap);
                    return { appliedUrl: appliedUrl, snapshot: snapshot };
                });
                var preactivationCheckGuards$ = mergeMap_2.call(preactivationTraverse$, function (_a) {
                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
                    if (_this.navigationId !== id)
                        return of_1(false);
                    return map_2.call(preActivation.checkGuards(), function (shouldActivate) {
                        return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };
                    });
                });
                var preactivationResolveData$ = mergeMap_2.call(preactivationCheckGuards$, function (p) {
                    if (_this.navigationId !== id)
                        return of_1(false);
                    if (p.shouldActivate) {
                        return map_2.call(preActivation.resolveData(), function () { return p; });
                    }
                    else {
                        return of_1(p);
                    }
                });
                var preactivationDone$ = mergeMap_2.call(preactivationResolveData$, function (p) {
                    return map_2.call(_this.hooks.afterPreactivation(p.snapshot), function () { return p; });
                });
                var routerState$ = map_2.call(preactivationDone$, function (_a) {
                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
                    if (shouldActivate) {
                        var state$$1 = createRouterState(_this.routeReuseStrategy, snapshot, _this.currentRouterState);
                        return { appliedUrl: appliedUrl, state: state$$1, shouldActivate: shouldActivate };
                    }
                    else {
                        return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };
                    }
                });
                var navigationIsSuccessful;
                var storedState = _this.currentRouterState;
                var storedUrl = _this.currentUrlTree;
                routerState$
                    .forEach(function (_a) {
                    var appliedUrl = _a.appliedUrl, state$$1 = _a.state, shouldActivate = _a.shouldActivate;
                    if (!shouldActivate || id !== _this.navigationId) {
                        navigationIsSuccessful = false;
                        return;
                    }
                    _this.currentUrlTree = appliedUrl;
                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                    _this.currentRouterState = state$$1;
                    if (!shouldPreventPushState) {
                        var path = _this.urlSerializer.serialize(_this.rawUrlTree);
                        if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
                            _this.location.replaceState(path);
                        }
                        else {
                            _this.location.go(path);
                        }
                    }
                    new ActivateRoutes(_this.routeReuseStrategy, state$$1, storedState)
                        .activate(_this.outletMap);
                    navigationIsSuccessful = true;
                })
                    .then(function () {
                    if (navigationIsSuccessful) {
                        _this.navigated = true;
                        _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
                        resolvePromise(true);
                    }
                    else {
                        _this.resetUrlToCurrentUrlTree();
                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
                        resolvePromise(false);
                    }
                }, function (e) {
                    if (isNavigationCancelingError(e)) {
                        _this.resetUrlToCurrentUrlTree();
                        _this.navigated = true;
                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
                        resolvePromise(false);
                    }
                    else {
                        _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
                        try {
                            resolvePromise(_this.errorHandler(e));
                        }
                        catch (ee) {
                            rejectPromise(ee);
                        }
                    }
                    _this.currentRouterState = storedState;
                    _this.currentUrlTree = storedUrl;
                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
                    _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
                });
            });
        };
        Router.prototype.resetUrlToCurrentUrlTree = function () {
            var path = this.urlSerializer.serialize(this.rawUrlTree);
            this.location.replaceState(path);
        };
        return Router;
    }());
    var CanActivate = (function () {
        function CanActivate(path) {
            this.path = path;
        }
        Object.defineProperty(CanActivate.prototype, "route", {
            get: function () { return this.path[this.path.length - 1]; },
            enumerable: true,
            configurable: true
        });
        return CanActivate;
    }());
    var CanDeactivate = (function () {
        function CanDeactivate(component, route) {
            this.component = component;
            this.route = route;
        }
        return CanDeactivate;
    }());
    var PreActivation = (function () {
        function PreActivation(future, curr, moduleInjector) {
            this.future = future;
            this.curr = curr;
            this.moduleInjector = moduleInjector;
            this.canActivateChecks = [];
            this.canDeactivateChecks = [];
        }
        PreActivation.prototype.traverse = function (parentOutletMap) {
            var futureRoot = this.future._root;
            var currRoot = this.curr ? this.curr._root : null;
            this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
        };
        PreActivation.prototype.checkGuards = function () {
            var _this = this;
            if (this.canDeactivateChecks.length === 0 && this.canActivateChecks.length === 0) {
                return of_1(true);
            }
            var canDeactivate$ = this.runCanDeactivateChecks();
            return mergeMap_2.call(canDeactivate$, function (canDeactivate) { return canDeactivate ? _this.runCanActivateChecks() : of_1(false); });
        };
        PreActivation.prototype.resolveData = function () {
            var _this = this;
            if (this.canActivateChecks.length === 0)
                return of_1(null);
            var checks$ = from_1(this.canActivateChecks);
            var runningChecks$ = concatMap_2.call(checks$, function (check) { return _this.runResolve(check.route); });
            return reduce_2.call(runningChecks$, function (_, __) { return _; });
        };
        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) {
                _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
                delete prevChildren[c.value.outlet];
            });
            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]); });
        };
        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;
            var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
            if (curr && future._routeConfig === curr._routeConfig) {
                if (this.shouldRunGuardsAndResolvers(curr, future, future._routeConfig.runGuardsAndResolvers)) {
                    this.canActivateChecks.push(new CanActivate(futurePath));
                    this.canDeactivateChecks.push(new CanDeactivate(outlet.component, curr));
                }
                else {
                    future.data = curr.data;
                    future._resolvedData = curr._resolvedData;
                }
                if (future.component) {
                    this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
                }
                else {
                    this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
                }
            }
            else {
                if (curr) {
                    this.deactiveRouteAndItsChildren(currNode, outlet);
                }
                this.canActivateChecks.push(new CanActivate(futurePath));
                if (future.component) {
                    this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
                }
                else {
                    this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
                }
            }
        };
        PreActivation.prototype.shouldRunGuardsAndResolvers = function (curr, future, mode) {
            switch (mode) {
                case 'always':
                    return true;
                case 'paramsOrQueryParamsChange':
                    return !equalParamsAndUrlSegments(curr, future) ||
                        !shallowEqual(curr.queryParams, future.queryParams);
                case 'paramsChange':
                default:
                    return !equalParamsAndUrlSegments(curr, future);
            }
        };
        PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(route);
            var r = route.value;
            forEach(prevChildren, function (v, k) {
                if (!r.component) {
                    _this.deactiveRouteAndItsChildren(v, outlet);
                }
                else if (!!outlet) {
                    _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
                }
                else {
                    _this.deactiveRouteAndItsChildren(v, null);
                }
            });
            if (!r.component) {
                this.canDeactivateChecks.push(new CanDeactivate(null, r));
            }
            else if (outlet && outlet.isActivated) {
                this.canDeactivateChecks.push(new CanDeactivate(outlet.component, r));
            }
            else {
                this.canDeactivateChecks.push(new CanDeactivate(null, r));
            }
        };
        PreActivation.prototype.runCanDeactivateChecks = function () {
            var _this = this;
            var checks$ = from_1(this.canDeactivateChecks);
            var runningChecks$ = mergeMap_2.call(checks$, function (check) { return _this.runCanDeactivate(check.component, check.route); });
            return every_2.call(runningChecks$, function (result) { return result === true; });
        };
        PreActivation.prototype.runCanActivateChecks = function () {
            var _this = this;
            var checks$ = from_1(this.canActivateChecks);
            var runningChecks$ = mergeMap_2.call(checks$, function (check) { return andObservables(from_1([_this.runCanActivateChild(check.path), _this.runCanActivate(check.route)])); });
            return every_2.call(runningChecks$, function (result) { return result === true; });
        };
        PreActivation.prototype.runCanActivate = function (future) {
            var _this = this;
            var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
            if (!canActivate || canActivate.length === 0)
                return of_1(true);
            var obs = map_2.call(from_1(canActivate), function (c) {
                var guard = _this.getToken(c, future);
                var observable;
                if (guard.canActivate) {
                    observable = wrapIntoObservable(guard.canActivate(future, _this.future));
                }
                else {
                    observable = wrapIntoObservable(guard(future, _this.future));
                }
                return first_2.call(observable);
            });
            return andObservables(obs);
        };
        PreActivation.prototype.runCanActivateChild = function (path) {
            var _this = this;
            var future = path[path.length - 1];
            var canActivateChildGuards = path.slice(0, path.length - 1)
                .reverse()
                .map(function (p) { return _this.extractCanActivateChild(p); })
                .filter(function (_) { return _ !== null; });
            return andObservables(map_2.call(from_1(canActivateChildGuards), function (d) {
                var obs = map_2.call(from_1(d.guards), function (c) {
                    var guard = _this.getToken(c, d.node);
                    var observable;
                    if (guard.canActivateChild) {
                        observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
                    }
                    else {
                        observable = wrapIntoObservable(guard(future, _this.future));
                    }
                    return first_2.call(observable);
                });
                return andObservables(obs);
            }));
        };
        PreActivation.prototype.extractCanActivateChild = function (p) {
            var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
            if (!canActivateChild || canActivateChild.length === 0)
                return null;
            return { node: p, guards: canActivateChild };
        };
        PreActivation.prototype.runCanDeactivate = function (component, curr) {
            var _this = this;
            var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
            if (!canDeactivate || canDeactivate.length === 0)
                return of_1(true);
            var canDeactivate$ = mergeMap_2.call(from_1(canDeactivate), function (c) {
                var guard = _this.getToken(c, curr);
                var observable;
                if (guard.canDeactivate) {
                    observable =
                        wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr, _this.future));
                }
                else {
                    observable = wrapIntoObservable(guard(component, curr, _this.curr, _this.future));
                }
                return first_2.call(observable);
            });
            return every_2.call(canDeactivate$, function (result) { return result === true; });
        };
        PreActivation.prototype.runResolve = function (future) {
            var resolve = future._resolve;
            return map_2.call(this.resolveNode(resolve, future), function (resolvedData) {
                future._resolvedData = resolvedData;
                future.data = __assign$2$1({}, future.data, inheritedParamsDataResolve(future).resolve);
                return null;
            });
        };
        PreActivation.prototype.resolveNode = function (resolve, future) {
            var _this = this;
            return waitForMap(resolve, function (k, v) {
                var resolver = _this.getToken(v, future);
                return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) :
                    wrapIntoObservable(resolver(future, _this.future));
            });
        };
        PreActivation.prototype.getToken = function (token, snapshot) {
            var config = closestLoadedConfig(snapshot);
            var injector = config ? config.module.injector : this.moduleInjector;
            return injector.get(token);
        };
        return PreActivation;
    }());
    var ActivateRoutes = (function () {
        function ActivateRoutes(routeReuseStrategy, futureState, currState) {
            this.routeReuseStrategy = routeReuseStrategy;
            this.futureState = futureState;
            this.currState = currState;
        }
        ActivateRoutes.prototype.activate = function (parentOutletMap) {
            var futureRoot = this.futureState._root;
            var currRoot = this.currState ? this.currState._root : null;
            this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
            advanceActivatedRoute(this.futureState.root);
            this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
        };
        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) {
                _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
                delete prevChildren[c.value.outlet];
            });
            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap); });
        };
        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(currNode);
            futureNode.children.forEach(function (c) { _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });
        };
        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;
            if (future === curr) {
                if (future.component) {
                    var outlet = getOutlet(parentOutletMap, future);
                    this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
                }
                else {
                    this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
                }
            }
            else {
                if (curr) {
                    this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
                }
            }
        };
        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
            var future = futureNode.value;
            var curr = currNode ? currNode.value : null;
            if (future === curr) {
                advanceActivatedRoute(future);
                if (future.component) {
                    var outlet = getOutlet(parentOutletMap, future);
                    this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
                }
                else {
                    this.activateChildRoutes(futureNode, currNode, parentOutletMap);
                }
            }
            else {
                if (future.component) {
                    advanceActivatedRoute(future);
                    var outlet = getOutlet(parentOutletMap, futureNode.value);
                    if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                        var stored = ((this.routeReuseStrategy.retrieve(future.snapshot)));
                        this.routeReuseStrategy.store(future.snapshot, null);
                        outlet.attach(stored.componentRef, stored.route.value);
                        advanceActivatedRouteNodeAndItsChildren(stored.route);
                    }
                    else {
                        var outletMap = new RouterOutletMap();
                        this.placeComponentIntoOutlet(outletMap, future, outlet);
                        this.activateChildRoutes(futureNode, null, outletMap);
                    }
                }
                else {
                    advanceActivatedRoute(future);
                    this.activateChildRoutes(futureNode, null, parentOutletMap);
                }
            }
        };
        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {
            var config = parentLoadedConfig(future.snapshot);
            var cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
            outlet.activateWith(future, cmpFactoryResolver, outletMap);
        };
        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {
            if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
                this.detachAndStoreRouteSubtree(route, parentOutletMap);
            }
            else {
                this.deactiveRouteAndOutlet(route, parentOutletMap);
            }
        };
        ActivateRoutes.prototype.detachAndStoreRouteSubtree = function (route, parentOutletMap) {
            var outlet = getOutlet(parentOutletMap, route.value);
            var componentRef = outlet.detach();
            this.routeReuseStrategy.store(route.value.snapshot, { componentRef: componentRef, route: route });
        };
        ActivateRoutes.prototype.deactiveRouteAndOutlet = function (route, parentOutletMap) {
            var _this = this;
            var prevChildren = nodeChildrenAsMap(route);
            var outlet = null;
            try {
                outlet = getOutlet(parentOutletMap, route.value);
            }
            catch (e) {
                return;
            }
            var childOutletMap = outlet.outletMap;
            forEach(prevChildren, function (v, k) {
                if (route.value.component) {
                    _this.deactiveRouteAndItsChildren(v, childOutletMap);
                }
                else {
                    _this.deactiveRouteAndItsChildren(v, parentOutletMap);
                }
            });
            if (outlet && outlet.isActivated) {
                outlet.deactivate();
            }
        };
        return ActivateRoutes;
    }());
    function advanceActivatedRouteNodeAndItsChildren(node) {
        advanceActivatedRoute(node.value);
        node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
    }
    function parentLoadedConfig(snapshot) {
        for (var s = snapshot.parent; s; s = s.parent) {
            var route = s._routeConfig;
            if (route && route._loadedConfig)
                return route._loadedConfig;
            if (route && route.component)
                return null;
        }
        return null;
    }
    function closestLoadedConfig(snapshot) {
        if (!snapshot)
            return null;
        for (var s = snapshot.parent; s; s = s.parent) {
            var route = s._routeConfig;
            if (route && route._loadedConfig)
                return route._loadedConfig;
        }
        return null;
    }
    function nodeChildrenAsMap(node) {
        var map$$1 = {};
        if (node) {
            node.children.forEach(function (child) { return map$$1[child.value.outlet] = child; });
        }
        return map$$1;
    }
    function getOutlet(outletMap, route) {
        var outlet = outletMap._outlets[route.outlet];
        if (!outlet) {
            var componentName = ((route.component)).name;
            if (route.outlet === PRIMARY_OUTLET) {
                throw new Error("Cannot find primary outlet to load '" + componentName + "'");
            }
            else {
                throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
            }
        }
        return outlet;
    }
    function validateCommands(commands) {
        for (var i = 0; i < commands.length; i++) {
            var cmd = commands[i];
            if (cmd == null) {
                throw new Error("The requested path contains " + cmd + " segment at index " + i);
            }
        }
    }
    var RouterLink = (function () {
        function RouterLink(router, route, tabIndex, renderer, el) {
            this.router = router;
            this.route = route;
            this.commands = [];
            if (tabIndex == null) {
                renderer.setElementAttribute(el.nativeElement, 'tabindex', '0');
            }
        }
        Object.defineProperty(RouterLink.prototype, "routerLink", {
            set: function (commands) {
                if (commands != null) {
                    this.commands = Array.isArray(commands) ? commands : [commands];
                }
                else {
                    this.commands = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterLink.prototype, "preserveQueryParams", {
            set: function (value) {
                if (isDevMode() && (console) && (console.warn)) {
                    console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');
                }
                this.preserve = value;
            },
            enumerable: true,
            configurable: true
        });
        RouterLink.prototype.onClick = function () {
            var extras = {
                skipLocationChange: attrBoolValue(this.skipLocationChange),
                replaceUrl: attrBoolValue(this.replaceUrl),
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return true;
        };
        Object.defineProperty(RouterLink.prototype, "urlTree", {
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: attrBoolValue(this.preserve),
                    queryParamsHandling: this.queryParamsHandling,
                    preserveFragment: attrBoolValue(this.preserveFragment),
                });
            },
            enumerable: true,
            configurable: true
        });
        return RouterLink;
    }());
    RouterLink.decorators = [
        { type: Directive, args: [{ selector: ':not(a)[routerLink]' },] },
    ];
    RouterLink.ctorParameters = function () {
        return [
            { type: Router, },
            { type: ActivatedRoute, },
            { type: undefined, decorators: [{ type: Attribute, args: ['tabindex',] },] },
            { type: Renderer, },
            { type: ElementRef, },
        ];
    };
    RouterLink.propDecorators = {
        'queryParams': [{ type: Input },],
        'fragment': [{ type: Input },],
        'queryParamsHandling': [{ type: Input },],
        'preserveFragment': [{ type: Input },],
        'skipLocationChange': [{ type: Input },],
        'replaceUrl': [{ type: Input },],
        'routerLink': [{ type: Input },],
        'preserveQueryParams': [{ type: Input },],
        'onClick': [{ type: HostListener, args: ['click',] },],
    };
    var RouterLinkWithHref = (function () {
        function RouterLinkWithHref(router, route, locationStrategy) {
            var _this = this;
            this.router = router;
            this.route = route;
            this.locationStrategy = locationStrategy;
            this.commands = [];
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof NavigationEnd) {
                    _this.updateTargetUrlAndHref();
                }
            });
        }
        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
            set: function (commands) {
                if (commands != null) {
                    this.commands = Array.isArray(commands) ? commands : [commands];
                }
                else {
                    this.commands = [];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterLinkWithHref.prototype, "preserveQueryParams", {
            set: function (value) {
                if (isDevMode() && (console) && (console.warn)) {
                    console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
                }
                this.preserve = value;
            },
            enumerable: true,
            configurable: true
        });
        RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
        RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {
            if (button !== 0 || ctrlKey || metaKey) {
                return true;
            }
            if (typeof this.target === 'string' && this.target != '_self') {
                return true;
            }
            var extras = {
                skipLocationChange: attrBoolValue(this.skipLocationChange),
                replaceUrl: attrBoolValue(this.replaceUrl),
            };
            this.router.navigateByUrl(this.urlTree, extras);
            return false;
        };
        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
        };
        Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
            get: function () {
                return this.router.createUrlTree(this.commands, {
                    relativeTo: this.route,
                    queryParams: this.queryParams,
                    fragment: this.fragment,
                    preserveQueryParams: attrBoolValue(this.preserve),
                    queryParamsHandling: this.queryParamsHandling,
                    preserveFragment: attrBoolValue(this.preserveFragment),
                });
            },
            enumerable: true,
            configurable: true
        });
        return RouterLinkWithHref;
    }());
    RouterLinkWithHref.decorators = [
        { type: Directive, args: [{ selector: 'a[routerLink]' },] },
    ];
    RouterLinkWithHref.ctorParameters = function () {
        return [
            { type: Router, },
            { type: ActivatedRoute, },
            { type: LocationStrategy, },
        ];
    };
    RouterLinkWithHref.propDecorators = {
        'target': [{ type: HostBinding, args: ['attr.target',] }, { type: Input },],
        'queryParams': [{ type: Input },],
        'fragment': [{ type: Input },],
        'queryParamsHandling': [{ type: Input },],
        'preserveFragment': [{ type: Input },],
        'skipLocationChange': [{ type: Input },],
        'replaceUrl': [{ type: Input },],
        'href': [{ type: HostBinding },],
        'routerLink': [{ type: Input },],
        'preserveQueryParams': [{ type: Input },],
        'onClick': [{ type: HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'],] },],
    };
    function attrBoolValue(s) {
        return s === '' || !!s;
    }
    var RouterLinkActive = (function () {
        function RouterLinkActive(router, element, renderer, cdr) {
            var _this = this;
            this.router = router;
            this.element = element;
            this.renderer = renderer;
            this.cdr = cdr;
            this.classes = [];
            this.active = false;
            this.routerLinkActiveOptions = { exact: false };
            this.subscription = router.events.subscribe(function (s) {
                if (s instanceof NavigationEnd) {
                    _this.update();
                }
            });
        }
        Object.defineProperty(RouterLinkActive.prototype, "isActive", {
            get: function () { return this.active; },
            enumerable: true,
            configurable: true
        });
        RouterLinkActive.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.links.changes.subscribe(function (_) { return _this.update(); });
            this.linksWithHrefs.changes.subscribe(function (_) { return _this.update(); });
            this.update();
        };
        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
            set: function (data) {
                var classes = Array.isArray(data) ? data : data.split(' ');
                this.classes = classes.filter(function (c) { return !!c; });
            },
            enumerable: true,
            configurable: true
        });
        RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
        RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
        RouterLinkActive.prototype.update = function () {
            var _this = this;
            if (!this.links || !this.linksWithHrefs || !this.router.navigated)
                return;
            var hasActiveLinks = this.hasActiveLinks();
            if (this.active !== hasActiveLinks) {
                this.active = hasActiveLinks;
                this.classes.forEach(function (c) { return _this.renderer.setElementClass(_this.element.nativeElement, c, hasActiveLinks); });
                this.cdr.detectChanges();
            }
        };
        RouterLinkActive.prototype.isLinkActive = function (router) {
            var _this = this;
            return function (link) { return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact); };
        };
        RouterLinkActive.prototype.hasActiveLinks = function () {
            return this.links.some(this.isLinkActive(this.router)) ||
                this.linksWithHrefs.some(this.isLinkActive(this.router));
        };
        return RouterLinkActive;
    }());
    RouterLinkActive.decorators = [
        { type: Directive, args: [{
                    selector: '[routerLinkActive]',
                    exportAs: 'routerLinkActive',
                },] },
    ];
    RouterLinkActive.ctorParameters = function () {
        return [
            { type: Router, },
            { type: ElementRef, },
            { type: Renderer, },
            { type: ChangeDetectorRef, },
        ];
    };
    RouterLinkActive.propDecorators = {
        'links': [{ type: ContentChildren, args: [RouterLink, { descendants: true },] },],
        'linksWithHrefs': [{ type: ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],
        'routerLinkActiveOptions': [{ type: Input },],
        'routerLinkActive': [{ type: Input },],
    };
    var RouterOutlet = (function () {
        function RouterOutlet(parentOutletMap, location, resolver, name) {
            this.parentOutletMap = parentOutletMap;
            this.location = location;
            this.resolver = resolver;
            this.name = name;
            this.activateEvents = new EventEmitter();
            this.deactivateEvents = new EventEmitter();
            parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
        }
        RouterOutlet.prototype.ngOnDestroy = function () { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); };
        Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
            get: function () { return this.location.injector; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
            get: function () { return this.resolver; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "isActivated", {
            get: function () { return !!this.activated; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "component", {
            get: function () {
                if (!this.activated)
                    throw new Error('Outlet is not activated');
                return this.activated.instance;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
            get: function () {
                if (!this.activated)
                    throw new Error('Outlet is not activated');
                return this._activatedRoute;
            },
            enumerable: true,
            configurable: true
        });
        RouterOutlet.prototype.detach = function () {
            if (!this.activated)
                throw new Error('Outlet is not activated');
            this.location.detach();
            var r = this.activated;
            this.activated = null;
            this._activatedRoute = null;
            return r;
        };
        RouterOutlet.prototype.attach = function (ref, activatedRoute) {
            this.activated = ref;
            this._activatedRoute = activatedRoute;
            this.location.insert(ref.hostView);
        };
        RouterOutlet.prototype.deactivate = function () {
            if (this.activated) {
                var c = this.component;
                this.activated.destroy();
                this.activated = null;
                this._activatedRoute = null;
                this.deactivateEvents.emit(c);
            }
        };
        RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {
            if (this.isActivated) {
                throw new Error('Cannot activate an already activated outlet');
            }
            this.outletMap = outletMap;
            this._activatedRoute = activatedRoute;
            var snapshot = activatedRoute._futureSnapshot;
            var component = (snapshot._routeConfig.component);
            var factory = resolver.resolveComponentFactory(component);
            var inj = ReflectiveInjector.fromResolvedProviders(providers, injector);
            this.activated = this.location.createComponent(factory, this.location.length, inj, []);
            this.activated.changeDetectorRef.detectChanges();
            this.activateEvents.emit(this.activated.instance);
        };
        RouterOutlet.prototype.activateWith = function (activatedRoute, resolver, outletMap) {
            if (this.isActivated) {
                throw new Error('Cannot activate an already activated outlet');
            }
            this.outletMap = outletMap;
            this._activatedRoute = activatedRoute;
            var snapshot = activatedRoute._futureSnapshot;
            var component = (snapshot._routeConfig.component);
            resolver = resolver || this.resolver;
            var factory = resolver.resolveComponentFactory(component);
            var injector = new OutletInjector(activatedRoute, outletMap, this.location.injector);
            this.activated = this.location.createComponent(factory, this.location.length, injector, []);
            this.activated.changeDetectorRef.detectChanges();
            this.activateEvents.emit(this.activated.instance);
        };
        return RouterOutlet;
    }());
    RouterOutlet.decorators = [
        { type: Directive, args: [{ selector: 'router-outlet' },] },
    ];
    RouterOutlet.ctorParameters = function () {
        return [
            { type: RouterOutletMap, },
            { type: ViewContainerRef, },
            { type: ComponentFactoryResolver, },
            { type: undefined, decorators: [{ type: Attribute, args: ['name',] },] },
        ];
    };
    RouterOutlet.propDecorators = {
        'activateEvents': [{ type: Output, args: ['activate',] },],
        'deactivateEvents': [{ type: Output, args: ['deactivate',] },],
    };
    var OutletInjector = (function () {
        function OutletInjector(route, map$$1, parent) {
            this.route = route;
            this.map = map$$1;
            this.parent = parent;
        }
        OutletInjector.prototype.get = function (token, notFoundValue) {
            if (token === ActivatedRoute) {
                return this.route;
            }
            if (token === RouterOutletMap) {
                return this.map;
            }
            return this.parent.get(token, notFoundValue);
        };
        return OutletInjector;
    }());
    var RouteReuseStrategy = (function () {
        function RouteReuseStrategy() {
        }
        RouteReuseStrategy.prototype.shouldDetach = function (route) { };
        RouteReuseStrategy.prototype.store = function (route, handle) { };
        RouteReuseStrategy.prototype.shouldAttach = function (route) { };
        RouteReuseStrategy.prototype.retrieve = function (route) { };
        RouteReuseStrategy.prototype.shouldReuseRoute = function (future, curr) { };
        return RouteReuseStrategy;
    }());
    var PreloadingStrategy = (function () {
        function PreloadingStrategy() {
        }
        PreloadingStrategy.prototype.preload = function (route, fn) { };
        return PreloadingStrategy;
    }());
    var PreloadAllModules = (function () {
        function PreloadAllModules() {
        }
        PreloadAllModules.prototype.preload = function (route, fn) {
            return _catch_2.call(fn(), function () { return of_1(null); });
        };
        return PreloadAllModules;
    }());
    var NoPreloading = (function () {
        function NoPreloading() {
        }
        NoPreloading.prototype.preload = function (route, fn) { return of_1(null); };
        return NoPreloading;
    }());
    var RouterPreloader = (function () {
        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
            this.router = router;
            this.injector = injector;
            this.preloadingStrategy = preloadingStrategy;
            var onStartLoad = function (r) { return router.triggerEvent(new RouteConfigLoadStart(r)); };
            var onEndLoad = function (r) { return router.triggerEvent(new RouteConfigLoadEnd(r)); };
            this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
        }
        RouterPreloader.prototype.setUpPreloading = function () {
            var _this = this;
            var navigations = filter_2.call(this.router.events, function (e) { return e instanceof NavigationEnd; });
            this.subscription = concatMap_2.call(navigations, function () { return _this.preload(); }).subscribe(function () { });
        };
        RouterPreloader.prototype.preload = function () {
            var ngModule = this.injector.get(NgModuleRef);
            return this.processRoutes(ngModule, this.router.config);
        };
        RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
        RouterPreloader.prototype.processRoutes = function (ngModule, routes) {
            var res = [];
            for (var _i = 0, routes_5 = routes; _i < routes_5.length; _i++) {
                var r = routes_5[_i];
                var route = r;
                if (route.loadChildren && !route.canLoad && route._loadedConfig) {
                    var childConfig = route._loadedConfig;
                    res.push(this.processRoutes(ngModule, childConfig.routes));
                }
                else if (route.loadChildren && !route.canLoad) {
                    res.push(this.preloadConfig(ngModule, route));
                }
                else if (route.children) {
                    res.push(this.processRoutes(ngModule, route.children));
                }
            }
            return mergeAll_2.call(from_1(res));
        };
        RouterPreloader.prototype.preloadConfig = function (ngModule, route) {
            var _this = this;
            return this.preloadingStrategy.preload(route, function () {
                var loaded = _this.loader.load(ngModule.injector, route);
                return mergeMap_2.call(loaded, function (config) {
                    route._loadedConfig = config;
                    return _this.processRoutes(config.module, config.routes);
                });
            });
        };
        return RouterPreloader;
    }());
    RouterPreloader.decorators = [
        { type: Injectable },
    ];
    RouterPreloader.ctorParameters = function () {
        return [
            { type: Router, },
            { type: NgModuleFactoryLoader, },
            { type: Compiler, },
            { type: Injector, },
            { type: PreloadingStrategy, },
        ];
    };
    var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
    var ROUTER_CONFIGURATION = new InjectionToken('ROUTER_CONFIGURATION');
    var ROUTER_FORROOT_GUARD = new InjectionToken('ROUTER_FORROOT_GUARD');
    var ROUTER_PROVIDERS = [
        Location,
        { provide: UrlSerializer, useClass: DefaultUrlSerializer },
        {
            provide: Router,
            useFactory: setupRouter,
            deps: [
                ApplicationRef, UrlSerializer, RouterOutletMap, Location, Injector, NgModuleFactoryLoader,
                Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()],
                [RouteReuseStrategy, new Optional()]
            ]
        },
        RouterOutletMap,
        { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
        { provide: NgModuleFactoryLoader, useClass: SystemJsNgModuleLoader },
        RouterPreloader,
        NoPreloading,
        PreloadAllModules,
        { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } },
    ];
    function routerNgProbeToken() {
        return new NgProbeToken('Router', Router);
    }
    var RouterModule = (function () {
        function RouterModule(guard, router) {
        }
        RouterModule.forRoot = function (routes, config) {
            return {
                ngModule: RouterModule,
                providers: [
                    ROUTER_PROVIDERS,
                    provideRoutes(routes),
                    {
                        provide: ROUTER_FORROOT_GUARD,
                        useFactory: provideForRootGuard,
                        deps: [[Router, new Optional(), new SkipSelf()]]
                    },
                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },
                    {
                        provide: LocationStrategy,
                        useFactory: provideLocationStrategy,
                        deps: [
                            PlatformLocation, [new Inject(APP_BASE_HREF), new Optional()], ROUTER_CONFIGURATION
                        ]
                    },
                    {
                        provide: PreloadingStrategy,
                        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :
                            NoPreloading
                    },
                    { provide: NgProbeToken, multi: true, useFactory: routerNgProbeToken },
                    provideRouterInitializer(),
                ],
            };
        };
        RouterModule.forChild = function (routes) {
            return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
        };
        return RouterModule;
    }());
    RouterModule.decorators = [
        { type: NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },
    ];
    RouterModule.ctorParameters = function () {
        return [
            { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ROUTER_FORROOT_GUARD,] },] },
            { type: Router, decorators: [{ type: Optional },] },
        ];
    };
    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
        if (options === void 0) {
            options = {};
        }
        return options.useHash ? new HashLocationStrategy(platformLocationStrategy, baseHref) :
            new PathLocationStrategy(platformLocationStrategy, baseHref);
    }
    function provideForRootGuard(router) {
        if (router) {
            throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
        }
        return 'guarded';
    }
    function provideRoutes(routes) {
        return [
            { provide: ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },
            { provide: ROUTES, multi: true, useValue: routes },
        ];
    }
    function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy, routeReuseStrategy) {
        if (opts === void 0) {
            opts = {};
        }
        var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten$1(config));
        if (urlHandlingStrategy) {
            router.urlHandlingStrategy = urlHandlingStrategy;
        }
        if (routeReuseStrategy) {
            router.routeReuseStrategy = routeReuseStrategy;
        }
        if (opts.errorHandler) {
            router.errorHandler = opts.errorHandler;
        }
        if (opts.enableTracing) {
            var dom_1 = getDOM();
            router.events.subscribe(function (e) {
                dom_1.logGroup("Router Event: " + ((e.constructor)).name);
                dom_1.log(e.toString());
                dom_1.log(e);
                dom_1.logGroupEnd();
            });
        }
        return router;
    }
    function rootRoute(router) {
        return router.routerState.root;
    }
    var RouterInitializer = (function () {
        function RouterInitializer(injector) {
            this.injector = injector;
            this.initNavigation = false;
            this.resultOfPreactivationDone = new Subject_2();
        }
        RouterInitializer.prototype.appInitializer = function () {
            var _this = this;
            var p = this.injector.get(LOCATION_INITIALIZED, Promise.resolve(null));
            return p.then(function () {
                var resolve = null;
                var res = new Promise(function (r) { return resolve = r; });
                var router = _this.injector.get(Router);
                var opts = _this.injector.get(ROUTER_CONFIGURATION);
                if (_this.isLegacyDisabled(opts) || _this.isLegacyEnabled(opts)) {
                    resolve(true);
                }
                else if (opts.initialNavigation === 'disabled') {
                    router.setUpLocationChangeListener();
                    resolve(true);
                }
                else if (opts.initialNavigation === 'enabled') {
                    router.hooks.afterPreactivation = function () {
                        if (!_this.initNavigation) {
                            _this.initNavigation = true;
                            resolve(true);
                            return _this.resultOfPreactivationDone;
                        }
                        else {
                            return of_1(null);
                        }
                    };
                    router.initialNavigation();
                }
                else {
                    throw new Error("Invalid initialNavigation options: '" + opts.initialNavigation + "'");
                }
                return res;
            });
        };
        RouterInitializer.prototype.bootstrapListener = function (bootstrappedComponentRef) {
            var opts = this.injector.get(ROUTER_CONFIGURATION);
            var preloader = this.injector.get(RouterPreloader);
            var router = this.injector.get(Router);
            var ref = this.injector.get(ApplicationRef);
            if (bootstrappedComponentRef !== ref.components[0]) {
                return;
            }
            if (this.isLegacyEnabled(opts)) {
                router.initialNavigation();
            }
            else if (this.isLegacyDisabled(opts)) {
                router.setUpLocationChangeListener();
            }
            preloader.setUpPreloading();
            router.resetRootComponentType(ref.componentTypes[0]);
            this.resultOfPreactivationDone.next(null);
            this.resultOfPreactivationDone.complete();
        };
        RouterInitializer.prototype.isLegacyEnabled = function (opts) {
            return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||
                opts.initialNavigation === undefined;
        };
        RouterInitializer.prototype.isLegacyDisabled = function (opts) {
            return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;
        };
        return RouterInitializer;
    }());
    RouterInitializer.decorators = [
        { type: Injectable },
    ];
    RouterInitializer.ctorParameters = function () {
        return [
            { type: Injector, },
        ];
    };
    function getAppInitializer(r) {
        return r.appInitializer.bind(r);
    }
    function getBootstrapListener(r) {
        return r.bootstrapListener.bind(r);
    }
    var ROUTER_INITIALIZER = new InjectionToken('Router Initializer');
    function provideRouterInitializer() {
        return [
            RouterInitializer,
            {
                provide: APP_INITIALIZER,
                multi: true,
                useFactory: getAppInitializer,
                deps: [RouterInitializer]
            },
            { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },
            { provide: APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER },
        ];
    }
    var VERSION$5 = new Version('4.0.1');
    var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(k, v);
    };
    var HomeComponent = (function () {
        function HomeComponent(router) {
            this.router = router;
            this.userName = 'JohnS';
            this.password = 'password';
        }
        HomeComponent.prototype.login = function () {
            this.router.navigate(['fruit-list']);
        };
        return HomeComponent;
    }());
    HomeComponent = __decorate$1([
        Component({
            selector: 'home',
            templateUrl: './home.component.html'
        }),
        __metadata("design:paramtypes", [Router])
    ], HomeComponent);
    var root_1$8 = root;
    function toPromise$2(PromiseCtor) {
        var _this = this;
        if (!PromiseCtor) {
            if (root_1$8.root.Rx && root_1$8.root.Rx.config && root_1$8.root.Rx.config.Promise) {
                PromiseCtor = root_1$8.root.Rx.config.Promise;
            }
            else if (root_1$8.root.Promise) {
                PromiseCtor = root_1$8.root.Promise;
            }
        }
        if (!PromiseCtor) {
            throw new Error('no Promise impl found');
        }
        return new PromiseCtor(function (resolve, reject) {
            var value;
            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
        });
    }
    var toPromise_2 = toPromise$2;
    var toPromise_1$1 = {
        toPromise: toPromise_2
    };
    var Observable_1$18 = Observable_1;
    var toPromise_1 = toPromise_1$1;
    Observable_1$18.Observable.prototype.toPromise = toPromise_1.toPromise;
    var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$2 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(k, v);
    };
    var FruitService = (function () {
        function FruitService(http) {
            this.http = http;
            this.fruitListUrl = '/src/data/fruit-data.json';
        }
        FruitService.prototype.getFruitItem = function (fruitItemID) {
            var _this = this;
            return this.getFruitList_Promise().then(function (fruitItems) { return _this.extractFruitItem(fruitItems, fruitItemID); });
        };
        FruitService.prototype.getFruitList_Promise = function () {
            return this.http.get(this.fruitListUrl)
                .toPromise()
                .then(function (response) { return response.json(); })
                .catch(this.handleError);
        };
        FruitService.prototype.getFruitList_Observable = function () {
            return this.http
                .get(this.fruitListUrl)
                .map(function (r) { return r.json().data; });
        };
        FruitService.prototype.extractFruitItem = function (fruitItems, fruitItemID) {
            var extractedFruitItem;
            fruitItems.forEach(function (item) {
                if (item.id && item.id === fruitItemID) {
                    extractedFruitItem = item;
                }
            });
            return extractedFruitItem;
        };
        FruitService.prototype.handleError = function (error) {
            console.error('An error occurred', error);
            return Promise.reject(error.message || error);
        };
        return FruitService;
    }());
    FruitService = __decorate$3([
        Injectable(),
        __metadata$2("design:paramtypes", [Http])
    ], FruitService);
    var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$1 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(k, v);
    };
    var FruitListComponent = (function () {
        function FruitListComponent(fruitService, router) {
            this.fruitService = fruitService;
            this.router = router;
        }
        FruitListComponent.prototype.ngOnInit = function () {
            this.getFruitList();
        };
        FruitListComponent.prototype.getFruitList = function () {
            var _this = this;
            this.loading = true;
            this.fruitService.getFruitList_Promise().then(function (fruitItems) {
                _this.rowData = fruitItems;
                _this.loading = false;
            });
        };
        FruitListComponent.prototype.loadDetail = function (fruitItem) {
            this.router.navigate(['fruit-detail', fruitItem.id]);
        };
        FruitListComponent.prototype.loadVendor = function () {
            this.router.navigate(['fruit-vendor']);
        };
        return FruitListComponent;
    }());
    FruitListComponent = __decorate$2([
        Component({
            selector: 'fruit-list',
            templateUrl: './fruit-list.component.html',
            providers: [FruitService]
        }),
        __metadata$1("design:paramtypes", [FruitService, Router])
    ], FruitListComponent);
    var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$3 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(k, v);
    };
    var FruitDetailComponent = (function () {
        function FruitDetailComponent(route) {
            this.route = route;
        }
        FruitDetailComponent.prototype.ngOnInit = function () {
            this.currentFruitItem = this.route.snapshot.data['fruitItem'];
        };
        return FruitDetailComponent;
    }());
    FruitDetailComponent = __decorate$4([
        Component({
            selector: 'fruit-detail',
            templateUrl: './fruit-detail.component.html',
            providers: [FruitService]
        }),
        __metadata$3("design:paramtypes", [ActivatedRoute])
    ], FruitDetailComponent);
    var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata$4 = (undefined && undefined.__metadata) || function (k, v) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(k, v);
    };
    var FruitDetailResolver = (function () {
        function FruitDetailResolver(fruitService) {
            this.fruitService = fruitService;
        }
        FruitDetailResolver.prototype.resolve = function (route, state$$1) {
            return this.fruitService.getFruitItem(Number(route.params['id']));
        };
        return FruitDetailResolver;
    }());
    FruitDetailResolver = __decorate$5([
        Injectable(),
        __metadata$4("design:paramtypes", [FruitService])
    ], FruitDetailResolver);
    var appRoutes = [
        { path: 'home', component: HomeComponent },
        { path: 'fruit-list', component: FruitListComponent },
        { path: 'fruit-detail/:id', component: FruitDetailComponent, resolve: { fruitItem: FruitDetailResolver } },
        { path: 'fruit-vendor', loadChildren: './fruit-vendor/fruit-vendor.module#FruitVendorModule' },
        { path: '**', component: HomeComponent }
    ];
    var appRouting = RouterModule.forRoot(appRoutes);
    var __decorate$6 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AppComponent = (function () {
        function AppComponent() {
        }
        return AppComponent;
    }());
    AppComponent = __decorate$6([
        Component({
            selector: 'my-app',
            template: "\n    <main>\n      <h1>ng-rosetta: Angular 2 Version</h1>\n\n      <!-- Routing Viewport -->\n      <router-outlet></router-outlet>\n    </main>\n    "
        })
    ], AppComponent);
    var __decorate$7 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FruitItemImageComponent = (function () {
        function FruitItemImageComponent() {
        }
        return FruitItemImageComponent;
    }());
    FruitItemImageComponent = __decorate$7([
        Component({
            selector: 'fruititem-image',
            template: "<div>\n                <a href=\"{{targetUrl}}\" target=\"new\">\n                    <img src=\"{{imageUrl}}\">\n                </a>\n            </div>",
            inputs: ['targetUrl', 'imageUrl']
        })
    ], FruitItemImageComponent);
    var __decorate$8 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var FruitImageCellComponent = (function () {
        function FruitImageCellComponent() {
        }
        FruitImageCellComponent.prototype.agInit = function (params) {
            this.params = params;
        };
        return FruitImageCellComponent;
    }());
    FruitImageCellComponent = __decorate$8([
        Component({
            selector: 'fruit-image-cell',
            template: "<img src=\"{{params.value}}\" style=\"width:90px;height:90px;\" />"
        })
    ], FruitImageCellComponent);
    var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var AppModule = (function () {
        function AppModule() {
        }
        return AppModule;
    }());
    AppModule = __decorate([
        NgModule({
            imports: [
                BrowserModule,
                FormsModule,
                NgbModule.forRoot(),
                HttpModule,
                appRouting
            ],
            declarations: [
                AppComponent,
                HomeComponent,
                FruitListComponent,
                FruitDetailComponent,
                FruitItemImageComponent,
                FruitImageCellComponent
            ],
            providers: [
                FruitService,
                FruitDetailResolver
            ],
            bootstrap: [AppComponent]
        })
    ], AppModule);
    var styles_NgbAlert = [];
    var RenderType_NgbAlert = createRendererType2({
        encapsulation: 2,
        styles: styles_NgbAlert,
        data: {}
    });
    function View_NgbAlert_1(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 4, 'button', [
                [
                    'aria-label',
                    'Close'
                ],
                [
                    'class',
                    'close'
                ],
                [
                    'type',
                    'button'
                ]
            ], null, [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.closeHandler() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['\n            '])),
            (l()(), elementDef(0, null, null, 1, 'span', [[
                    'aria-hidden',
                    'true'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['×'])),
            (l()(), textDef(null, ['\n      ']))
        ], null, null);
    }
    function View_NgbAlert_0(l) {
        return viewDef(2, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 6, 'div', [[
                    'role',
                    'alert'
                ]
            ], [[
                    8,
                    'className',
                    0
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbAlert_1)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      '])),
            ngContentDef(null, 0),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n    ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_1 = co.dismissible;
            ck(v, 4, 0, currVal_1);
        }, function (ck, v) {
            var co = v.component;
            var currVal_0 = ('alert alert-' + co.type);
            ck(v, 1, 0, currVal_0);
        });
    }
    function View_NgbAlert_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-alert', [], null, null, null, View_NgbAlert_0, RenderType_NgbAlert)),
            directiveDef(24576, null, 0, NgbAlert, [NgbAlertConfig], null, null)
        ], null, null);
    }
    var NgbAlertNgFactory = createComponentFactory('ngb-alert', NgbAlert, View_NgbAlert_Host_0, {
        dismissible: 'dismissible',
        type: 'type'
    }, { close: 'close' }, ['*']);
    var styles_NgbTooltipWindow = [];
    var RenderType_NgbTooltipWindow = createRendererType2({
        encapsulation: 2,
        styles: styles_NgbTooltipWindow,
        data: {}
    });
    function View_NgbTooltipWindow_0(l) {
        return viewDef(2, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 0, 'div', [[
                    'class',
                    'tooltip-arrow'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 1, 'div', [[
                    'class',
                    'tooltip-inner'
                ]
            ], null, null, null, null, null)),
            ngContentDef(null, 0),
            (l()(), textDef(null, ['\n    ']))
        ], null, null);
    }
    function View_NgbTooltipWindow_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-tooltip-window', [[
                    'role',
                    'tooltip'
                ]
            ], [[
                    8,
                    'className',
                    0
                ]
            ], null, null, View_NgbTooltipWindow_0, RenderType_NgbTooltipWindow)),
            directiveDef(24576, null, 0, NgbTooltipWindow, [], null, null)
        ], null, function (ck, v) {
            var currVal_0 = ('tooltip in tooltip-' + nodeValue(v, 1).placement);
            ck(v, 0, 0, currVal_0);
        });
    }
    var NgbTooltipWindowNgFactory = createComponentFactory('ngb-tooltip-window', NgbTooltipWindow, View_NgbTooltipWindow_Host_0, { placement: 'placement' }, {}, ['*']);
    var styles_NgbHighlight = ['.ngb-highlight[_ngcontent-%COMP%] {\n      font-weight: bold;\n    }'];
    var RenderType_NgbHighlight = createRendererType2({
        encapsulation: 0,
        styles: styles_NgbHighlight,
        data: {}
    });
    function View_NgbHighlight_2(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'span', [], [[
                    8,
                    'className',
                    0
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ]))
        ], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = inlineInterpolate(1, '', co.highlightClass, '');
            ck(v, 0, 0, currVal_0);
            var currVal_1 = v.parent.context.$implicit;
            ck(v, 1, 0, currVal_1);
        });
    }
    function View_NgbHighlight_3(l) {
        return viewDef(0, [(l()(), textDef(null, [
                '',
                ''
            ]))], null, function (ck, v) {
            var currVal_0 = v.parent.context.$implicit;
            ck(v, 0, 0, currVal_0);
        });
    }
    function View_NgbHighlight_1(l) {
        return viewDef(0, [
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbHighlight_2)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbHighlight_3)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), anchorDef(0, null, null, 0))
        ], function (ck, v) {
            var currVal_0 = v.context.odd;
            ck(v, 1, 0, currVal_0);
            var currVal_1 = !v.context.odd;
            ck(v, 3, 0, currVal_1);
        }, null);
    }
    function View_NgbHighlight_0(l) {
        return viewDef(2, [
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbHighlight_1)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null)
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.parts;
            ck(v, 1, 0, currVal_0);
        }, null);
    }
    function View_NgbHighlight_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-highlight', [], null, null, null, View_NgbHighlight_0, RenderType_NgbHighlight)),
            directiveDef(286720, null, 0, NgbHighlight, [], null, null)
        ], null, null);
    }
    var NgbHighlightNgFactory = createComponentFactory('ngb-highlight', NgbHighlight, View_NgbHighlight_Host_0, {
        highlightClass: 'highlightClass',
        result: 'result',
        term: 'term'
    }, {}, []);
    var styles_NgbTypeaheadWindow = [];
    var RenderType_NgbTypeaheadWindow = createRendererType2({
        encapsulation: 2,
        styles: styles_NgbTypeaheadWindow,
        data: {}
    });
    function View_NgbTypeaheadWindow_1(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 1, 'ngb-highlight', [], null, null, null, View_NgbHighlight_0, RenderType_NgbHighlight)),
            directiveDef(286720, null, 0, NgbHighlight, [], {
                result: [
                    0,
                    'result'
                ],
                term: [
                    1,
                    'term'
                ]
            }, null),
            (l()(), textDef(null, ['\n    ']))
        ], function (ck, v) {
            var currVal_0 = v.context.formatter(v.context.result);
            var currVal_1 = v.context.term;
            ck(v, 2, 0, currVal_0, currVal_1);
        }, null);
    }
    function View_NgbTypeaheadWindow_3(l) {
        return viewDef(0, [(l()(), anchorDef(0, null, null, 0))], null, null);
    }
    function View_NgbTypeaheadWindow_2(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 5, 'button', [
                [
                    'class',
                    'dropdown-item'
                ],
                [
                    'type',
                    'button'
                ]
            ], [[
                    2,
                    'active',
                    null
                ]
            ], [
                [
                    null,
                    'mouseenter'
                ],
                [
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('mouseenter' === en)) {
                    var pd_0 = (co.markActive(v.context.index) !== false);
                    ad = (pd_0 && ad);
                }
                if (('click' === en)) {
                    var pd_1 = (co.select(v.context.$implicit) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['\n          '])),
            (l()(), anchorDef(8388608, null, null, 2, null, View_NgbTypeaheadWindow_3)),
            directiveDef(270336, null, 0, NgTemplateOutlet, [ViewContainerRef], {
                ngTemplateOutlet: [
                    0,
                    'ngTemplateOutlet'
                ],
                ngOutletContext: [
                    1,
                    'ngOutletContext'
                ]
            }, null),
            pureObjectDef([
                'result',
                'term',
                'formatter'
            ]),
            (l()(), textDef(null, ['\n      '])),
            (l()(), textDef(null, ['\n    ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_1 = (co.resultTemplate || nodeValue(v.parent, 1));
            var currVal_2 = ck(v, 5, 0, v.context.$implicit, co.term, co.formatter);
            ck(v, 4, 0, currVal_1, currVal_2);
        }, function (ck, v) {
            var co = v.component;
            var currVal_0 = (v.context.index === co.activeIdx);
            ck(v, 1, 0, currVal_0);
        });
    }
    function View_NgbTypeaheadWindow_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), anchorDef(0, [[
                    'rt',
                    2
                ]
            ], null, 0, null, View_NgbTypeaheadWindow_1)),
            (l()(), textDef(null, ['\n    '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbTypeaheadWindow_2)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n  ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.results;
            ck(v, 4, 0, currVal_0);
        }, null);
    }
    function View_NgbTypeaheadWindow_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-typeahead-window', [
                [
                    'class',
                    'dropdown-menu'
                ],
                [
                    'style',
                    'display: block'
                ]
            ], null, null, null, View_NgbTypeaheadWindow_0, RenderType_NgbTypeaheadWindow)),
            directiveDef(57344, null, 0, NgbTypeaheadWindow, [], null, null)
        ], function (ck, v) {
            ck(v, 1, 0);
        }, null);
    }
    var NgbTypeaheadWindowNgFactory = createComponentFactory('ngb-typeahead-window', NgbTypeaheadWindow, View_NgbTypeaheadWindow_Host_0, {
        focusFirst: 'focusFirst',
        results: 'results',
        term: 'term',
        formatter: 'formatter',
        resultTemplate: 'resultTemplate'
    }, { selectEvent: 'select' }, []);
    var styles_NgbDatepickerDayView = ['[_nghost-%COMP%] {      \n      text-align: center;\n      padding: 0.185rem 0.25rem;      \n      border-radius: 0.25rem;\n    }'];
    var RenderType_NgbDatepickerDayView = createRendererType2({
        encapsulation: 0,
        styles: styles_NgbDatepickerDayView,
        data: {}
    });
    function View_NgbDatepickerDayView_0(l) {
        return viewDef(0, [(l()(), textDef(null, [
                '',
                ''
            ]))], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = co.date.day;
            ck(v, 0, 0, currVal_0);
        });
    }
    function View_NgbDatepickerDayView_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'div', [[
                    'ngbDatepickerDayView',
                    ''
                ]
            ], [
                [
                    2,
                    'bg-primary',
                    null
                ],
                [
                    2,
                    'text-white',
                    null
                ],
                [
                    2,
                    'text-muted',
                    null
                ],
                [
                    2,
                    'btn-secondary',
                    null
                ]
            ], null, null, View_NgbDatepickerDayView_0, RenderType_NgbDatepickerDayView)),
            directiveDef(24576, null, 0, NgbDatepickerDayView, [], null, null)
        ], null, function (ck, v) {
            var currVal_0 = nodeValue(v, 1).selected;
            var currVal_1 = nodeValue(v, 1).selected;
            var currVal_2 = nodeValue(v, 1).isMuted();
            var currVal_3 = !nodeValue(v, 1).disabled;
            ck(v, 0, 0, currVal_0, currVal_1, currVal_2, currVal_3);
        });
    }
    var NgbDatepickerDayViewNgFactory = createComponentFactory('[ngbDatepickerDayView]', NgbDatepickerDayView, View_NgbDatepickerDayView_Host_0, {
        currentMonth: 'currentMonth',
        date: 'date',
        disabled: 'disabled',
        selected: 'selected'
    }, {}, []);
    var styles_NgbDatepickerNavigationSelect = ['select[_ngcontent-%COMP%] {\n      \n      padding: 0.25rem 0.5rem;\n      font-size: 0.875rem;      \n      line-height: 1.25;\n      \n      height: inherit;\n      width: 50%;\n    }'];
    var RenderType_NgbDatepickerNavigationSelect = createRendererType2({
        encapsulation: 0,
        styles: styles_NgbDatepickerNavigationSelect,
        data: {}
    });
    function View_NgbDatepickerNavigationSelect_1(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 3, 'option', [], null, null, null, null, null)),
            directiveDef(73728, null, 0, NgSelectOption, [
                ElementRef,
                Renderer,
                [
                    8,
                    null
                ]
            ], { value: [
                    0,
                    'value'
                ]
            }, null),
            directiveDef(73728, null, 0, NgSelectMultipleOption, [
                ElementRef,
                Renderer,
                [
                    8,
                    null
                ]
            ], { value: [
                    0,
                    'value'
                ]
            }, null),
            (l()(), textDef(null, [
                '',
                ''
            ]))
        ], function (ck, v) {
            var currVal_0 = v.context.$implicit;
            ck(v, 1, 0, currVal_0);
            var currVal_1 = v.context.$implicit;
            ck(v, 2, 0, currVal_1);
        }, function (ck, v) {
            var co = v.component;
            var currVal_2 = co.i18n.getMonthName(v.context.$implicit);
            ck(v, 3, 0, currVal_2);
        });
    }
    function View_NgbDatepickerNavigationSelect_2(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 3, 'option', [], null, null, null, null, null)),
            directiveDef(73728, null, 0, NgSelectOption, [
                ElementRef,
                Renderer,
                [
                    8,
                    null
                ]
            ], { value: [
                    0,
                    'value'
                ]
            }, null),
            directiveDef(73728, null, 0, NgSelectMultipleOption, [
                ElementRef,
                Renderer,
                [
                    8,
                    null
                ]
            ], { value: [
                    0,
                    'value'
                ]
            }, null),
            (l()(), textDef(null, [
                '',
                ''
            ]))
        ], function (ck, v) {
            var currVal_0 = v.context.$implicit;
            ck(v, 1, 0, currVal_0);
            var currVal_1 = v.context.$implicit;
            ck(v, 2, 0, currVal_1);
        }, function (ck, v) {
            var currVal_2 = v.context.$implicit;
            ck(v, 3, 0, currVal_2);
        });
    }
    function View_NgbDatepickerNavigationSelect_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 4, 'select', [[
                    'class',
                    'custom-select d-inline-block'
                ]
            ], [
                [
                    8,
                    'disabled',
                    0
                ],
                [
                    8,
                    'value',
                    0
                ]
            ], [[
                    null,
                    'change'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('change' === en)) {
                    var pd_0 = (co.changeMonth($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerNavigationSelect_1)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 4, 'select', [[
                    'class',
                    'custom-select d-inline-block'
                ]
            ], [
                [
                    8,
                    'disabled',
                    0
                ],
                [
                    8,
                    'value',
                    0
                ]
            ], [[
                    null,
                    'change'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('change' === en)) {
                    var pd_0 = (co.changeYear($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerNavigationSelect_2)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, [' \n  ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_2 = co.months;
            ck(v, 4, 0, currVal_2);
            var currVal_5 = co.years;
            ck(v, 9, 0, currVal_5);
        }, function (ck, v) {
            var co = v.component;
            var currVal_0 = co.disabled;
            var currVal_1 = co.date.month;
            ck(v, 1, 0, currVal_0, currVal_1);
            var currVal_3 = co.disabled;
            var currVal_4 = co.date.year;
            ck(v, 6, 0, currVal_3, currVal_4);
        });
    }
    function View_NgbDatepickerNavigationSelect_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-datepicker-navigation-select', [], null, null, null, View_NgbDatepickerNavigationSelect_0, RenderType_NgbDatepickerNavigationSelect)),
            directiveDef(286720, null, 0, NgbDatepickerNavigationSelect, [
                NgbDatepickerI18n,
                NgbCalendar
            ], null, null)
        ], null, null);
    }
    var NgbDatepickerNavigationSelectNgFactory = createComponentFactory('ngb-datepicker-navigation-select', NgbDatepickerNavigationSelect, View_NgbDatepickerNavigationSelect_Host_0, {
        date: 'date',
        disabled: 'disabled',
        maxDate: 'maxDate',
        minDate: 'minDate'
    }, { select: 'select' }, []);
    var styles_NgbDatepickerNavigation = ['.collapsed[_ngcontent-%COMP%] {\n        margin-bottom: -1.7rem;\n    }'];
    var RenderType_NgbDatepickerNavigation = createRendererType2({
        encapsulation: 0,
        styles: styles_NgbDatepickerNavigation,
        data: {}
    });
    function View_NgbDatepickerNavigation_1(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 5, 'td', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n          '])),
            (l()(), elementDef(0, null, null, 2, 'ngb-datepicker-navigation-select', [], null, [[
                    null,
                    'select'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('select' === en)) {
                    var pd_0 = (co.selectDate($event) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, View_NgbDatepickerNavigationSelect_0, RenderType_NgbDatepickerNavigationSelect)),
            directiveDef(286720, null, 0, NgbDatepickerNavigationSelect, [
                NgbDatepickerI18n,
                NgbCalendar
            ], {
                date: [
                    0,
                    'date'
                ],
                disabled: [
                    1,
                    'disabled'
                ],
                maxDate: [
                    2,
                    'maxDate'
                ],
                minDate: [
                    3,
                    'minDate'
                ]
            }, { select: 'select' }),
            (l()(), textDef(null, ['\n          '])),
            (l()(), textDef(null, ['\n        ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.date;
            var currVal_1 = co.disabled;
            var currVal_2 = co.maxDate;
            var currVal_3 = co.minDate;
            ck(v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3);
        }, null);
    }
    function View_NgbDatepickerNavigation_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 20, 'table', [[
                    'class',
                    'w-100'
                ]
            ], [[
                    2,
                    'collapsed',
                    null
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 18, 'tbody', [], null, null, null, null, null)),
            (l()(), elementDef(0, null, null, 16, 'tr', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), elementDef(0, null, null, 4, 'td', [[
                    'class',
                    'text-sm-left'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n          '])),
            (l()(), elementDef(0, null, null, 1, 'button', [
                [
                    'class',
                    'btn btn-sm btn-secondary btn-inline'
                ],
                [
                    'type',
                    'button'
                ]
            ], [[
                    8,
                    'disabled',
                    0
                ]
            ], [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.doNavigate(co.navigation.PREV) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['<'])),
            (l()(), textDef(null, ['\n        '])),
            (l()(), textDef(null, ['\n        \n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerNavigation_1)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['        \n        \n        '])),
            (l()(), elementDef(0, null, null, 4, 'td', [[
                    'class',
                    'text-sm-right'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n          '])),
            (l()(), elementDef(0, null, null, 1, 'button', [
                [
                    'class',
                    'next btn btn-sm btn-secondary btn-inline'
                ],
                [
                    'type',
                    'button'
                ]
            ], [[
                    8,
                    'disabled',
                    0
                ]
            ], [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.doNavigate(co.navigation.NEXT) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['>'])),
            (l()(), textDef(null, ['\n        '])),
            (l()(), textDef(null, ['\n      '])),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n  ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_2 = co.showSelect;
            ck(v, 13, 0, currVal_2);
        }, function (ck, v) {
            var co = v.component;
            var currVal_0 = !co.showSelect;
            ck(v, 1, 0, currVal_0);
            var currVal_1 = co.prevDisabled();
            ck(v, 8, 0, currVal_1);
            var currVal_3 = co.nextDisabled();
            ck(v, 17, 0, currVal_3);
        });
    }
    function View_NgbDatepickerNavigation_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-datepicker-navigation', [], null, null, null, View_NgbDatepickerNavigation_0, RenderType_NgbDatepickerNavigation)),
            directiveDef(24576, null, 0, NgbDatepickerNavigation, [
                NgbDatepickerI18n,
                NgbCalendar
            ], null, null)
        ], null, null);
    }
    var NgbDatepickerNavigationNgFactory = createComponentFactory('ngb-datepicker-navigation', NgbDatepickerNavigation, View_NgbDatepickerNavigation_Host_0, {
        date: 'date',
        disabled: 'disabled',
        maxDate: 'maxDate',
        minDate: 'minDate',
        showSelect: 'showSelect',
        showWeekNumbers: 'showWeekNumbers'
    }, {
        navigate: 'navigate',
        select: 'select'
    }, []);
    var styles_NgbDatepickerMonthView = ['.weekday[_ngcontent-%COMP%] {\n    }\n    .weeknumber[_ngcontent-%COMP%] {\n    }\n    .day[_ngcontent-%COMP%] {\n      padding: 0;\n      height: 100%;\n      cursor: pointer;\n    }\n    .day.disabled[_ngcontent-%COMP%], .day.hidden[_ngcontent-%COMP%], .day.collapsed[_ngcontent-%COMP%] {\n      cursor: default;\n    }\n    [_nghost-%COMP%] .day.collapsed > * {\n      display: none;\n    }\n    [_nghost-%COMP%] .day.hidden > * {\n      visibility: hidden;\n    }'];
    var RenderType_NgbDatepickerMonthView = createRendererType2({
        encapsulation: 0,
        styles: styles_NgbDatepickerMonthView,
        data: {}
    });
    function View_NgbDatepickerMonthView_2(l) {
        return viewDef(0, [(l()(), elementDef(0, null, null, 0, 'td', [], null, null, null, null, null))], null, null);
    }
    function View_NgbDatepickerMonthView_3(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'td', [[
                    'class',
                    'weekday text-xs-center font-weight-bold'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ]))
        ], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = co.i18n.getWeekdayName(v.context.$implicit);
            ck(v, 1, 0, currVal_0);
        });
    }
    function View_NgbDatepickerMonthView_1(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerMonthView_2)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerMonthView_3)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.showWeekNumbers;
            ck(v, 3, 0, currVal_0);
            var currVal_1 = co.month.weekdays;
            ck(v, 6, 0, currVal_1);
        }, null);
    }
    function View_NgbDatepickerMonthView_5(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'td', [[
                    'class',
                    'weeknumber small text-xs-center'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ]))
        ], null, function (ck, v) {
            var currVal_0 = v.parent.context.$implicit.number;
            ck(v, 1, 0, currVal_0);
        });
    }
    function View_NgbDatepickerMonthView_7(l) {
        return viewDef(0, [(l()(), textDef(null, ['\n            ']))], null, null);
    }
    function View_NgbDatepickerMonthView_6(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 6, 'td', [[
                    'class',
                    'day'
                ]
            ], [
                [
                    2,
                    'disabled',
                    null
                ],
                [
                    2,
                    'collapsed',
                    null
                ],
                [
                    2,
                    'hidden',
                    null
                ]
            ], [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.doSelect(v.context.$implicit) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['\n            '])),
            (l()(), anchorDef(8388608, null, null, 3, null, View_NgbDatepickerMonthView_7)),
            directiveDef(270336, null, 0, NgTemplateOutlet, [ViewContainerRef], {
                ngTemplateOutlet: [
                    0,
                    'ngTemplateOutlet'
                ],
                ngOutletContext: [
                    1,
                    'ngOutletContext'
                ]
            }, null),
            pureObjectDef([
                'year',
                'month',
                'day'
            ]),
            pureObjectDef([
                'date',
                'currentMonth',
                'disabled',
                'selected'
            ]),
            (l()(), textDef(null, ['\n        ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_3 = co.dayTemplate;
            var currVal_4 = ck(v, 5, 0, ck(v, 4, 0, v.context.$implicit.date.year, v.context.$implicit.date.month, v.context.$implicit.date.day), co.month.number, co.isDisabled(v.context.$implicit), co.isSelected(v.context.$implicit.date));
            ck(v, 3, 0, currVal_3, currVal_4);
        }, function (ck, v) {
            var co = v.component;
            var currVal_0 = co.isDisabled(v.context.$implicit);
            var currVal_1 = co.isCollapsed(v.context.$implicit);
            var currVal_2 = co.isHidden(v.context.$implicit);
            ck(v, 0, 0, currVal_0, currVal_1, currVal_2);
        });
    }
    function View_NgbDatepickerMonthView_4(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 7, 'tr', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerMonthView_5)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerMonthView_6)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.showWeekNumbers;
            ck(v, 3, 0, currVal_0);
            var currVal_1 = v.context.$implicit.days;
            ck(v, 6, 0, currVal_1);
        }, null);
    }
    function View_NgbDatepickerMonthView_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 8, 'table', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 6, 'tbody', [], null, null, null, null, null)),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerMonthView_1)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepickerMonthView_4)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n  ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.showWeekdays;
            ck(v, 5, 0, currVal_0);
            var currVal_1 = co.month.weeks;
            ck(v, 8, 0, currVal_1);
        }, null);
    }
    function View_NgbDatepickerMonthView_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-datepicker-month-view', [], null, null, null, View_NgbDatepickerMonthView_0, RenderType_NgbDatepickerMonthView)),
            directiveDef(24576, null, 0, NgbDatepickerMonthView, [NgbDatepickerI18n], null, null)
        ], null, null);
    }
    var NgbDatepickerMonthViewNgFactory = createComponentFactory('ngb-datepicker-month-view', NgbDatepickerMonthView, View_NgbDatepickerMonthView_Host_0, {
        dayTemplate: 'dayTemplate',
        disabled: 'disabled',
        month: 'month',
        outsideDays: 'outsideDays',
        selectedDate: 'selectedDate',
        showWeekdays: 'showWeekdays',
        showWeekNumbers: 'showWeekNumbers'
    }, { select: 'select' }, []);
    var styles_NgbDatepicker = ['.month[_ngcontent-%COMP%]:first-child {\n      padding-left: 0 !important;\n    }'];
    var RenderType_NgbDatepicker = createRendererType2({
        encapsulation: 0,
        styles: styles_NgbDatepicker,
        data: {}
    });
    function View_NgbDatepicker_1(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n       '])),
            (l()(), elementDef(0, null, null, 1, 'div', [[
                    'ngbDatepickerDayView',
                    ''
                ]
            ], [
                [
                    2,
                    'bg-primary',
                    null
                ],
                [
                    2,
                    'text-white',
                    null
                ],
                [
                    2,
                    'text-muted',
                    null
                ],
                [
                    2,
                    'btn-secondary',
                    null
                ]
            ], null, null, View_NgbDatepickerDayView_0, RenderType_NgbDatepickerDayView)),
            directiveDef(24576, null, 0, NgbDatepickerDayView, [], {
                currentMonth: [
                    0,
                    'currentMonth'
                ],
                date: [
                    1,
                    'date'
                ],
                disabled: [
                    2,
                    'disabled'
                ],
                selected: [
                    3,
                    'selected'
                ]
            }, null),
            (l()(), textDef(null, ['\n    ']))
        ], function (ck, v) {
            var currVal_4 = v.context.currentMonth;
            var currVal_5 = v.context.date;
            var currVal_6 = v.context.disabled;
            var currVal_7 = v.context.selected;
            ck(v, 2, 0, currVal_4, currVal_5, currVal_6, currVal_7);
        }, function (ck, v) {
            var currVal_0 = nodeValue(v, 2).selected;
            var currVal_1 = nodeValue(v, 2).selected;
            var currVal_2 = nodeValue(v, 2).isMuted();
            var currVal_3 = !nodeValue(v, 2).disabled;
            ck(v, 1, 0, currVal_0, currVal_1, currVal_2, currVal_3);
        });
    }
    function View_NgbDatepicker_2(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 2, 'ngb-datepicker-navigation', [], null, [
                [
                    null,
                    'navigate'
                ],
                [
                    null,
                    'select'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('navigate' === en)) {
                    var pd_0 = (co.onNavigateEvent($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('select' === en)) {
                    var pd_1 = (co.onNavigateDateSelect($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_NgbDatepickerNavigation_0, RenderType_NgbDatepickerNavigation)),
            directiveDef(24576, null, 0, NgbDatepickerNavigation, [
                NgbDatepickerI18n,
                NgbCalendar
            ], {
                date: [
                    0,
                    'date'
                ],
                disabled: [
                    1,
                    'disabled'
                ],
                maxDate: [
                    2,
                    'maxDate'
                ],
                minDate: [
                    3,
                    'minDate'
                ],
                showSelect: [
                    4,
                    'showSelect'
                ],
                showWeekNumbers: [
                    5,
                    'showWeekNumbers'
                ]
            }, {
                navigate: 'navigate',
                select: 'select'
            }),
            (l()(), textDef(null, ['\n    ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = ((co.months[0] == null) ? null : co.months[0].firstDate);
            var currVal_1 = co.disabled;
            var currVal_2 = co._maxDate;
            var currVal_3 = co._minDate;
            var currVal_4 = (co.navigation === 'select');
            var currVal_5 = co.showWeekNumbers;
            ck(v, 1, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5);
        }, null);
    }
    function View_NgbDatepicker_4(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'td', [[
                    'class',
                    'text-xs-center font-weight-bold'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, [
                '\n          ',
                ' ',
                '\n        '
            ]))
        ], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = co.i18n.getMonthName(v.context.$implicit.number);
            var currVal_1 = v.context.$implicit.year;
            ck(v, 1, 0, currVal_0, currVal_1);
        });
    }
    function View_NgbDatepicker_3(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepicker_4)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.months;
            ck(v, 3, 0, currVal_0);
        }, null);
    }
    function View_NgbDatepicker_5(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 5, 'td', [[
                    'class',
                    'pl-1 month'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n          '])),
            (l()(), elementDef(0, null, null, 2, 'ngb-datepicker-month-view', [], null, [[
                    null,
                    'select'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('select' === en)) {
                    var pd_0 = (co.onDateSelect($event) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, View_NgbDatepickerMonthView_0, RenderType_NgbDatepickerMonthView)),
            directiveDef(24576, null, 0, NgbDatepickerMonthView, [NgbDatepickerI18n], {
                dayTemplate: [
                    0,
                    'dayTemplate'
                ],
                disabled: [
                    1,
                    'disabled'
                ],
                month: [
                    2,
                    'month'
                ],
                outsideDays: [
                    3,
                    'outsideDays'
                ],
                selectedDate: [
                    4,
                    'selectedDate'
                ],
                showWeekdays: [
                    5,
                    'showWeekdays'
                ],
                showWeekNumbers: [
                    6,
                    'showWeekNumbers'
                ]
            }, { select: 'select' }),
            (l()(), textDef(null, ['\n          '])),
            (l()(), textDef(null, ['\n        ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = (co.dayTemplate || nodeValue(v.parent, 1));
            var currVal_1 = co.disabled;
            var currVal_2 = v.context.$implicit;
            var currVal_3 = ((co.displayMonths === 1) ? co.outsideDays : 'hidden');
            var currVal_4 = co.model;
            var currVal_5 = co.showWeekdays;
            var currVal_6 = co.showWeekNumbers;
            ck(v, 3, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
        }, null);
    }
    function View_NgbDatepicker_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), anchorDef(0, [[
                    'dt',
                    2
                ]
            ], null, 0, null, View_NgbDatepicker_1)),
            (l()(), textDef(null, ['\n\n    '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepicker_2)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n\n    '])),
            (l()(), elementDef(0, null, null, 11, 'table', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 9, 'tbody', [], null, null, null, null, null)),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepicker_3)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 4, 'tr', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_NgbDatepicker_5)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n      '])),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n  ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = (co.navigation !== 'none');
            ck(v, 4, 0, currVal_0);
            var currVal_1 = ((co.navigation !== 'select') || (co.displayMonths > 1));
            ck(v, 10, 0, currVal_1);
            var currVal_2 = co.months;
            ck(v, 15, 0, currVal_2);
        }, null);
    }
    function View_NgbDatepicker_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 2, 'ngb-datepicker', [[
                    'class',
                    'd-inline-block'
                ]
            ], null, null, null, View_NgbDatepicker_0, RenderType_NgbDatepicker)),
            directiveDef(319488, null, 0, NgbDatepicker, [
                NgbDatepickerService,
                NgbCalendar,
                NgbDatepickerI18n,
                NgbDatepickerConfig
            ], null, null),
            providerDef(2560, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [NgbDatepicker])
        ], function (ck, v) {
            ck(v, 1, 0);
        }, null);
    }
    var NgbDatepickerNgFactory = createComponentFactory('ngb-datepicker', NgbDatepicker, View_NgbDatepicker_Host_0, {
        dayTemplate: 'dayTemplate',
        displayMonths: 'displayMonths',
        firstDayOfWeek: 'firstDayOfWeek',
        markDisabled: 'markDisabled',
        minDate: 'minDate',
        maxDate: 'maxDate',
        navigation: 'navigation',
        outsideDays: 'outsideDays',
        showWeekdays: 'showWeekdays',
        showWeekNumbers: 'showWeekNumbers',
        startDate: 'startDate'
    }, { navigate: 'navigate' }, []);
    var styles_NgbModalBackdrop = [];
    var RenderType_NgbModalBackdrop = createRendererType2({
        encapsulation: 2,
        styles: styles_NgbModalBackdrop,
        data: {}
    });
    function View_NgbModalBackdrop_0(l) {
        return viewDef(0, [], null, null);
    }
    function View_NgbModalBackdrop_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-modal-backdrop', [[
                    'class',
                    'modal-backdrop fade in'
                ]
            ], null, null, null, View_NgbModalBackdrop_0, RenderType_NgbModalBackdrop)),
            directiveDef(24576, null, 0, NgbModalBackdrop, [], null, null)
        ], null, null);
    }
    var NgbModalBackdropNgFactory = createComponentFactory('ngb-modal-backdrop', NgbModalBackdrop, View_NgbModalBackdrop_Host_0, {}, {}, []);
    var styles_NgbModalWindow = [];
    var RenderType_NgbModalWindow = createRendererType2({
        encapsulation: 2,
        styles: styles_NgbModalWindow,
        data: {}
    });
    function View_NgbModalWindow_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 4, 'div', [[
                    'role',
                    'document'
                ]
            ], [[
                    8,
                    'className',
                    0
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), elementDef(0, null, null, 1, 'div', [[
                    'class',
                    'modal-content'
                ]
            ], null, null, null, null, null)),
            ngContentDef(null, 0),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n    ']))
        ], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = ('modal-dialog' + (co.size ? (' modal-' + co.size) : ''));
            ck(v, 1, 0, currVal_0);
        });
    }
    function View_NgbModalWindow_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-modal-window', [
                [
                    'role',
                    'dialog'
                ],
                [
                    'style',
                    'display: block;'
                ],
                [
                    'tabindex',
                    '-1'
                ]
            ], [[
                    8,
                    'className',
                    0
                ]
            ], [
                [
                    null,
                    'keyup.esc'
                ],
                [
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                if (('keyup.esc' === en)) {
                    var pd_0 = (nodeValue(v, 1).escKey($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('click' === en)) {
                    var pd_1 = (nodeValue(v, 1).backdropClick($event) !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, View_NgbModalWindow_0, RenderType_NgbModalWindow)),
            directiveDef(2220032, null, 0, NgbModalWindow, [
                ElementRef,
                Renderer
            ], null, null)
        ], function (ck, v) {
            ck(v, 1, 0);
        }, function (ck, v) {
            var currVal_0 = ('modal fade in' + (nodeValue(v, 1).windowClass ? (' ' + nodeValue(v, 1).windowClass) : ''));
            ck(v, 0, 0, currVal_0);
        });
    }
    var NgbModalWindowNgFactory = createComponentFactory('ngb-modal-window', NgbModalWindow, View_NgbModalWindow_Host_0, {
        backdrop: 'backdrop',
        keyboard: 'keyboard',
        size: 'size',
        windowClass: 'windowClass'
    }, { dismissEvent: 'dismiss' }, ['*']);
    var styles_NgbPopoverWindow = [];
    var RenderType_NgbPopoverWindow = createRendererType2({
        encapsulation: 2,
        styles: styles_NgbPopoverWindow,
        data: {}
    });
    function View_NgbPopoverWindow_0(l) {
        return viewDef(2, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 0, 'div', [[
                    'class',
                    'popover-arrow'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 1, 'h3', [[
                    'class',
                    'popover-title'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ])),
            (l()(), elementDef(0, null, null, 1, 'div', [[
                    'class',
                    'popover-content'
                ]
            ], null, null, null, null, null)),
            ngContentDef(null, 0),
            (l()(), textDef(null, ['\n    ']))
        ], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = co.title;
            ck(v, 4, 0, currVal_0);
        });
    }
    function View_NgbPopoverWindow_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'ngb-popover-window', [[
                    'role',
                    'tooltip'
                ]
            ], [[
                    8,
                    'className',
                    0
                ]
            ], null, null, View_NgbPopoverWindow_0, RenderType_NgbPopoverWindow)),
            directiveDef(24576, null, 0, NgbPopoverWindow, [], null, null)
        ], null, function (ck, v) {
            var currVal_0 = ('popover in popover-' + nodeValue(v, 1).placement);
            ck(v, 0, 0, currVal_0);
        });
    }
    var NgbPopoverWindowNgFactory = createComponentFactory('ngb-popover-window', NgbPopoverWindow, View_NgbPopoverWindow_Host_0, {
        placement: 'placement',
        title: 'title'
    }, {}, ['*']);
    var styles_HomeComponent = [];
    var RenderType_HomeComponent = createRendererType2({
        encapsulation: 2,
        styles: styles_HomeComponent,
        data: {}
    });
    function View_HomeComponent_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n\n'])),
            (l()(), elementDef(0, null, null, 1, 'h2', [], null, null, null, null, null)),
            (l()(), textDef(null, ['Home View'])),
            (l()(), textDef(null, ['\n\n'])),
            (l()(), elementDef(0, null, null, 55, 'div', [[
                    'class',
                    'embedded-page'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n\n    '])),
            (l()(), elementDef(0, null, null, 52, 'div', [[
                    'class',
                    'container-fluid'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), elementDef(0, null, null, 49, 'div', [[
                    'class',
                    'row'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n            '])),
            (l()(), elementDef(0, null, null, 46, 'div', [[
                    'class',
                    'col-lg-4 col-md-5 col-sm-6'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 43, 'article', [[
                    'class',
                    'panel panel-alt'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                    '])),
            (l()(), elementDef(0, null, null, 1, 'div', [[
                    'class',
                    'panel-heading'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Login'])),
            (l()(), textDef(null, ['\n                    '])),
            (l()(), elementDef(0, null, null, 37, 'div', [[
                    'class',
                    'panel-body panel-list'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n\n                        '])),
            (l()(), elementDef(0, null, null, 34, 'form', [
                [
                    'class',
                    'login-form ng-pristine ng-valid'
                ],
                [
                    'novalidate',
                    ''
                ]
            ], [
                [
                    2,
                    'ng-untouched',
                    null
                ],
                [
                    2,
                    'ng-touched',
                    null
                ],
                [
                    2,
                    'ng-pristine',
                    null
                ],
                [
                    2,
                    'ng-dirty',
                    null
                ],
                [
                    2,
                    'ng-valid',
                    null
                ],
                [
                    2,
                    'ng-invalid',
                    null
                ],
                [
                    2,
                    'ng-pending',
                    null
                ]
            ], [
                [
                    null,
                    'submit'
                ],
                [
                    null,
                    'reset'
                ]
            ], function (v, en, $event) {
                var ad = true;
                if (('submit' === en)) {
                    var pd_0 = (nodeValue(v, 21).onSubmit($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('reset' === en)) {
                    var pd_1 = (nodeValue(v, 21).onReset() !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)),
            directiveDef(8192, null, 0, NgNoValidate, [], null, null),
            directiveDef(8192, null, 0, NgForm, [
                [
                    8,
                    null
                ],
                [
                    8,
                    null
                ]
            ], null, null),
            providerDef(1024, null, ControlContainer, null, [NgForm]),
            directiveDef(8192, null, 0, NgControlStatusGroup, [ControlContainer], null, null),
            (l()(), textDef(null, ['\n\n                            '])),
            (l()(), elementDef(0, null, null, 11, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                                '])),
            (l()(), elementDef(0, null, null, 8, 'div', [[
                    'class',
                    'col-no-pad'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                                    '])),
            (l()(), elementDef(0, null, null, 5, 'input', [
                [
                    'class',
                    'form-control'
                ],
                [
                    'id',
                    'txtLogin'
                ],
                [
                    'name',
                    'txtLogin'
                ],
                [
                    'placeholder',
                    'Username'
                ],
                [
                    'type',
                    'text'
                ]
            ], [
                [
                    2,
                    'ng-untouched',
                    null
                ],
                [
                    2,
                    'ng-touched',
                    null
                ],
                [
                    2,
                    'ng-pristine',
                    null
                ],
                [
                    2,
                    'ng-dirty',
                    null
                ],
                [
                    2,
                    'ng-valid',
                    null
                ],
                [
                    2,
                    'ng-invalid',
                    null
                ],
                [
                    2,
                    'ng-pending',
                    null
                ]
            ], [
                [
                    null,
                    'ngModelChange'
                ],
                [
                    null,
                    'input'
                ],
                [
                    null,
                    'blur'
                ],
                [
                    null,
                    'compositionstart'
                ],
                [
                    null,
                    'compositionend'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(v, 30)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(v, 30).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(v, 30)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(v, 30)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((co.userName = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)),
            directiveDef(8192, null, 0, DefaultValueAccessor, [
                Renderer,
                ElementRef,
                [
                    2,
                    COMPOSITION_BUFFER_MODE
                ]
            ], null, null),
            providerDef(512, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]),
            directiveDef(335872, null, 0, NgModel, [
                [
                    2,
                    ControlContainer
                ],
                [
                    8,
                    null
                ],
                [
                    8,
                    null
                ],
                [
                    2,
                    NG_VALUE_ACCESSOR
                ]
            ], {
                name: [
                    0,
                    'name'
                ],
                model: [
                    1,
                    'model'
                ]
            }, { update: 'ngModelChange' }),
            providerDef(1024, null, NgControl, null, [NgModel]),
            directiveDef(8192, null, 0, NgControlStatus, [NgControl], null, null),
            (l()(), textDef(null, ['\n                                '])),
            (l()(), textDef(null, ['\n                            '])),
            (l()(), textDef(null, ['\n\n                            '])),
            (l()(), elementDef(0, null, null, 11, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                                '])),
            (l()(), elementDef(0, null, null, 8, 'div', [[
                    'class',
                    'col-no-pad'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                                    '])),
            (l()(), elementDef(0, null, null, 5, 'input', [
                [
                    'class',
                    'form-control'
                ],
                [
                    'id',
                    'txtPassword'
                ],
                [
                    'name',
                    'txtPassword'
                ],
                [
                    'placeholder',
                    'Password'
                ],
                [
                    'type',
                    'password'
                ]
            ], [
                [
                    2,
                    'ng-untouched',
                    null
                ],
                [
                    2,
                    'ng-touched',
                    null
                ],
                [
                    2,
                    'ng-pristine',
                    null
                ],
                [
                    2,
                    'ng-dirty',
                    null
                ],
                [
                    2,
                    'ng-valid',
                    null
                ],
                [
                    2,
                    'ng-invalid',
                    null
                ],
                [
                    2,
                    'ng-pending',
                    null
                ]
            ], [
                [
                    null,
                    'ngModelChange'
                ],
                [
                    null,
                    'input'
                ],
                [
                    null,
                    'blur'
                ],
                [
                    null,
                    'compositionstart'
                ],
                [
                    null,
                    'compositionend'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(v, 43)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(v, 43).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(v, 43)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(v, 43)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((co.password = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)),
            directiveDef(8192, null, 0, DefaultValueAccessor, [
                Renderer,
                ElementRef,
                [
                    2,
                    COMPOSITION_BUFFER_MODE
                ]
            ], null, null),
            providerDef(512, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]),
            directiveDef(335872, null, 0, NgModel, [
                [
                    2,
                    ControlContainer
                ],
                [
                    8,
                    null
                ],
                [
                    8,
                    null
                ],
                [
                    2,
                    NG_VALUE_ACCESSOR
                ]
            ], {
                name: [
                    0,
                    'name'
                ],
                model: [
                    1,
                    'model'
                ]
            }, { update: 'ngModelChange' }),
            providerDef(1024, null, NgControl, null, [NgModel]),
            directiveDef(8192, null, 0, NgControlStatus, [NgControl], null, null),
            (l()(), textDef(null, ['\n\n                                '])),
            (l()(), textDef(null, ['\n                            '])),
            (l()(), textDef(null, ['\n\n                            '])),
            (l()(), elementDef(0, null, null, 1, 'button', [
                [
                    'class',
                    'btn btn-circ btn-primary'
                ],
                [
                    'id',
                    'btnSignIn'
                ]
            ], null, [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.login() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['Sign In'])),
            (l()(), textDef(null, ['\n                        '])),
            (l()(), textDef(null, ['\n                    '])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), textDef(null, ['\n            '])),
            (l()(), textDef(null, ['\n        '])),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_14 = 'txtLogin';
            var currVal_15 = co.userName;
            ck(v, 32, 0, currVal_14, currVal_15);
            var currVal_23 = 'txtPassword';
            var currVal_24 = co.password;
            ck(v, 45, 0, currVal_23, currVal_24);
        }, function (ck, v) {
            var currVal_0 = nodeValue(v, 23).ngClassUntouched;
            var currVal_1 = nodeValue(v, 23).ngClassTouched;
            var currVal_2 = nodeValue(v, 23).ngClassPristine;
            var currVal_3 = nodeValue(v, 23).ngClassDirty;
            var currVal_4 = nodeValue(v, 23).ngClassValid;
            var currVal_5 = nodeValue(v, 23).ngClassInvalid;
            var currVal_6 = nodeValue(v, 23).ngClassPending;
            ck(v, 19, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_7 = nodeValue(v, 34).ngClassUntouched;
            var currVal_8 = nodeValue(v, 34).ngClassTouched;
            var currVal_9 = nodeValue(v, 34).ngClassPristine;
            var currVal_10 = nodeValue(v, 34).ngClassDirty;
            var currVal_11 = nodeValue(v, 34).ngClassValid;
            var currVal_12 = nodeValue(v, 34).ngClassInvalid;
            var currVal_13 = nodeValue(v, 34).ngClassPending;
            ck(v, 29, 0, currVal_7, currVal_8, currVal_9, currVal_10, currVal_11, currVal_12, currVal_13);
            var currVal_16 = nodeValue(v, 47).ngClassUntouched;
            var currVal_17 = nodeValue(v, 47).ngClassTouched;
            var currVal_18 = nodeValue(v, 47).ngClassPristine;
            var currVal_19 = nodeValue(v, 47).ngClassDirty;
            var currVal_20 = nodeValue(v, 47).ngClassValid;
            var currVal_21 = nodeValue(v, 47).ngClassInvalid;
            var currVal_22 = nodeValue(v, 47).ngClassPending;
            ck(v, 42, 0, currVal_16, currVal_17, currVal_18, currVal_19, currVal_20, currVal_21, currVal_22);
        });
    }
    function View_HomeComponent_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'home', [], null, null, null, View_HomeComponent_0, RenderType_HomeComponent)),
            directiveDef(24576, null, 0, HomeComponent, [Router], null, null)
        ], null, null);
    }
    var HomeComponentNgFactory = createComponentFactory('home', HomeComponent, View_HomeComponent_Host_0, {}, {}, []);
    var styles_FruitListComponent = [];
    var RenderType_FruitListComponent = createRendererType2({
        encapsulation: 2,
        styles: styles_FruitListComponent,
        data: {}
    });
    function View_FruitListComponent_1(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'div', [], null, null, null, null, null)),
            (l()(), textDef(null, ['loading...']))
        ], null, null);
    }
    function View_FruitListComponent_3(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 14, 'tr', [], null, [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.loadDetail(v.context.$implicit) !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 2, 'td', [], null, null, null, null, null)),
            (l()(), elementDef(0, null, null, 1, 'a', [[
                    'target',
                    'new'
                ]
            ], [[
                    8,
                    'href',
                    4
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
            (l()(), textDef(null, [
                '',
                ''
            ])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'td', [], null, null, null, null, null)),
            (l()(), elementDef(0, null, null, 0, 'img', [[
                    'style',
                    'height: 75px; width: 75px;'
                ]
            ], [[
                    8,
                    'src',
                    4
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n            ']))
        ], null, function (ck, v) {
            var currVal_0 = inlineInterpolate(1, '', v.context.$implicit.url, '');
            ck(v, 3, 0, currVal_0);
            var currVal_1 = v.context.$implicit.common_name;
            ck(v, 4, 0, currVal_1);
            var currVal_2 = v.context.$implicit.species;
            ck(v, 7, 0, currVal_2);
            var currVal_3 = v.context.$implicit.region;
            ck(v, 10, 0, currVal_3);
            var currVal_4 = inlineInterpolate(1, '', v.context.$implicit.image_url, '');
            ck(v, 13, 0, currVal_4);
        });
    }
    function View_FruitListComponent_2(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 26, 'table', [[
                    'class',
                    'table table-condensed table-hover'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n        '])),
            (l()(), elementDef(0, null, null, 16, 'thead', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n            '])),
            (l()(), elementDef(0, null, null, 13, 'tr', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'th', [[
                    'style',
                    'width: 200px;'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Name'])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'th', [[
                    'style',
                    'width: 200px;'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Species'])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'th', [[
                    'style',
                    'width: 200px;'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Region'])),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 1, 'th', [], null, null, null, null, null)),
            (l()(), textDef(null, ['Image'])),
            (l()(), textDef(null, ['\n            '])),
            (l()(), textDef(null, ['\n        '])),
            (l()(), textDef(null, ['\n        '])),
            (l()(), elementDef(0, null, null, 5, 'tbody', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n            '])),
            (l()(), textDef(null, ['\n            '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_FruitListComponent_3)),
            directiveDef(401408, null, 0, NgForOf, [
                ViewContainerRef,
                TemplateRef,
                IterableDiffers
            ], { ngForOf: [
                    0,
                    'ngForOf'
                ]
            }, null),
            (l()(), textDef(null, ['\n        '])),
            (l()(), textDef(null, ['\n    ']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.rowData;
            ck(v, 24, 0, currVal_0);
        }, null);
    }
    function View_FruitListComponent_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n\n'])),
            (l()(), elementDef(0, null, null, 15, 'div', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n\n    '])),
            (l()(), elementDef(0, null, null, 1, 'h2', [], null, null, null, null, null)),
            (l()(), textDef(null, ['List View'])),
            (l()(), textDef(null, ['\n\n    '])),
            (l()(), textDef(null, ['\n    '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_FruitListComponent_1)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n    \n    '])),
            (l()(), elementDef(0, null, null, 1, 'button', [[
                    'class',
                    'btn btn-circ btn-primary'
                ]
            ], null, [[
                    null,
                    'click'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('click' === en)) {
                    var pd_0 = (co.loadVendor() !== false);
                    ad = (pd_0 && ad);
                }
                return ad;
            }, null, null)),
            (l()(), textDef(null, ['Lazy Load Vendor Module'])),
            (l()(), textDef(null, ['\n\n    '])),
            (l()(), textDef(null, ['\n    '])),
            (l()(), anchorDef(8388608, null, null, 1, null, View_FruitListComponent_2)),
            directiveDef(8192, null, 0, NgIf, [
                ViewContainerRef,
                TemplateRef
            ], { ngIf: [
                    0,
                    'ngIf'
                ]
            }, null),
            (l()(), textDef(null, ['\n']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_0 = co.loading;
            ck(v, 8, 0, currVal_0);
            var currVal_1 = !co.loading;
            ck(v, 15, 0, currVal_1);
        }, null);
    }
    function View_FruitListComponent_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 2, 'fruit-list', [], null, null, null, View_FruitListComponent_0, RenderType_FruitListComponent)),
            providerDef(256, null, FruitService, FruitService, [Http]),
            directiveDef(57344, null, 0, FruitListComponent, [
                FruitService,
                Router
            ], null, null)
        ], function (ck, v) {
            ck(v, 2, 0);
        }, null);
    }
    var FruitListComponentNgFactory = createComponentFactory('fruit-list', FruitListComponent, View_FruitListComponent_Host_0, {}, {}, []);
    var styles_FruitItemImageComponent = [];
    var RenderType_FruitItemImageComponent = createRendererType2({
        encapsulation: 2,
        styles: styles_FruitItemImageComponent,
        data: {}
    });
    function View_FruitItemImageComponent_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 6, 'div', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n                '])),
            (l()(), elementDef(0, null, null, 3, 'a', [[
                    'target',
                    'new'
                ]
            ], [[
                    8,
                    'href',
                    4
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n                    '])),
            (l()(), elementDef(0, null, null, 0, 'img', [], [[
                    8,
                    'src',
                    4
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n                '])),
            (l()(), textDef(null, ['\n            ']))
        ], null, function (ck, v) {
            var co = v.component;
            var currVal_0 = inlineInterpolate(1, '', co.targetUrl, '');
            ck(v, 2, 0, currVal_0);
            var currVal_1 = inlineInterpolate(1, '', co.imageUrl, '');
            ck(v, 4, 0, currVal_1);
        });
    }
    function View_FruitItemImageComponent_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'fruititem-image', [], null, null, null, View_FruitItemImageComponent_0, RenderType_FruitItemImageComponent)),
            directiveDef(24576, null, 0, FruitItemImageComponent, [], null, null)
        ], null, null);
    }
    var FruitItemImageComponentNgFactory = createComponentFactory('fruititem-image', FruitItemImageComponent, View_FruitItemImageComponent_Host_0, {
        targetUrl: 'targetUrl',
        imageUrl: 'imageUrl'
    }, {}, []);
    var styles_FruitDetailComponent = [];
    var RenderType_FruitDetailComponent = createRendererType2({
        encapsulation: 2,
        styles: styles_FruitDetailComponent,
        data: {}
    });
    function View_FruitDetailComponent_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n\n'])),
            (l()(), elementDef(0, null, null, 1, 'h2', [], null, null, null, null, null)),
            (l()(), textDef(null, ['Detail View'])),
            (l()(), textDef(null, ['\n'])),
            (l()(), elementDef(0, null, null, 78, 'div', [[
                    'class',
                    'form'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n	'])),
            (l()(), elementDef(0, null, null, 75, 'form', [[
                    'novalidate',
                    ''
                ]
            ], [
                [
                    2,
                    'ng-untouched',
                    null
                ],
                [
                    2,
                    'ng-touched',
                    null
                ],
                [
                    2,
                    'ng-pristine',
                    null
                ],
                [
                    2,
                    'ng-dirty',
                    null
                ],
                [
                    2,
                    'ng-valid',
                    null
                ],
                [
                    2,
                    'ng-invalid',
                    null
                ],
                [
                    2,
                    'ng-pending',
                    null
                ]
            ], [
                [
                    null,
                    'submit'
                ],
                [
                    null,
                    'reset'
                ]
            ], function (v, en, $event) {
                var ad = true;
                if (('submit' === en)) {
                    var pd_0 = (nodeValue(v, 8).onSubmit($event) !== false);
                    ad = (pd_0 && ad);
                }
                if (('reset' === en)) {
                    var pd_1 = (nodeValue(v, 8).onReset() !== false);
                    ad = (pd_1 && ad);
                }
                return ad;
            }, null, null)),
            directiveDef(8192, null, 0, NgNoValidate, [], null, null),
            directiveDef(8192, null, 0, NgForm, [
                [
                    8,
                    null
                ],
                [
                    8,
                    null
                ]
            ], null, null),
            providerDef(1024, null, ControlContainer, null, [NgForm]),
            directiveDef(8192, null, 0, NgControlStatusGroup, [ControlContainer], null, null),
            (l()(), textDef(null, ['\n		'])),
            (l()(), elementDef(0, null, null, 8, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), elementDef(0, null, null, 5, 'div', [[
                    'class',
                    'col-md-8'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n				'])),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 1, 'fruititem-image', [], null, null, null, View_FruitItemImageComponent_0, RenderType_FruitItemImageComponent)),
            directiveDef(24576, null, 0, FruitItemImageComponent, [], {
                targetUrl: [
                    0,
                    'targetUrl'
                ],
                imageUrl: [
                    1,
                    'imageUrl'
                ]
            }, null),
            (l()(), textDef(null, ['\n			'])),
            (l()(), textDef(null, ['\n		'])),
            (l()(), textDef(null, ['\n\n		'])),
            (l()(), elementDef(0, null, null, 10, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), elementDef(0, null, null, 7, 'div', [[
                    'class',
                    'col-md-8'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 1, 'label', [[
                    'class',
                    'control-label'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['ID'])),
            (l()(), textDef(null, ['\n				'])),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 0, 'input', [
                [
                    'class',
                    'form-control'
                ],
                [
                    'name',
                    'id'
                ],
                [
                    'readonly',
                    ''
                ],
                [
                    'required',
                    ''
                ],
                [
                    'type',
                    'text'
                ]
            ], [[
                    8,
                    'value',
                    0
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), textDef(null, ['\n		'])),
            (l()(), textDef(null, ['\n\n		'])),
            (l()(), elementDef(0, null, null, 9, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), elementDef(0, null, null, 6, 'div', [[
                    'class',
                    'col-md-8'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 1, 'label', [[
                    'class',
                    'control-label'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Common Name'])),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 0, 'input', [
                [
                    'class',
                    'form-control'
                ],
                [
                    'name',
                    'common_name'
                ],
                [
                    'required',
                    ''
                ],
                [
                    'type',
                    'text'
                ]
            ], [[
                    8,
                    'value',
                    0
                ]
            ], null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), textDef(null, ['\n		'])),
            (l()(), textDef(null, ['\n\n		'])),
            (l()(), elementDef(0, null, null, 17, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), elementDef(0, null, null, 14, 'div', [[
                    'class',
                    'col-md-8'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 1, 'label', [[
                    'class',
                    'control-label'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Species'])),
            (l()(), textDef(null, ['\n                	'])),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 7, 'input', [
                [
                    'class',
                    'form-control'
                ],
                [
                    'name',
                    'species'
                ],
                [
                    'required',
                    ''
                ],
                [
                    'type',
                    'text'
                ]
            ], [
                [
                    1,
                    'required',
                    0
                ],
                [
                    2,
                    'ng-untouched',
                    null
                ],
                [
                    2,
                    'ng-touched',
                    null
                ],
                [
                    2,
                    'ng-pristine',
                    null
                ],
                [
                    2,
                    'ng-dirty',
                    null
                ],
                [
                    2,
                    'ng-valid',
                    null
                ],
                [
                    2,
                    'ng-invalid',
                    null
                ],
                [
                    2,
                    'ng-pending',
                    null
                ]
            ], [
                [
                    null,
                    'ngModelChange'
                ],
                [
                    null,
                    'input'
                ],
                [
                    null,
                    'blur'
                ],
                [
                    null,
                    'compositionstart'
                ],
                [
                    null,
                    'compositionend'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(v, 54)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(v, 54).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(v, 54)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(v, 54)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((co.currentFruitItem.species = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)),
            directiveDef(8192, null, 0, DefaultValueAccessor, [
                Renderer,
                ElementRef,
                [
                    2,
                    COMPOSITION_BUFFER_MODE
                ]
            ], null, null),
            directiveDef(8192, null, 0, RequiredValidator, [], { required: [
                    0,
                    'required'
                ]
            }, null),
            providerDef(512, null, NG_VALIDATORS, function (p0_0) {
                return [p0_0];
            }, [RequiredValidator]),
            providerDef(512, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]),
            directiveDef(335872, null, 0, NgModel, [
                [
                    2,
                    ControlContainer
                ],
                [
                    2,
                    NG_VALIDATORS
                ],
                [
                    8,
                    null
                ],
                [
                    2,
                    NG_VALUE_ACCESSOR
                ]
            ], {
                name: [
                    0,
                    'name'
                ],
                model: [
                    1,
                    'model'
                ]
            }, { update: 'ngModelChange' }),
            providerDef(1024, null, NgControl, null, [NgModel]),
            directiveDef(8192, null, 0, NgControlStatus, [NgControl], null, null),
            (l()(), textDef(null, ['\n			'])),
            (l()(), textDef(null, ['\n		'])),
            (l()(), textDef(null, ['\n\n		'])),
            (l()(), elementDef(0, null, null, 16, 'div', [[
                    'class',
                    'form-group'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n			'])),
            (l()(), elementDef(0, null, null, 13, 'div', [[
                    'class',
                    'col-md-8'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['\n				'])),
            (l()(), elementDef(0, null, null, 1, 'label', [[
                    'class',
                    'control-label'
                ]
            ], null, null, null, null, null)),
            (l()(), textDef(null, ['Region'])),
            (l()(), textDef(null, ['			\n				'])),
            (l()(), elementDef(0, null, null, 7, 'input', [
                [
                    'class',
                    'form-control'
                ],
                [
                    'name',
                    'region'
                ],
                [
                    'required',
                    ''
                ],
                [
                    'type',
                    'text'
                ]
            ], [
                [
                    1,
                    'required',
                    0
                ],
                [
                    2,
                    'ng-untouched',
                    null
                ],
                [
                    2,
                    'ng-touched',
                    null
                ],
                [
                    2,
                    'ng-pristine',
                    null
                ],
                [
                    2,
                    'ng-dirty',
                    null
                ],
                [
                    2,
                    'ng-valid',
                    null
                ],
                [
                    2,
                    'ng-invalid',
                    null
                ],
                [
                    2,
                    'ng-pending',
                    null
                ]
            ], [
                [
                    null,
                    'ngModelChange'
                ],
                [
                    null,
                    'input'
                ],
                [
                    null,
                    'blur'
                ],
                [
                    null,
                    'compositionstart'
                ],
                [
                    null,
                    'compositionend'
                ]
            ], function (v, en, $event) {
                var ad = true;
                var co = v.component;
                if (('input' === en)) {
                    var pd_0 = (nodeValue(v, 72)._handleInput($event.target.value) !== false);
                    ad = (pd_0 && ad);
                }
                if (('blur' === en)) {
                    var pd_1 = (nodeValue(v, 72).onTouched() !== false);
                    ad = (pd_1 && ad);
                }
                if (('compositionstart' === en)) {
                    var pd_2 = (nodeValue(v, 72)._compositionStart() !== false);
                    ad = (pd_2 && ad);
                }
                if (('compositionend' === en)) {
                    var pd_3 = (nodeValue(v, 72)._compositionEnd($event.target.value) !== false);
                    ad = (pd_3 && ad);
                }
                if (('ngModelChange' === en)) {
                    var pd_4 = ((co.currentFruitItem.region = $event) !== false);
                    ad = (pd_4 && ad);
                }
                return ad;
            }, null, null)),
            directiveDef(8192, null, 0, DefaultValueAccessor, [
                Renderer,
                ElementRef,
                [
                    2,
                    COMPOSITION_BUFFER_MODE
                ]
            ], null, null),
            directiveDef(8192, null, 0, RequiredValidator, [], { required: [
                    0,
                    'required'
                ]
            }, null),
            providerDef(512, null, NG_VALIDATORS, function (p0_0) {
                return [p0_0];
            }, [RequiredValidator]),
            providerDef(512, null, NG_VALUE_ACCESSOR, function (p0_0) {
                return [p0_0];
            }, [DefaultValueAccessor]),
            directiveDef(335872, null, 0, NgModel, [
                [
                    2,
                    ControlContainer
                ],
                [
                    2,
                    NG_VALIDATORS
                ],
                [
                    8,
                    null
                ],
                [
                    2,
                    NG_VALUE_ACCESSOR
                ]
            ], {
                name: [
                    0,
                    'name'
                ],
                model: [
                    1,
                    'model'
                ]
            }, { update: 'ngModelChange' }),
            providerDef(1024, null, NgControl, null, [NgModel]),
            directiveDef(8192, null, 0, NgControlStatus, [NgControl], null, null),
            (l()(), textDef(null, ['\n			'])),
            (l()(), textDef(null, ['\n		'])),
            (l()(), textDef(null, ['\n\n	'])),
            (l()(), textDef(null, ['\n']))
        ], function (ck, v) {
            var co = v.component;
            var currVal_7 = co.currentFruitItem.url;
            var currVal_8 = co.currentFruitItem.image_url;
            ck(v, 18, 0, currVal_7, currVal_8);
            var currVal_19 = '';
            ck(v, 55, 0, currVal_19);
            var currVal_20 = 'species';
            var currVal_21 = co.currentFruitItem.species;
            ck(v, 58, 0, currVal_20, currVal_21);
            var currVal_30 = '';
            ck(v, 73, 0, currVal_30);
            var currVal_31 = 'region';
            var currVal_32 = co.currentFruitItem.region;
            ck(v, 76, 0, currVal_31, currVal_32);
        }, function (ck, v) {
            var co = v.component;
            var currVal_0 = nodeValue(v, 10).ngClassUntouched;
            var currVal_1 = nodeValue(v, 10).ngClassTouched;
            var currVal_2 = nodeValue(v, 10).ngClassPristine;
            var currVal_3 = nodeValue(v, 10).ngClassDirty;
            var currVal_4 = nodeValue(v, 10).ngClassValid;
            var currVal_5 = nodeValue(v, 10).ngClassInvalid;
            var currVal_6 = nodeValue(v, 10).ngClassPending;
            ck(v, 6, 0, currVal_0, currVal_1, currVal_2, currVal_3, currVal_4, currVal_5, currVal_6);
            var currVal_9 = inlineInterpolate(1, '', co.currentFruitItem.id, '');
            ck(v, 30, 0, currVal_9);
            var currVal_10 = inlineInterpolate(1, '', co.currentFruitItem.common_name, '');
            ck(v, 41, 0, currVal_10);
            var currVal_11 = (nodeValue(v, 55).required ? '' : null);
            var currVal_12 = nodeValue(v, 60).ngClassUntouched;
            var currVal_13 = nodeValue(v, 60).ngClassTouched;
            var currVal_14 = nodeValue(v, 60).ngClassPristine;
            var currVal_15 = nodeValue(v, 60).ngClassDirty;
            var currVal_16 = nodeValue(v, 60).ngClassValid;
            var currVal_17 = nodeValue(v, 60).ngClassInvalid;
            var currVal_18 = nodeValue(v, 60).ngClassPending;
            ck(v, 53, 0, currVal_11, currVal_12, currVal_13, currVal_14, currVal_15, currVal_16, currVal_17, currVal_18);
            var currVal_22 = (nodeValue(v, 73).required ? '' : null);
            var currVal_23 = nodeValue(v, 78).ngClassUntouched;
            var currVal_24 = nodeValue(v, 78).ngClassTouched;
            var currVal_25 = nodeValue(v, 78).ngClassPristine;
            var currVal_26 = nodeValue(v, 78).ngClassDirty;
            var currVal_27 = nodeValue(v, 78).ngClassValid;
            var currVal_28 = nodeValue(v, 78).ngClassInvalid;
            var currVal_29 = nodeValue(v, 78).ngClassPending;
            ck(v, 71, 0, currVal_22, currVal_23, currVal_24, currVal_25, currVal_26, currVal_27, currVal_28, currVal_29);
        });
    }
    function View_FruitDetailComponent_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 2, 'fruit-detail', [], null, null, null, View_FruitDetailComponent_0, RenderType_FruitDetailComponent)),
            directiveDef(57344, null, 0, FruitDetailComponent, [ActivatedRoute], null, null),
            providerDef(2304, null, FruitService, FruitService, [Http])
        ], function (ck, v) {
            ck(v, 1, 0);
        }, null);
    }
    var FruitDetailComponentNgFactory = createComponentFactory('fruit-detail', FruitDetailComponent, View_FruitDetailComponent_Host_0, {}, {}, []);
    var styles_AppComponent = [];
    var RenderType_AppComponent = createRendererType2({
        encapsulation: 2,
        styles: styles_AppComponent,
        data: {}
    });
    function View_AppComponent_0(l) {
        return viewDef(0, [
            (l()(), textDef(null, ['\n    '])),
            (l()(), elementDef(0, null, null, 8, 'main', [], null, null, null, null, null)),
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(0, null, null, 1, 'h1', [], null, null, null, null, null)),
            (l()(), textDef(null, ['ng-rosetta: Angular 2 Version'])),
            (l()(), textDef(null, ['\n\n      '])),
            (l()(), textDef(null, ['\n      '])),
            (l()(), elementDef(8388608, null, null, 1, 'router-outlet', [], null, null, null, null, null)),
            directiveDef(73728, null, 0, RouterOutlet, [
                RouterOutletMap,
                ViewContainerRef,
                ComponentFactoryResolver,
                [
                    8,
                    null
                ]
            ], null, null),
            (l()(), textDef(null, ['\n    '])),
            (l()(), textDef(null, ['\n    ']))
        ], null, null);
    }
    function View_AppComponent_Host_0(l) {
        return viewDef(0, [
            (l()(), elementDef(0, null, null, 1, 'my-app', [], null, null, null, View_AppComponent_0, RenderType_AppComponent)),
            directiveDef(24576, null, 0, AppComponent, [], null, null)
        ], null, null);
    }
    var AppComponentNgFactory = createComponentFactory('my-app', AppComponent, View_AppComponent_Host_0, {}, {}, []);
    var __extends$15 = (undefined && undefined.__extends) || (function () {
        var extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    var AppModuleInjector = (function (_super) {
        __extends$15(AppModuleInjector, _super);
        function AppModuleInjector(parent) {
            return _super.call(this, parent, [
                NgbAlertNgFactory,
                NgbTooltipWindowNgFactory,
                NgbTypeaheadWindowNgFactory,
                NgbDatepickerNgFactory,
                NgbModalBackdropNgFactory,
                NgbModalWindowNgFactory,
                NgbPopoverWindowNgFactory,
                HomeComponentNgFactory,
                FruitListComponentNgFactory,
                FruitDetailComponentNgFactory,
                AppComponentNgFactory
            ], [AppComponentNgFactory]) || this;
        }
        Object.defineProperty(AppModuleInjector.prototype, "_LOCALE_ID_42", {
            get: function () {
                if ((this.__LOCALE_ID_42 == null)) {
                    (this.__LOCALE_ID_42 = _localeFactory(this.parent.get(LOCALE_ID, null)));
                }
                return this.__LOCALE_ID_42;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgLocalization_43", {
            get: function () {
                if ((this.__NgLocalization_43 == null)) {
                    (this.__NgLocalization_43 = new NgLocaleLocalization(this._LOCALE_ID_42));
                }
                return this.__NgLocalization_43;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_APP_ID_44", {
            get: function () {
                if ((this.__APP_ID_44 == null)) {
                    (this.__APP_ID_44 = _appIdRandomProviderFactory());
                }
                return this.__APP_ID_44;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_IterableDiffers_45", {
            get: function () {
                if ((this.__IterableDiffers_45 == null)) {
                    (this.__IterableDiffers_45 = _iterableDiffersFactory());
                }
                return this.__IterableDiffers_45;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_KeyValueDiffers_46", {
            get: function () {
                if ((this.__KeyValueDiffers_46 == null)) {
                    (this.__KeyValueDiffers_46 = _keyValueDiffersFactory());
                }
                return this.__KeyValueDiffers_46;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_DomSanitizer_47", {
            get: function () {
                if ((this.__DomSanitizer_47 == null)) {
                    (this.__DomSanitizer_47 = new DomSanitizerImpl(this.parent.get(DOCUMENT)));
                }
                return this.__DomSanitizer_47;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_Sanitizer_48", {
            get: function () {
                if ((this.__Sanitizer_48 == null)) {
                    (this.__Sanitizer_48 = this._DomSanitizer_47);
                }
                return this.__Sanitizer_48;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_HAMMER_GESTURE_CONFIG_49", {
            get: function () {
                if ((this.__HAMMER_GESTURE_CONFIG_49 == null)) {
                    (this.__HAMMER_GESTURE_CONFIG_49 = new HammerGestureConfig());
                }
                return this.__HAMMER_GESTURE_CONFIG_49;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_EVENT_MANAGER_PLUGINS_50", {
            get: function () {
                if ((this.__EVENT_MANAGER_PLUGINS_50 == null)) {
                    (this.__EVENT_MANAGER_PLUGINS_50 = [
                        new DomEventsPlugin(this.parent.get(DOCUMENT)),
                        new KeyEventsPlugin(this.parent.get(DOCUMENT)),
                        new HammerGesturesPlugin(this.parent.get(DOCUMENT), this._HAMMER_GESTURE_CONFIG_49)
                    ]);
                }
                return this.__EVENT_MANAGER_PLUGINS_50;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_EventManager_51", {
            get: function () {
                if ((this.__EventManager_51 == null)) {
                    (this.__EventManager_51 = new EventManager(this._EVENT_MANAGER_PLUGINS_50, this.parent.get(NgZone)));
                }
                return this.__EventManager_51;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_\u0275DomSharedStylesHost_52", {
            get: function () {
                if ((this.__ɵDomSharedStylesHost_52 == null)) {
                    (this.__ɵDomSharedStylesHost_52 = new DomSharedStylesHost(this.parent.get(DOCUMENT)));
                }
                return this.__ɵDomSharedStylesHost_52;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_\u0275DomRendererFactory2_53", {
            get: function () {
                if ((this.__ɵDomRendererFactory2_53 == null)) {
                    (this.__ɵDomRendererFactory2_53 = new DomRendererFactory2(this._EventManager_51, this._ɵDomSharedStylesHost_52));
                }
                return this.__ɵDomRendererFactory2_53;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_RendererFactory2_54", {
            get: function () {
                if ((this.__RendererFactory2_54 == null)) {
                    (this.__RendererFactory2_54 = this._ɵDomRendererFactory2_53);
                }
                return this.__RendererFactory2_54;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_\u0275SharedStylesHost_55", {
            get: function () {
                if ((this.__ɵSharedStylesHost_55 == null)) {
                    (this.__ɵSharedStylesHost_55 = this._ɵDomSharedStylesHost_52);
                }
                return this.__ɵSharedStylesHost_55;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_Testability_56", {
            get: function () {
                if ((this.__Testability_56 == null)) {
                    (this.__Testability_56 = new Testability(this.parent.get(NgZone)));
                }
                return this.__Testability_56;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_Meta_57", {
            get: function () {
                if ((this.__Meta_57 == null)) {
                    (this.__Meta_57 = new Meta(this.parent.get(DOCUMENT)));
                }
                return this.__Meta_57;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_Title_58", {
            get: function () {
                if ((this.__Title_58 == null)) {
                    (this.__Title_58 = new Title(this.parent.get(DOCUMENT)));
                }
                return this.__Title_58;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_\u0275i_59", {
            get: function () {
                if ((this.__ɵi_59 == null)) {
                    (this.__ɵi_59 = new RadioControlRegistry());
                }
                return this.__ɵi_59;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbModalStack_60", {
            get: function () {
                if ((this.__NgbModalStack_60 == null)) {
                    (this.__NgbModalStack_60 = new NgbModalStack());
                }
                return this.__NgbModalStack_60;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbModal_61", {
            get: function () {
                if ((this.__NgbModal_61 == null)) {
                    (this.__NgbModal_61 = new NgbModal(this.componentFactoryResolver, this, this._NgbModalStack_60));
                }
                return this.__NgbModal_61;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbAlertConfig_62", {
            get: function () {
                if ((this.__NgbAlertConfig_62 == null)) {
                    (this.__NgbAlertConfig_62 = new NgbAlertConfig());
                }
                return this.__NgbAlertConfig_62;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbProgressbarConfig_63", {
            get: function () {
                if ((this.__NgbProgressbarConfig_63 == null)) {
                    (this.__NgbProgressbarConfig_63 = new NgbProgressbarConfig());
                }
                return this.__NgbProgressbarConfig_63;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbTooltipConfig_64", {
            get: function () {
                if ((this.__NgbTooltipConfig_64 == null)) {
                    (this.__NgbTooltipConfig_64 = new NgbTooltipConfig());
                }
                return this.__NgbTooltipConfig_64;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbTypeaheadConfig_65", {
            get: function () {
                if ((this.__NgbTypeaheadConfig_65 == null)) {
                    (this.__NgbTypeaheadConfig_65 = new NgbTypeaheadConfig());
                }
                return this.__NgbTypeaheadConfig_65;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbAccordionConfig_66", {
            get: function () {
                if ((this.__NgbAccordionConfig_66 == null)) {
                    (this.__NgbAccordionConfig_66 = new NgbAccordionConfig());
                }
                return this.__NgbAccordionConfig_66;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbCarouselConfig_67", {
            get: function () {
                if ((this.__NgbCarouselConfig_67 == null)) {
                    (this.__NgbCarouselConfig_67 = new NgbCarouselConfig());
                }
                return this.__NgbCarouselConfig_67;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbCalendar_68", {
            get: function () {
                if ((this.__NgbCalendar_68 == null)) {
                    (this.__NgbCalendar_68 = new NgbCalendarGregorian());
                }
                return this.__NgbCalendar_68;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbDatepickerI18n_69", {
            get: function () {
                if ((this.__NgbDatepickerI18n_69 == null)) {
                    (this.__NgbDatepickerI18n_69 = new NgbDatepickerI18nDefault());
                }
                return this.__NgbDatepickerI18n_69;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbDateParserFormatter_70", {
            get: function () {
                if ((this.__NgbDateParserFormatter_70 == null)) {
                    (this.__NgbDateParserFormatter_70 = new NgbDateISOParserFormatter());
                }
                return this.__NgbDateParserFormatter_70;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbDatepickerService_71", {
            get: function () {
                if ((this.__NgbDatepickerService_71 == null)) {
                    (this.__NgbDatepickerService_71 = new NgbDatepickerService(this._NgbCalendar_68));
                }
                return this.__NgbDatepickerService_71;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbDatepickerConfig_72", {
            get: function () {
                if ((this.__NgbDatepickerConfig_72 == null)) {
                    (this.__NgbDatepickerConfig_72 = new NgbDatepickerConfig());
                }
                return this.__NgbDatepickerConfig_72;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbDropdownConfig_73", {
            get: function () {
                if ((this.__NgbDropdownConfig_73 == null)) {
                    (this.__NgbDropdownConfig_73 = new NgbDropdownConfig());
                }
                return this.__NgbDropdownConfig_73;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbPaginationConfig_74", {
            get: function () {
                if ((this.__NgbPaginationConfig_74 == null)) {
                    (this.__NgbPaginationConfig_74 = new NgbPaginationConfig());
                }
                return this.__NgbPaginationConfig_74;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbPopoverConfig_75", {
            get: function () {
                if ((this.__NgbPopoverConfig_75 == null)) {
                    (this.__NgbPopoverConfig_75 = new NgbPopoverConfig());
                }
                return this.__NgbPopoverConfig_75;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbRatingConfig_76", {
            get: function () {
                if ((this.__NgbRatingConfig_76 == null)) {
                    (this.__NgbRatingConfig_76 = new NgbRatingConfig());
                }
                return this.__NgbRatingConfig_76;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbTabsetConfig_77", {
            get: function () {
                if ((this.__NgbTabsetConfig_77 == null)) {
                    (this.__NgbTabsetConfig_77 = new NgbTabsetConfig());
                }
                return this.__NgbTabsetConfig_77;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NgbTimepickerConfig_78", {
            get: function () {
                if ((this.__NgbTimepickerConfig_78 == null)) {
                    (this.__NgbTimepickerConfig_78 = new NgbTimepickerConfig());
                }
                return this.__NgbTimepickerConfig_78;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_BrowserXhr_79", {
            get: function () {
                if ((this.__BrowserXhr_79 == null)) {
                    (this.__BrowserXhr_79 = new BrowserXhr());
                }
                return this.__BrowserXhr_79;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_ResponseOptions_80", {
            get: function () {
                if ((this.__ResponseOptions_80 == null)) {
                    (this.__ResponseOptions_80 = new BaseResponseOptions());
                }
                return this.__ResponseOptions_80;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_XSRFStrategy_81", {
            get: function () {
                if ((this.__XSRFStrategy_81 == null)) {
                    (this.__XSRFStrategy_81 = _createDefaultCookieXSRFStrategy());
                }
                return this.__XSRFStrategy_81;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_XHRBackend_82", {
            get: function () {
                if ((this.__XHRBackend_82 == null)) {
                    (this.__XHRBackend_82 = new XHRBackend(this._BrowserXhr_79, this._ResponseOptions_80, this._XSRFStrategy_81));
                }
                return this.__XHRBackend_82;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_RequestOptions_83", {
            get: function () {
                if ((this.__RequestOptions_83 == null)) {
                    (this.__RequestOptions_83 = new BaseRequestOptions());
                }
                return this.__RequestOptions_83;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_Http_84", {
            get: function () {
                if ((this.__Http_84 == null)) {
                    (this.__Http_84 = httpFactory(this._XHRBackend_82, this._RequestOptions_83));
                }
                return this.__Http_84;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_ActivatedRoute_85", {
            get: function () {
                if ((this.__ActivatedRoute_85 == null)) {
                    (this.__ActivatedRoute_85 = rootRoute(this._Router_39));
                }
                return this.__ActivatedRoute_85;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_NoPreloading_86", {
            get: function () {
                if ((this.__NoPreloading_86 == null)) {
                    (this.__NoPreloading_86 = new NoPreloading());
                }
                return this.__NoPreloading_86;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_PreloadingStrategy_87", {
            get: function () {
                if ((this.__PreloadingStrategy_87 == null)) {
                    (this.__PreloadingStrategy_87 = this._NoPreloading_86);
                }
                return this.__PreloadingStrategy_87;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_RouterPreloader_88", {
            get: function () {
                if ((this.__RouterPreloader_88 == null)) {
                    (this.__RouterPreloader_88 = new RouterPreloader(this._Router_39, this._NgModuleFactoryLoader_37, this._Compiler_36, this, this._PreloadingStrategy_87));
                }
                return this.__RouterPreloader_88;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_PreloadAllModules_89", {
            get: function () {
                if ((this.__PreloadAllModules_89 == null)) {
                    (this.__PreloadAllModules_89 = new PreloadAllModules());
                }
                return this.__PreloadAllModules_89;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_ROUTER_INITIALIZER_90", {
            get: function () {
                if ((this.__ROUTER_INITIALIZER_90 == null)) {
                    (this.__ROUTER_INITIALIZER_90 = getBootstrapListener(this._ɵg_3));
                }
                return this.__ROUTER_INITIALIZER_90;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_APP_BOOTSTRAP_LISTENER_91", {
            get: function () {
                if ((this.__APP_BOOTSTRAP_LISTENER_91 == null)) {
                    (this.__APP_BOOTSTRAP_LISTENER_91 = [this._ROUTER_INITIALIZER_90]);
                }
                return this.__APP_BOOTSTRAP_LISTENER_91;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_FruitService_92", {
            get: function () {
                if ((this.__FruitService_92 == null)) {
                    (this.__FruitService_92 = new FruitService(this._Http_84));
                }
                return this.__FruitService_92;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AppModuleInjector.prototype, "_FruitDetailResolver_93", {
            get: function () {
                if ((this.__FruitDetailResolver_93 == null)) {
                    (this.__FruitDetailResolver_93 = new FruitDetailResolver(this._FruitService_92));
                }
                return this.__FruitDetailResolver_93;
            },
            enumerable: true,
            configurable: true
        });
        AppModuleInjector.prototype.createInternal = function () {
            this._CommonModule_0 = new CommonModule();
            this._ErrorHandler_1 = errorHandler();
            this._NgProbeToken_2 = [routerNgProbeToken()];
            this._ɵg_3 = new RouterInitializer(this);
            this._APP_INITIALIZER_4 = [
                _initViewEngine,
                _createNgProbe(this.parent.get(NgProbeToken$1, null), this._NgProbeToken_2),
                getAppInitializer(this._ɵg_3)
            ];
            this._ApplicationInitStatus_5 = new ApplicationInitStatus(this._APP_INITIALIZER_4);
            this._ɵf_6 = new ApplicationRef_(this.parent.get(NgZone), this.parent.get(Console), this, this._ErrorHandler_1, this.componentFactoryResolver, this._ApplicationInitStatus_5);
            this._ApplicationRef_7 = this._ɵf_6;
            this._ApplicationModule_8 = new ApplicationModule(this._ApplicationRef_7);
            this._BrowserModule_9 = new BrowserModule(this.parent.get(BrowserModule, null));
            this._ɵba_10 = new InternalFormsSharedModule();
            this._FormsModule_11 = new FormsModule();
            this._NgbAlertModule_12 = new NgbAlertModule();
            this._NgbButtonsModule_13 = new NgbButtonsModule();
            this._NgbCollapseModule_14 = new NgbCollapseModule();
            this._NgbProgressbarModule_15 = new NgbProgressbarModule();
            this._NgbTooltipModule_16 = new NgbTooltipModule();
            this._NgbTypeaheadModule_17 = new NgbTypeaheadModule();
            this._NgbAccordionModule_18 = new NgbAccordionModule();
            this._NgbCarouselModule_19 = new NgbCarouselModule();
            this._NgbDatepickerModule_20 = new NgbDatepickerModule();
            this._NgbDropdownModule_21 = new NgbDropdownModule();
            this._NgbModalModule_22 = new NgbModalModule();
            this._NgbPaginationModule_23 = new NgbPaginationModule();
            this._NgbPopoverModule_24 = new NgbPopoverModule();
            this._NgbRatingModule_25 = new NgbRatingModule();
            this._NgbTabsetModule_26 = new NgbTabsetModule();
            this._NgbTimepickerModule_27 = new NgbTimepickerModule();
            this._NgbRootModule_28 = new NgbRootModule();
            this._HttpModule_29 = new HttpModule();
            this._ɵa_30 = provideForRootGuard(this.parent.get(Router, null));
            this._UrlSerializer_31 = new DefaultUrlSerializer();
            this._RouterOutletMap_32 = new RouterOutletMap();
            this._ROUTER_CONFIGURATION_33 = {};
            this._LocationStrategy_34 = provideLocationStrategy(this.parent.get(PlatformLocation), this.parent.get(APP_BASE_HREF, null), this._ROUTER_CONFIGURATION_33);
            this._Location_35 = new Location(this._LocationStrategy_34);
            this._Compiler_36 = new Compiler();
            this._NgModuleFactoryLoader_37 = new SystemJsNgModuleLoader(this._Compiler_36, this.parent.get(SystemJsNgModuleLoaderConfig, null));
            this._ROUTES_38 = [[
                    {
                        path: 'home',
                        component: HomeComponent
                    },
                    {
                        path: 'fruit-list',
                        component: FruitListComponent
                    },
                    {
                        path: 'fruit-detail/:id',
                        component: FruitDetailComponent,
                        resolve: { fruitItem: FruitDetailResolver }
                    },
                    {
                        path: 'fruit-vendor',
                        loadChildren: './fruit-vendor/fruit-vendor.module#FruitVendorModule'
                    },
                    {
                        path: '**',
                        component: HomeComponent
                    }
                ]
            ];
            this._Router_39 = setupRouter(this._ApplicationRef_7, this._UrlSerializer_31, this._RouterOutletMap_32, this._Location_35, this, this._NgModuleFactoryLoader_37, this._Compiler_36, this._ROUTES_38, this._ROUTER_CONFIGURATION_33, this.parent.get(UrlHandlingStrategy, null), this.parent.get(RouteReuseStrategy, null));
            this._RouterModule_40 = new RouterModule(this._ɵa_30, this._Router_39);
            this._AppModule_41 = new AppModule();
            return this._AppModule_41;
        };
        AppModuleInjector.prototype.getInternal = function (token, notFoundResult) {
            if ((token === CommonModule)) {
                return this._CommonModule_0;
            }
            if ((token === ErrorHandler)) {
                return this._ErrorHandler_1;
            }
            if ((token === NgProbeToken)) {
                return this._NgProbeToken_2;
            }
            if ((token === RouterInitializer)) {
                return this._ɵg_3;
            }
            if ((token === APP_INITIALIZER)) {
                return this._APP_INITIALIZER_4;
            }
            if ((token === ApplicationInitStatus)) {
                return this._ApplicationInitStatus_5;
            }
            if ((token === ApplicationRef_)) {
                return this._ɵf_6;
            }
            if ((token === ApplicationRef)) {
                return this._ApplicationRef_7;
            }
            if ((token === ApplicationModule)) {
                return this._ApplicationModule_8;
            }
            if ((token === BrowserModule)) {
                return this._BrowserModule_9;
            }
            if ((token === InternalFormsSharedModule)) {
                return this._ɵba_10;
            }
            if ((token === FormsModule)) {
                return this._FormsModule_11;
            }
            if ((token === NgbAlertModule)) {
                return this._NgbAlertModule_12;
            }
            if ((token === NgbButtonsModule)) {
                return this._NgbButtonsModule_13;
            }
            if ((token === NgbCollapseModule)) {
                return this._NgbCollapseModule_14;
            }
            if ((token === NgbProgressbarModule)) {
                return this._NgbProgressbarModule_15;
            }
            if ((token === NgbTooltipModule)) {
                return this._NgbTooltipModule_16;
            }
            if ((token === NgbTypeaheadModule)) {
                return this._NgbTypeaheadModule_17;
            }
            if ((token === NgbAccordionModule)) {
                return this._NgbAccordionModule_18;
            }
            if ((token === NgbCarouselModule)) {
                return this._NgbCarouselModule_19;
            }
            if ((token === NgbDatepickerModule)) {
                return this._NgbDatepickerModule_20;
            }
            if ((token === NgbDropdownModule)) {
                return this._NgbDropdownModule_21;
            }
            if ((token === NgbModalModule)) {
                return this._NgbModalModule_22;
            }
            if ((token === NgbPaginationModule)) {
                return this._NgbPaginationModule_23;
            }
            if ((token === NgbPopoverModule)) {
                return this._NgbPopoverModule_24;
            }
            if ((token === NgbRatingModule)) {
                return this._NgbRatingModule_25;
            }
            if ((token === NgbTabsetModule)) {
                return this._NgbTabsetModule_26;
            }
            if ((token === NgbTimepickerModule)) {
                return this._NgbTimepickerModule_27;
            }
            if ((token === NgbRootModule)) {
                return this._NgbRootModule_28;
            }
            if ((token === HttpModule)) {
                return this._HttpModule_29;
            }
            if ((token === ROUTER_FORROOT_GUARD)) {
                return this._ɵa_30;
            }
            if ((token === UrlSerializer)) {
                return this._UrlSerializer_31;
            }
            if ((token === RouterOutletMap)) {
                return this._RouterOutletMap_32;
            }
            if ((token === ROUTER_CONFIGURATION)) {
                return this._ROUTER_CONFIGURATION_33;
            }
            if ((token === LocationStrategy)) {
                return this._LocationStrategy_34;
            }
            if ((token === Location)) {
                return this._Location_35;
            }
            if ((token === Compiler)) {
                return this._Compiler_36;
            }
            if ((token === NgModuleFactoryLoader)) {
                return this._NgModuleFactoryLoader_37;
            }
            if ((token === ROUTES)) {
                return this._ROUTES_38;
            }
            if ((token === Router)) {
                return this._Router_39;
            }
            if ((token === RouterModule)) {
                return this._RouterModule_40;
            }
            if ((token === AppModule)) {
                return this._AppModule_41;
            }
            if ((token === LOCALE_ID)) {
                return this._LOCALE_ID_42;
            }
            if ((token === NgLocalization)) {
                return this._NgLocalization_43;
            }
            if ((token === APP_ID)) {
                return this._APP_ID_44;
            }
            if ((token === IterableDiffers)) {
                return this._IterableDiffers_45;
            }
            if ((token === KeyValueDiffers)) {
                return this._KeyValueDiffers_46;
            }
            if ((token === DomSanitizer)) {
                return this._DomSanitizer_47;
            }
            if ((token === Sanitizer)) {
                return this._Sanitizer_48;
            }
            if ((token === HAMMER_GESTURE_CONFIG)) {
                return this._HAMMER_GESTURE_CONFIG_49;
            }
            if ((token === EVENT_MANAGER_PLUGINS)) {
                return this._EVENT_MANAGER_PLUGINS_50;
            }
            if ((token === EventManager)) {
                return this._EventManager_51;
            }
            if ((token === DomSharedStylesHost)) {
                return this._ɵDomSharedStylesHost_52;
            }
            if ((token === DomRendererFactory2)) {
                return this._ɵDomRendererFactory2_53;
            }
            if ((token === RendererFactory2)) {
                return this._RendererFactory2_54;
            }
            if ((token === SharedStylesHost)) {
                return this._ɵSharedStylesHost_55;
            }
            if ((token === Testability)) {
                return this._Testability_56;
            }
            if ((token === Meta)) {
                return this._Meta_57;
            }
            if ((token === Title)) {
                return this._Title_58;
            }
            if ((token === RadioControlRegistry)) {
                return this._ɵi_59;
            }
            if ((token === NgbModalStack)) {
                return this._NgbModalStack_60;
            }
            if ((token === NgbModal)) {
                return this._NgbModal_61;
            }
            if ((token === NgbAlertConfig)) {
                return this._NgbAlertConfig_62;
            }
            if ((token === NgbProgressbarConfig)) {
                return this._NgbProgressbarConfig_63;
            }
            if ((token === NgbTooltipConfig)) {
                return this._NgbTooltipConfig_64;
            }
            if ((token === NgbTypeaheadConfig)) {
                return this._NgbTypeaheadConfig_65;
            }
            if ((token === NgbAccordionConfig)) {
                return this._NgbAccordionConfig_66;
            }
            if ((token === NgbCarouselConfig)) {
                return this._NgbCarouselConfig_67;
            }
            if ((token === NgbCalendar)) {
                return this._NgbCalendar_68;
            }
            if ((token === NgbDatepickerI18n)) {
                return this._NgbDatepickerI18n_69;
            }
            if ((token === NgbDateParserFormatter)) {
                return this._NgbDateParserFormatter_70;
            }
            if ((token === NgbDatepickerService)) {
                return this._NgbDatepickerService_71;
            }
            if ((token === NgbDatepickerConfig)) {
                return this._NgbDatepickerConfig_72;
            }
            if ((token === NgbDropdownConfig)) {
                return this._NgbDropdownConfig_73;
            }
            if ((token === NgbPaginationConfig)) {
                return this._NgbPaginationConfig_74;
            }
            if ((token === NgbPopoverConfig)) {
                return this._NgbPopoverConfig_75;
            }
            if ((token === NgbRatingConfig)) {
                return this._NgbRatingConfig_76;
            }
            if ((token === NgbTabsetConfig)) {
                return this._NgbTabsetConfig_77;
            }
            if ((token === NgbTimepickerConfig)) {
                return this._NgbTimepickerConfig_78;
            }
            if ((token === BrowserXhr)) {
                return this._BrowserXhr_79;
            }
            if ((token === ResponseOptions)) {
                return this._ResponseOptions_80;
            }
            if ((token === XSRFStrategy)) {
                return this._XSRFStrategy_81;
            }
            if ((token === XHRBackend)) {
                return this._XHRBackend_82;
            }
            if ((token === RequestOptions)) {
                return this._RequestOptions_83;
            }
            if ((token === Http)) {
                return this._Http_84;
            }
            if ((token === ActivatedRoute)) {
                return this._ActivatedRoute_85;
            }
            if ((token === NoPreloading)) {
                return this._NoPreloading_86;
            }
            if ((token === PreloadingStrategy)) {
                return this._PreloadingStrategy_87;
            }
            if ((token === RouterPreloader)) {
                return this._RouterPreloader_88;
            }
            if ((token === PreloadAllModules)) {
                return this._PreloadAllModules_89;
            }
            if ((token === ROUTER_INITIALIZER)) {
                return this._ROUTER_INITIALIZER_90;
            }
            if ((token === APP_BOOTSTRAP_LISTENER)) {
                return this._APP_BOOTSTRAP_LISTENER_91;
            }
            if ((token === FruitService)) {
                return this._FruitService_92;
            }
            if ((token === FruitDetailResolver)) {
                return this._FruitDetailResolver_93;
            }
            return notFoundResult;
        };
        AppModuleInjector.prototype.destroyInternal = function () {
            this._ɵf_6.ngOnDestroy();
            (this.__ɵDomSharedStylesHost_52 && this._ɵDomSharedStylesHost_52.ngOnDestroy());
            (this.__RouterPreloader_88 && this._RouterPreloader_88.ngOnDestroy());
        };
        return AppModuleInjector;
    }(NgModuleInjector));
    var AppModuleNgFactory = new NgModuleFactory(AppModuleInjector, AppModule);
    platformBrowser().bootstrapModuleFactory(AppModuleNgFactory);
}());
